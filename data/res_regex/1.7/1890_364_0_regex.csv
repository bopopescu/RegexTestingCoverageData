"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// zero it here so that BufferTabs doesn't have any problems"")","[8538, 12634]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Even if reallyExit is false, we still exit properly\n\t\t// if background mode is off')","[8907, 13003]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for binary expressions')","[35330, 35392]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//todo symbol macro expansion?')","[21862, 31230]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//localbinding->itself')","[19772, 28690]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n * This type is used to test references to generic type\n */')","[39739, 39992]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n * Copyright 2008-2009 LinkedIn, Inc\n * \n * Licensed under the Apache License, Version 2.0 (the ""License""); you may not\n * use this file except in compliance with the License. You may obtain a copy of\n * the License at\n * \n * http://www.apache.org/licenses/LICENSE-2.0\n * \n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an ""AS IS"" BASIS, WITHOUT\n * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n * License for the specific language governing permissions and limitations under\n * the License.\n */')","[6322, 6525, 32815, 34079]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//localbinding->localbinding')","[21303, 21365, 30547, 30609]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static final Symbol TRY_FINALLY = Symbol.create(""try-finally"");')","[15099, 23250]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenStructureEntitiesAreCreated')",[5687]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//this seems shaky given primitive locals - revisit')",[30920]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// simplified example from voldemort.store.readonly.mr.HadoopStoreBuilderReducer, commit 17d5b4222334155d967b8b37e4f1fcb5a3a30fe5')","[40302, 40364]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Handle marker')","[10501, 14597]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// storage for internal flags (32 bits)\t\t\tBIT USAGE')",[36742]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tclinitgen.mark(begin);')","[20475, 29517]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// view link list')","[9950, 14046]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//c = Class.forName(className);')","[17792, 26194]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// int a = 0;\n        // System.out.println(a + "" is zero?"");')",[5959]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n\t * Inner classes are cool\n\t */')","[489, 992, 1430, 1933, 2436, 2874, 3377, 3880, 4383, 4886, 5389, 40901, 41404, 41907, 42345, 42848, 43286]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//override of invoke/doInvoke for each method')","[20867, 29987]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//is it mapped?')","[22432, 32301]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//value required')","[16475, 24812]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.treedifferencing.matching.measure.WhenStringSimilarityByNGramsIsCalculated')",[43584]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static final Symbol INSTANCE = Symbol.create(""instance?"");\n\n//static final Symbol THISFN = Symbol.create(""thisfn"");\n//static final Symbol CLASS = Symbol.create(""class"");')","[15164, 23315]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//arglist might be preceded by symbol naming this fn')",[28876]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// If no files to open were specified in\n\t\t\t\t// background mode, don't create a view."")","[7525, 11682]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Start I/O threads')","[7708, 11804]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//FnFrame')","[15979, 24192]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//repl')","[22746, 32552]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* mimimi */')","[363, 866, 1807, 2310, 3251, 3754, 4257, 4760, 5263, 40775, 41278, 41781, 42722]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// 8 bits for actual depth value (max. 255)\r\n\r\n\t// for statements ')",[38732]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// depth (name ref, msg) | only value required (binary expression)')",[37114]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(s.substring 2 5) => (. s substring 2 5)\n\t\t\t\t\t//also (package.class.name ...) (. package.class name ...)')",[31730]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// okay we have released the lock and the store is now open again, it is\n        // safe to do a potentially slow delete if we have one too many backups')","[33318, 34582]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// cannot conflict with AddAssertionMASK\r\n\r\n\t// for expression only')",[35897]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Find the highest Untitled-n file')","[8170, 12266]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tclinitgen.visitMaxs(1, 1);\n\t\t//instance fields for closed-overs')","[20619, 29661]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* A block comment\n             * with stars\n             */')",[5565]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\tgen.loadThis();\n//\t\t\tgen.invokeVirtual(OBJECT_TYPE, getClassMethod);\n//\t\t\tgen.invokeVirtual(CLASS_TYPE, getClassLoaderMethod);\n//\t\t\tgen.checkCast(DYNAMIC_CLASSLOADER_TYPE);\n//\t\t\tgen.push(id);\n//\t\t\tgen.invokeVirtual(DYNAMIC_CLASSLOADER_TYPE, getQuotedValMethod);')","[18361, 27073]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(.substring s 2 5) => (. s substring 2 5)')",[31667]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tCLASS, new ClassExpr.Parser(),')","[15481, 23632]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Stop all plugins')","[9401, 13497]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""//can't emit derived fn types due to visibility"")",[30422]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// a simple method invocation\n        // simple indeed')",[5773]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// value for return (binary expression)')",[37052]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\t\t\t\tRT.NS_REFERS, RT.NS_REFERS.get(),\n//\t\t\t\t       RT.NS_IMPORTS, RT.NS_IMPORTS.get(),')","[22871, 32677]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// if context is deprecated, may avoid reporting')","[36242, 36430, 36618, 39234, 39422, 39610]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// load the global catalog')","[10257, 14353]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// parenthesis count (expression)')","[37610, 37672, 37734, 37796, 37858, 37920, 37982, 38044]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Bit7 -> Bit12')",[38356]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// okay finally do the rename')","[33753, 35017]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\t\tLabel falseLabel = gen.newLabel();\n//\t\t\t\tLabel endLabel = gen.newLabel();\n//\t\t\t\tgen.ifNull(falseLabel);\n//\t\t\t\tgen.push(1);\n//\t\t\t\tgen.goTo(endLabel);\n//\t\t\t\tgen.mark(falseLabel);\n//\t\t\t\tgen.push(0);\n//\t\t\t\tgen.mark(endLabel);')","[17212, 25549]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// local declaration reachable (local decl)')",[38168]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* public static void reloadModes(View view)\n\t{\n\t\tview.showWaitCursor();\n\n\t\tString path;\n\t\tString settingsDirectory = jEdit.getSettingsDirectory();\n\n\t\tif(settingsDirectory == null)\n\t\t\tpath = null;\n\t\telse\n\t\t\tpath = MiscUtilities.constructPath(settingsDirectory,\n\t\t\t\t""mode-cache"");\n\n\t\tjEdit.createModeCache(path);\n\n\t\tBuffer[] buffers = jEdit.getBuffers();\n\t\tfor(int i = 0; i < buffers.length; i++)\n\t\t\tbuffers[i].setMode();\n\n\t\tView[] views = jEdit.getViews();\n\t\tfor(int i = 0; i < views.length; i++)\n\t\t{\n\t\t\tEditPane[] editPanes = views[i].getEditPanes();\n\t\t\tfor(int j = 0; j < editPanes.length; j++)\n\t\t\t\teditPanes[j].getTextArea().repaint();\n\t\t}\n\n\t\tview.hideWaitCursor();\n\t} */')","[7925, 12021]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* Answer true if the type use is considered deprecated.\r\n\t* An access in the same compilation unit is allowed.\r\n\t*/')","[36494, 39486]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.treedifferencing.matching.WhenLeavesAreMatched')",[43490]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// site properties are loaded as default properties, overwriting\n\t\t// jEdit's system properties"")","[10134, 14230]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// initialize nodes')","[6385, 6588]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//already qualified or classname?')","[16599, 24936]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//null or not')",[24254]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// package-private members')","[9706, 13802]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tTRY_FINALLY, new TryFinallyExpr.Parser(),')","[15355, 23506]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\tif(varsMap != null && RT.get(varsMap, var) == null)\n//\t\tVARS.set(RT.assoc(varsMap, var, var));')","[22557, 32426]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// return type (operators) | name reference kind (name ref) | has local type (type, method, field decl)')",[36866]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// if only one, clean, 'untitled' buffer is open, we\n\t\t// replace it"")","[10624, 14720]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Wait for pending I/O requests')","[8231, 8415, 8784, 12327, 12511, 12880]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//symbol->localbinding')","[15607, 23820]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// if the source file doesn't exist there is nothing to shift"")","[33443, 33629, 34707, 34893]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// fixes the hang that can occur if we 'save as' to a new\n\t\t// filename which requires re-sorting"")","[10686, 14782]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for single name references')","[35579, 38606]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""//stuff quoted vals in classloader at compile time, pull out at runtime\n\t//this won't work for static compilation..."")","[18230, 26942]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//new OutputStreamWriter(System.out);')","[22808, 32614]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* acquire modification lock */')","[33007, 34271]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// || c2[i].isPrimitive() && c1[i] == Object.class))')",[28087]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// close remaining buffers (the close dialog only deals with\n\t\t// dirty ones)')","[8477, 12573]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// Add our protocols to java.net.URL's list"")","[10011, 14107]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//tail position relative to enclosing recur frame')","[16537, 24874]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//Keyword->KeywordExpr')","[19834, 28752]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//ns-qualified syms are always Vars')","[22181, 31926]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Stop server')","[9340, 13436]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static fields for constants')","[20211, 29253]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//Label')","[15731, 23944]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//at this point className will be non-null if static')",[17399]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// check if number is greater than 0')","[1180, 2624, 42095, 43036]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenCommentsAreAssociatedToSourceCode')",[5735]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//end of class')","[20929, 30049]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//throw new IllegalArgumentException(""No matching method found"");')","[17981, 26507]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Send EditorExitRequested')","[8845, 12941]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(try try-expr* catch-expr* finally-expr?)\n\t\t\t//catch-expr: (catch class sym expr*)\n\t\t\t//finally-expr: (finally expr*)')","[18990, 27679]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//w.flush();')","[22933, 32739]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\telse if(form instanceof Num)\n//\t\treturn new NumExpr((Num) form);')",[31293]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// private members')","[9767, 13863]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// buffer link list')","[9889, 13985]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//create bytecode for a class\n\t\t//with name current_ns.defname[$letname]+\n\t\t//anonymous fns get names fn__id\n\t\t//derived from AFn/RestFn')","[19962, 29004]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//gen.visitInsn(F2D);')","[17019, 25356]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for name references only\r\n\t// Reach LocalReach Parenthesized . . . . . . . . . . . . . . . D D D D D D D D VrF R R R R')",[35455]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for type, method and field declarations ')",[38856]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Byebye...')","[9645, 13741]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Determine installation directory')","[10072, 14168]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//now (fn [args] body...) or (fn ([args] body...) ([args2] body2...) ...)\n\t\t\t//turn former into latter')",[28939]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// return type (operators) | first assignment to local (local decl)')",[36990]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//ClassVisitor cv = new TraceClassVisitor(new CheckClassAdapter(cw), new PrintWriter(System.out));\n\t\t//ClassVisitor cv = new TraceClassVisitor(cw, new PrintWriter(System.out));')","[20087, 29129]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Save settings in case user kills the backgrounded\n\t\t\t// jEdit process')","[9155, 13251]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for assignment only')",[35959]
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.distilling.WhenFilesAreDistilled')",[43396]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Show the kool splash screen')","[7097, 11193]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//if(context != C.STATEMENT || method.getReturnType() == Void.TYPE)')","[26631, 26879]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* rich Aug 21, 2007 */')","[14905, 22995]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tINSTANCE, new InstanceExpr.Parser(),\n//\t\tIDENTICAL, new IdenticalExpr.Parser(),\n//THISFN, null,')","[15419, 23570]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// load user catalog')","[10318, 14414]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//Integer')","[16165, 16227, 16289, 24440, 24502, 24564, 24626]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static init for constants, keywords and vars')","[20350, 29392]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* Answer true if the method use is considered deprecated.\r\n\t* An access in the same compilation unit is allowed.\r\n\t*/')","[36306, 39298]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tLabel begin = clinitgen.newLabel();\n//\t\tLabel end = clinitgen.newLabel();')","[20413, 29455]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//field')","[17461, 25801]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\t\t\tif(idx > 0 && idx < sname.length() - 1)\n//\t\t\t\t\t\t{\n//\t\t\t\t\t\tSymbol target = Symbol.intern(sname.substring(0, idx));\n//\t\t\t\t\t\tSymbol meth = Symbol.intern(sname.substring(idx + 1));\n//\t\t\t\t\t\treturn RT.listStar(DOT, target, meth, form.rest());\n//\t\t\t\t\t\t}\n\t\t\t\t\t//(StringBuilder. ""foo"") => (new StringBuilder ""foo"")\t\n\t\t\t\t\t//else ')",[31799]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//vector<localbinding>')","[15669, 23882]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// reachable by default\r\n\r\n\t// for operators ')",[38294]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//at this point c will be non-null if static')",[25739]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//emitting a Fn means constructing an instance, feeding closed-overs from enclosing scope, if any\n\t\t//fn arg is enclosing fn, not this')","[21054, 30174]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// copy in new files')","[33131, 34395]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// now rename any remaining files')","[33567, 34831]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//when closures are defined inside other closures,\n\t//the closed over locals need to be propagated to the enclosing fn')","[21241, 30485]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for name references ')",[38482]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//cv.visitSource(source, null);')","[20149, 29191]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//finally')","[19052, 27741]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// if there is a view around, show tip of the day')","[7647, 11743]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Initialize server')","[7219, 11315]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\t\t       RT.NS_REFERS, RT.NS_REFERS.get(),\n//\t\t\t\t       RT.NS_IMPORTS, RT.NS_IMPORTS.get(),')",[22684]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n * package g1.t.m.ref is the package to define types which contain\n * references (ref) to generic (g1) types (t) which have multiple (m) type parameters\n */')","[39675, 39928]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// check the huga number\n\t\t// and some new')","[237, 740, 1681, 2184, 3125, 3628, 4131, 4634, 5137, 40649, 41152, 41655, 42596]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// 4 lower bits for operators')",[35268]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//gen.getStatic(fntype, munge(var.sym.toString()), VAR_TYPE);')","[21116, 30298]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* huga bimbo */')","[425, 928, 1304, 1869, 2372, 2748, 3313, 3816, 4319, 4822, 5325, 40837, 41340, 41843, 42219, 42784, 43160]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Create the view and hide the splash screen.')","[7463, 11620]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//value ignored')","[16413, 24750]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// midVal is bigger')",[33877]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// If only one new file is open which is clean, just close\n\t\t// it, which will create an 'Untitled-1'"")","[8048, 12144]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// we failed to do the swap, attempt a rollback')","[33255, 34519]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenMethodBodiesAreConverted')",[48]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*task*/')",[40240]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//define class and store')","[20991, 30111]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//if(context != C.STATEMENT)')","[26008, 26256]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// return type (operators) | name reference kind (name ref) | implicit this (this ref)')",[36928]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n     * Read the key, potentially from the cache\n     */')",[34003]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tClassWriter cw = new ClassWriter(0);')","[20024, 29066]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//public method of non-public class, try to find it in hierarchy')","[18043, 26569]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//keyword->constid')","[15855, 24068]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// 3 lower bits for name references')",[35517]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//no local macros for now')",[31481]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(. x fieldname-sym) or\n\t\t\t//(. x 0-ary-method)\n\t\t\t// (. x methodname-sym args+)\n\t\t\t// (. x (methodname-sym args?))')",[25614]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(. x fieldname-sym) or (. x (methodname-sym args...))')",[17274]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n\nimport org.objectweb.asm.*;\nimport org.objectweb.asm.commons.Method;\nimport org.objectweb.asm.commons.GeneratorAdapter;\nimport org.objectweb.asm.util.TraceClassVisitor;\nimport org.objectweb.asm.util.CheckClassAdapter;\n//*/')",[23188]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//final String className;')","[17668, 18105, 18801, 26070, 26693, 27490]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// 8 bits for parenthesis count value (max. 255)\r\n\r\n\t// for assignment')",[39046]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Handle line number')","[10440, 14536]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// return the newly created 'untitled-1'"")","[8109, 12205]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tgen.invokeConstructor(fntype, new Method(""<init>"", Type.VOID_TYPE, ARG_TYPES[closes.count()]));')",[30236]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\nstatic class NumExpr extends LiteralExpr{\n\tfinal Num num;\n\tfinal static Method numFromIntMethod = Method.getMethod(""clojure.lang.Num from(int)"");\n\tfinal static Method numFromDoubleMethod = Method.getMethod(""clojure.lang.Num from(double)"");\n\tfinal static Method numFromBigIntMethod = Method.getMethod(""clojure.lang.Num from(java.math.BigInteger)"");\n\tfinal static Method numDivideMethod =\n\t\t\tMethod.getMethod(""clojure.lang.Num divide(java.math.BigInteger,java.math.BigInteger)"");\n\tfinal static Type BIGINT_TYPE = Type.getType(BigInteger.class);\n\tfinal static Method bigintFromStringCtor = Method.getMethod(""void <init>(String)"");\n\n\tpublic NumExpr(Num num){\n\t\tthis.num = num;\n\t}\n\n\tObject val(){\n\t\treturn num;\n\t}\n\n\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n\t\tif(context != C.STATEMENT)\n\t\t\t{\n\t\t\tClass nclass = num.getClass();\n\t\t\tif(nclass == FixNum.class)\n\t\t\t\t{\n\t\t\t\tgen.push(num.intValue());\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numFromIntMethod);\n\t\t\t\t}\n\t\t\telse if(nclass == DoubleNum.class)\n\t\t\t\t{\n\t\t\t\tgen.push(num.doubleValue());\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numFromDoubleMethod);\n\t\t\t\t}\n\t\t\telse if(nclass == BigNum.class)\n\t\t\t\t{\n\t\t\t\temitBigInteger(gen, num);\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numFromBigIntMethod);\n\t\t\t\t}\n\t\t\telse if(nclass == RatioNum.class)\n\t\t\t\t{\n\t\t\t\tRatioNum r = (RatioNum) num;\n\t\t\t\temitBigInteger(gen, r.numerator);\n\t\t\t\temitBigInteger(gen, r.denominator);\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numDivideMethod);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tthrow new UnsupportedOperationException(""Unknown Num type"");\n\t\t\t}\n\t}\n\n\tpublic boolean hasJavaClass(){\n\t\treturn true;\n\t}\n\n\tpublic Class getJavaClass() throws Exception{\n\t\treturn Num.class;\n\t}\n\n\tstatic void emitBigInteger(GeneratorAdapter gen, Num num){\n\t\tgen.newInstance(BIGINT_TYPE);\n\t\tgen.dup();\n\t\tgen.push(num.toString());\n\t\tgen.invokeConstructor(BIGINT_TYPE, bigintFromStringCtor);\n\t}\n}\n\nstatic class StringExpr extends LiteralExpr{\n\tfinal String str;\n\n\tpublic StringExpr(String str){\n\t\tthis.str = str;\n\t}\n\n\tObject val(){\n\t\treturn str;\n\t}\n\n\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n\t\tif(context != C.STATEMENT)\n\t\t\tgen.push(str);\n\t}\n\n\tpublic boolean hasJavaClass(){\n\t\treturn true;\n\t}\n\n\tpublic Class getJavaClass() throws Exception{\n\t\treturn String.class;\n\t}\n}\n\nstatic class CharExpr extends LiteralExpr{\n\tfinal Character ch;\n\tfinal static Type CHARACTER_TYPE = Type.getObjectType(""java/lang/Character"");\n\tfinal static Method charValueOfMethod = Method.getMethod(""Character valueOf(char)"");\n\n\tpublic CharExpr(Character ch){\n\t\tthis.ch = ch;\n\t}\n\n\tObject val(){\n\t\treturn ch;\n\t}\n\n\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n\t\tif(context != C.STATEMENT)\n\t\t\t{\n\t\t\tgen.push(ch.charValue());\n\t\t\tgen.invokeStatic(CHARACTER_TYPE, charValueOfMethod);\n\t\t\t}\n\t}\n\n\tpublic boolean hasJavaClass(){\n\t\treturn true;\n\t}\n\n\tpublic Class getJavaClass() throws Exception{\n\t\treturn Character.class;\n\t}\n}\n */')",[18739]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n\t * Scarab Lord Kungen the Elder\n\t */')","[1118, 2562, 42033, 42974]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//ctor that takes closed-overs and inits base + fields\n//\t\tMethod m = new Method(""<init>"", Type.VOID_TYPE, ARG_TYPES[closes.count()]);')",[29724]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//register as the current method and set up a new env frame')","[21489, 30733]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//exception should be on stack')","[18926, 27615]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// the huga bar method')","[551, 1054, 1492, 1995, 2498, 2936, 3439, 3942, 4445, 4948, 5451, 40963, 41466, 41969, 42407, 42910, 43348]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// in this case, we can't directly call\n\t\t\t// view.close(); we have to call closeView()\n\t\t\t// for all open views"")","[9093, 13189]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//sequential enhancement of env (like Lisp let*)')","[21738, 31106]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n\t * Scarab Lord Kungen\n\t */')","[112, 615, 1556, 2059, 3000, 3503, 4006, 4509, 5012, 40524, 41027, 41530, 42471]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* Answer true if the field use is considered deprecated.\r\n\t* An access in the same compilation unit is allowed.\r\n\t*/')","[36118, 39110]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenConsecutiveCommentsAreJoined')",[6055]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(let [var val var2 val2 ...] body...)')","[21676, 31044]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// lowest bit\r\n\r\n\t// for type, method and field declarations only')",[35833]
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.treedifferencing.matching.measure.WhenStringSimilarityByTokensIsCalculated')",[43631]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Save settings')","[9523, 13619]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// cannot conflict with AddAssertionMASK\r\n\r\n\t// for expression ')",[38920]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tgen.getStatic(fntype, munge(k.sym.toString()), KEYWORD_TYPE);')","[21178, 30360]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.treedifferencing.WhenEditScriptsAreCalculated')",[43705]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Close all buffers')","[8968, 13064]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//|| Number.class.isAssignableFrom(c1[i]) && c2[i].isPrimitive()')",[28149]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\r\n\tpublic final static int BitMask1= 0x1; // decimal 1\r\n\tpublic final static int BitMask2= 0x2; // decimal 2\r\n\tpublic final static int BitMask3= 0x4; // decimal 4\r\n\tpublic final static int BitMask4= 0x8; // decimal 8\r\n\tpublic final static int BitMask5= 0x10; // decimal 16\r\n\tpublic final static int BitMask6= 0x20; // decimal 32\r\n\tpublic final static int BitMask7= 0x40; // decimal 64\r\n\tpublic final static int BitMask8= 0x80; // decimal 128\r\n\tpublic final static int BitMask9= 0x100; // decimal 256\r\n\tpublic final static int BitMask10= 0x200; // decimal 512\r\n\tpublic final static int BitMask11= 0x400; // decimal 1024\r\n\tpublic final static int BitMask12= 0x800; // decimal 2048\r\n\tpublic final static int BitMask13= 0x1000; // decimal 4096\r\n\tpublic final static int BitMask14= 0x2000; // decimal 8192\r\n\tpublic final static int BitMask15= 0x4000; // decimal 16384\r\n\tpublic final static int BitMask16= 0x8000; // decimal 32768\r\n\tpublic final static int BitMask17= 0x10000; // decimal 65536\r\n\tpublic final static int BitMask18= 0x20000; // decimal 131072\r\n\tpublic final static int BitMask19= 0x40000; // decimal 262144\r\n\tpublic final static int BitMask20= 0x80000; // decimal 524288\r\n\tpublic final static int BitMask21= 0x100000; // decimal 1048576\r\n\tpublic final static int BitMask22= 0x200000; // decimal 2097152\r\n\tpublic final static int BitMask23= 0x400000; // decimal 4194304\r\n\tpublic final static int BitMask24= 0x800000; // decimal 8388608\r\n\tpublic final static int BitMask25= 0x1000000; // decimal 16777216\r\n\tpublic final static int BitMask26= 0x2000000; // decimal 33554432\r\n\tpublic final static int BitMask27= 0x4000000; // decimal 67108864\r\n\tpublic final static int BitMask28= 0x8000000; // decimal 134217728\r\n\tpublic final static int BitMask29= 0x10000000; // decimal 268435456\r\n\tpublic final static int BitMask30= 0x20000000; // decimal 536870912\r\n\tpublic final static int BitMask31= 0x40000000; // decimal 1073741824\r\n\tpublic final static int BitMask32= 0x80000000; // decimal 2147483648\t\r\n\t*/')",[36054]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Buffer sort')","[7341, 11437]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//determine static or instance\n\t\t\t//static target must be symbol, either fully.qualified.Classname or Classname that has been imported')","[17337, 25677]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Close activity log stream')","[9584, 13680]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// If we are running in background mode and\n\t\t// reallyExit was not specified, then return here.')","[9030, 13126]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\telse\n\t//throw new UnsupportedOperationException();')","[21992, 31419]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenCommentsAreExtracted')",[6150]
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.structuredifferencing.WhenStructureDifferencesAreExtracted')",[6245]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""//register 'this' as local 0\n\t\t\t//registerLocal(THISFN, null, null);"")","[21552, 30796]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// assignment with no effect (assignment)')",[38106]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//gen.invokeStatic(NUM_TYPE, fromIntMethod);')","[16957, 25294]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""/* This is the most beautiful comment in the world\n\t\t\t * and soon it will be gone :'(\n\t\t\t */"")","[301, 804, 1745, 2248, 3189, 3692, 4195, 4698, 5201, 40713, 41216, 41719, 42660]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\t\tgen.storeArg(i);')",[30982]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Save the recent file list')","[8723, 12819]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Get things rolling')","[7280, 11376]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// depth (name ref, msg) ')",[37548]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// they are equal, return the location stored here')",[33815]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// (major).(minor).(<99 = preX, 99 = final).(bug fix)')","[6790, 10886]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\telse if(fclass == Character.class)\n//\t\treturn new CharExpr((Character) form);')",[31356]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Save view properties here - it unregisters\n\t\t// listeners, and we would have problems if the user\n\t\t// closed a view but cancelled an unsaved buffer close')","[9218, 13314]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n     * The overhead for each cache element is the key size + 4 byte array length\n     * + 12 byte object overhead + 8 bytes for a 64-bit reference to the thing\n     */')","[32880, 34144]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// create dummy catalog')","[10379, 14475]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// rename the file')","[33505, 34769]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for this reference')",[38544]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\nstatic class NumExpr extends LiteralExpr{\n\tfinal Num num;\n\tfinal static Method numFromIntMethod = Method.getMethod(""clojure.lang.Num from(int)"");\n\tfinal static Method numFromDoubleMethod = Method.getMethod(""clojure.lang.Num from(double)"");\n\tfinal static Method numFromBigIntMethod = Method.getMethod(""clojure.lang.Num from(java.math.BigInteger)"");\n\tfinal static Method numDivideMethod =\n\t\t\tMethod.getMethod(""clojure.lang.Num divide(java.math.BigInteger,java.math.BigInteger)"");\n\tfinal static Type BIGINT_TYPE = Type.getType(BigInteger.class);\n\tfinal static Method bigintFromStringCtor = Method.getMethod(""void <init>(String)"");\n\n\tpublic NumExpr(Num num){\n\t\tthis.num = num;\n\t}\n\n\tObject val(){\n\t\treturn num;\n\t}\n\n\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n\t\tif(context != C.STATEMENT)\n\t\t\t{\n\t\t\tClass nclass = num.getClass();\n\t\t\tif(nclass == FixNum.class)\n\t\t\t\t{\n\t\t\t\tgen.push(num.intValue());\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numFromIntMethod);\n\t\t\t\t}\n\t\t\telse if(nclass == DoubleNum.class)\n\t\t\t\t{\n\t\t\t\tgen.push(num.doubleValue());\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numFromDoubleMethod);\n\t\t\t\t}\n\t\t\telse if(nclass == BigNum.class)\n\t\t\t\t{\n\t\t\t\temitBigInteger(gen, num);\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numFromBigIntMethod);\n\t\t\t\t}\n\t\t\telse if(nclass == RatioNum.class)\n\t\t\t\t{\n\t\t\t\tRatioNum r = (RatioNum) num;\n\t\t\t\temitBigInteger(gen, r.numerator);\n\t\t\t\temitBigInteger(gen, r.denominator);\n\t\t\t\tgen.invokeStatic(NUM_TYPE, numDivideMethod);\n\t\t\t\t}\n\t\t\telse\n\t\t\t\tthrow new UnsupportedOperationException(""Unknown Num type"");\n\t\t\t}\n\t}\n\n\tpublic boolean hasJavaClass(){\n\t\treturn true;\n\t}\n\n\tpublic Class getJavaClass() throws Exception{\n\t\treturn Num.class;\n\t}\n\n\tstatic void emitBigInteger(GeneratorAdapter gen, Num num){\n\t\tgen.newInstance(BIGINT_TYPE);\n\t\tgen.dup();\n\t\tgen.push(num.toString());\n\t\tgen.invokeConstructor(BIGINT_TYPE, bigintFromStringCtor);\n\t}\n}\n\n\n\nstatic class CharExpr extends LiteralExpr{\n\tfinal Character ch;\n\tfinal static Type CHARACTER_TYPE = Type.getObjectType(""java/lang/Character"");\n\tfinal static Method charValueOfMethod = Method.getMethod(""Character valueOf(char)"");\n\n\tpublic CharExpr(Character ch){\n\t\tthis.ch = ch;\n\t}\n\n\tObject val(){\n\t\treturn ch;\n\t}\n\n\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n\t\tif(context != C.STATEMENT)\n\t\t\t{\n\t\t\tgen.push(ch.charValue());\n\t\t\tgen.invokeStatic(CHARACTER_TYPE, charValueOfMethod);\n\t\t\t}\n\t}\n\n\tpublic boolean hasJavaClass(){\n\t\treturn true;\n\t}\n\n\tpublic Class getJavaClass() throws Exception{\n\t\treturn Character.class;\n\t}\n}\n */')",[27428]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// check if number is greater than -1')","[174, 677, 1618, 2121, 3062, 3565, 4068, 4571, 5074, 5488, 40586, 41089, 41592, 42533]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// check the interesting number\n        // and some new else')",[5526]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tgen.visitLocalVariable(""this"", ""Ljava/lang/Object;"", null, loopLabel, end, 0);')","[21800, 31168]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//no local inlines for now')",[31543]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* Windows or MacOS */')","[8599, 12695]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static class TryFinallyExpr implements Expr{\n//\tfinal Expr tryExpr;\n//\tfinal Expr finallyExpr;\n//\n//\n//\tpublic TryFinallyExpr(Expr tryExpr, Expr finallyExpr){\n//\t\tthis.tryExpr = tryExpr;\n//\t\tthis.finallyExpr = finallyExpr;\n//\t}\n//\n//\tpublic Object eval() throws Exception{\n//\t\tthrow new UnsupportedOperationException(""Can\'t eval try"");\n//\t}\n//\n//\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n//\t\tLabel startTry = gen.newLabel();\n//\t\tLabel endTry = gen.newLabel();\n//\t\tLabel end = gen.newLabel();\n//\t\tLabel finallyLabel = gen.newLabel();\n//\t\tgen.visitTryCatchBlock(startTry, endTry, finallyLabel, null);\n//\t\tgen.mark(startTry);\n//\t\ttryExpr.emit(context, fn, gen);\n//\t\tgen.mark(endTry);\n//\t\tfinallyExpr.emit(C.STATEMENT, fn, gen);\n//\t\tgen.goTo(end);\n//\t\tgen.mark(finallyLabel);\n//\t\t//exception should be on stack\n//\t\tfinallyExpr.emit(C.STATEMENT, fn, gen);\n//\t\tgen.throwException();\n//\t\tgen.mark(end);\n//\t}\n//\n//\tpublic boolean hasJavaClass() throws Exception{\n//\t\treturn tryExpr.hasJavaClass();\n//\t}\n//\n//\tpublic Class getJavaClass() throws Exception{\n//\t\treturn tryExpr.getJavaClass();\n//\t}\n//\n//\tstatic class Parser implements IParser{\n//\t\tpublic Expr parse(C context, Object frm) throws Exception{\n//\t\t\tISeq form = (ISeq) frm;\n//\t\t\t//(try-finally try-expr finally-expr)\n//\t\t\tif(form.count() != 3)\n//\t\t\t\tthrow new IllegalArgumentException(\n//\t\t\t\t\t\t""Wrong number of arguments, expecting: (try-finally try-expr finally-expr) "");\n//\n//\t\t\tif(context == C.EVAL || context == C.EXPRESSION)\n//\t\t\t\treturn analyze(context, RT.list(RT.list(FN, PersistentVector.EMPTY, form)));\n//\n//\t\t\treturn new TryFinallyExpr(analyze(context, RT.second(form)),\n//\t\t\t                          analyze(C.STATEMENT, RT.third(form)));\n//\t\t}\n//\t}\n//}')","[19169, 27858]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//*/')","[17143, 23119, 25480]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""//if ns-qualified can't be classname"")","[17523, 25863]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Initialize activity log and settings directory')","[7158, 11254]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Stop autosave timer')","[9279, 13375]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// depth (name ref, msg) | operator (operators)')","[37176, 37300, 37362, 37424, 37486]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//this.className = className;')","[17730, 26132]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(class Classname)')",[19231]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* exit does editor event & save */')","[10747, 14843]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tUNQUOTE, null,\n//\t\tUNQUOTE_SPLICING, null,\n//\t\tSYNTAX_QUOTE, null,')","[15545, 23696]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*/\n/*\n\nimport org.objectweb.asm.*;\nimport org.objectweb.asm.commons.Method;\nimport org.objectweb.asm.commons.GeneratorAdapter;\nimport org.objectweb.asm.util.TraceClassVisitor;\nimport org.objectweb.asm.util.CheckClassAdapter;\n//*/')",[15037]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\tctorgen.visitMaxs(1, 1);')","[20805, 29925]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(new Classname args...)')","[19355, 28273]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\tFile fo = new File(file);\n//\tif(!fo.exists())\n//\t\treturn null;')","[22621, 32490]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// 8 bits for actual depth value (max. 255)\r\n\r\n\t// for statements only')",[35643]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Turn the current data into a .bak so we can take a look at it\n        // manually if we want')","[33381, 34645]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//macro expansion')","[22054, 31605]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//gen.visitMaxs(1, 1);')","[21614, 30858]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//fn.thisName = name;')",[28814]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// if the dest file exists, it will need to be shifted too')","[33691, 34955]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//m = floatValueOfMethod;')","[17081, 25418]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n         * A lock that blocks reads during swap(), open(), and close()\n         * operations\n         */')","[32945, 34209]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* second block comment */')",[5847]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//presumes matching lengths')","[19293, 28025, 28211]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.distilling.WhenExamplesFromRealProjectsAreDistilled')",[40412]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// reachable by default\r\n\r\n\t// for operators only\r\n\t// Reach LocalReach Parenthesized . . . . . . . . . . . . . . . . . . O O O O O O V VrR R R R R')",[35206]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n * jEdit.java - Main class of the jEdit editor\n * Copyright (C) 1998, 1999, 2000, 2001 Slava Pestov\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.\n */')","[6729, 10825]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n\tpublic static void emitBoxReturn(FnExpr fn, GeneratorAdapter gen, Class returnType){\n\t\tif(returnType.isPrimitive())\n\t\t\t{\n\t\t\tif(returnType == boolean.class)\n\t\t\t\t{\n\t\t\t\tLabel falseLabel = gen.newLabel();\n\t\t\t\tLabel endLabel = gen.newLabel();\n\t\t\t\tgen.ifZCmp(GeneratorAdapter.EQ, falseLabel);\n\t\t\t\tgen.getStatic(RT_TYPE, ""T"", KEYWORD_TYPE);\n\t\t\t\tgen.goTo(endLabel);\n\t\t\t\tgen.mark(falseLabel);\n\t\t\t\tNIL_EXPR.emit(C.EXPRESSION, fn, gen);\n\t\t\t\tgen.mark(endLabel);\n\t\t\t\t}\n\t\t\telse if(returnType == void.class)\n\t\t\t\t{\n\t\t\t\tNIL_EXPR.emit(C.EXPRESSION, fn, gen);\n\t\t\t\t}\n\t\t\telse if(returnType == char.class)\n\t\t\t\t{\n\t\t\t\tgen.invokeStatic(CHAR_TYPE, charValueOfMethod);\n\t\t\t\t}\n\t\t\telse if(returnType == int.class)\n\t\t\t\tgen.invokeStatic(INTEGER_TYPE, intValueOfMethod);\n\t\t\t\t//m = fromIntMethod;\n\t\t\telse\n\t\t\t\t{\n\t\t\t\tMethod m = fromIntMethod;\n\t\t\t\tif(returnType == int.class)\n\t\t\t\t\tm = fromIntMethod;\n\t\t\t\telse if(returnType == float.class)\n\t\t\t\t\t{\n\t\t\t\t\tgen.visitInsn(F2D);\n\t\t\t\t\tm = fromDoubleMethod;\n\t\t\t\t\t}\n\t\t\t\telse if(returnType == double.class)\n\t\t\t\t\tm = fromDoubleMethod;\n\t\t\t\telse if(returnType == long.class)\n\t\t\t\t\tm = fromLongMethod;\n\t\t\t\telse if(returnType == byte.class)\n\t\t\t\t\tm = fromIntMethod;\n\t\t\t\telse if(returnType == short.class)\n\t\t\t\t\tm = fromIntMethod;\n\t\t\t\tgen.invokeStatic(NUM_TYPE, m);\n\t\t\t\t}\n\t\t\t}\n\t}\n  */')","[16771, 25108]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// for type declaration')",[38794]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static final Symbol IMPORT = Symbol.create(""import"");\n//static final Symbol USE = Symbol.create(""use"");\n\n//static final Symbol IFN = Symbol.create(""clojure.lang"", ""IFn"");')","[15293, 23444]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\ta = 1;\n//\t\tfor(ISeq s = RT.keys(closes); s != null; s = s.rest(), ++a)\n//\t\t\t{\n//\t\t\tLocalBinding lb = (LocalBinding) s.first();\n//\t\t\tClass primc = lb.getPrimitiveType();\n//\t\t\tif(primc != null)\n//\t\t\t\t{\n//\t\t\t\tctorgen.visitLocalVariable(lb.name, Type.getDescriptor(primc), null, start, end, a);\n//\t\t\t\tif(primc == Long.TYPE || primc == Double.TYPE)\n//\t\t\t\t\t++a;\n//\t\t\t\t}\n//\t\t\telse\n//\t\t\t\t{\n//\t\t\t\tctorgen.visitLocalVariable(lb.name, ""Ljava/lang/Object;"", null, start, end, a);\n//\t\t\t\t}\n//\t\t\t}')",[29863]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//ctor that takes closed-overs and inits base + fields')",[20681]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// Can't happen"")","[10562, 14658]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* no more methods */')",[5884]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// depth (name ref, msg) | operator (operators) ')",[37238]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// give it an empty token marker to avoid problems')","[7986, 12082]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* plugins without a JAR */')","[9828, 13924]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//RestFn ctor takes reqArity arg')","[20743, 29786]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.treedifferencing.matching.measure.WhenStringSimilarityByLevenshteinIsCalculated')",[43537]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// no more line comments')",[5921]
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.distilling.WhenDeclarationChangesAreExtracted')",[40460]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//introduce a new var in the current ns')","[22494, 32363]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//throw new IllegalArgumentException(""Has no Java class"");')","[18485, 27197]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\t\tNIL_EXPR.emit(C.EXPRESSION, fn, gen);')","[16895, 25232]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.treedifferencing.matching.WhenNodesAreMatched')",[43678]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\telse if(form instanceof Num)\n//\t\treturn new NumExpr((Num) form);\n//\telse if(fclass == String.class)\n//\t\treturn new StringExpr((String) form);\n//\telse if(fclass == Character.class)\n//\t\treturn new CharExpr((Character) form);')",[21929]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* Try to guess the eventual size to avoid unnecessary\n\t\t * copying */')","[10196, 14292]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// can happen if the user presses C+w twice real\n\t\t\t// quick and the buffer has unsaved changes')","[8293, 12389]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static final Symbol UNQUOTE = Symbol.create(""unquote"");\n//static final Symbol UNQUOTE_SPLICING = Symbol.create(""unquote-splicing"");\n//static final Symbol SYNTAX_QUOTE = Symbol.create(""clojure"", ""syntax-quote"");')","[15228, 23379]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//DynamicClassLoader')","[16351, 24688]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenDeclarationsAreConverted')",[6103]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* check that the store is currently closed */')","[33069, 34333]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tif(args.count() > MAX_POSITIONAL_ARITY)\n//\t\t\tthrow new IllegalArgumentException(\n//\t\t\t\t\tString.format(""No more than %d args supported"", MAX_POSITIONAL_ARITY));')","[19648, 28566]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\nstatic class ClassExpr implements Expr{\n\tfinal Class c;\n\tfinal static Method forNameMethod = Method.getMethod(""Class forName(String)"");\n\n\n\tpublic ClassExpr(Class c){\n\t\tthis.c = c;\n\t}\n\n\tpublic Object eval() throws Exception{\n\t\treturn c;\n\t}\n\n\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n\t\tif(context != C.STATEMENT)\n\t\t\t{\n\t\t\tgen.push(c.getName());\n\t\t\tgen.invokeStatic(CLASS_TYPE, forNameMethod);\n\t\t\t}\n\t}\n\n\tpublic boolean hasJavaClass(){\n\t\treturn true;\n\t}\n\n\tpublic Class getJavaClass() throws Exception{\n\t\treturn Class.class;\n\t}\n\n\tstatic class Parser implements IParser{\n\t\tpublic Expr parse(C context, Object frm) throws Exception{\n\t\t\tISeq form = (ISeq) frm;\n\t\t\t//(class Classname)\n\t\t\tif(form.count() != 2)\n\t\t\t\tthrow new Exception(""wrong number of arguments, expecting: (class Classname)"");\n\t\t\tClass c = HostExpr.maybeClass(RT.second(form), true);\n\t\t\tif(c == null)\n\t\t\t\tthrow new IllegalArgumentException(""Unable to resolve classname: "" + RT.second(form));\n\t\t\treturn new ClassExpr(c);\n\t\t}\n\t}\n}\n*/')",[27963]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//([args] body...)')","[21427, 30671]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// open the new store')","[33193, 34457]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*todo*/')",[40178]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tfor(ISeq s = RT.keys(keywords); s != null; s = s.rest())\n//\t\t\t{\n//\t\t\tKeyword k = (Keyword) s.first();\n//\t\t\tclinitgen.push(k.sym.ns);\n//\t\t\tclinitgen.push(k.sym.name);\n//\t\t\tclinitgen.invokeStatic(KEYWORD_TYPE, kwintern);\n//\t\t\tclinitgen.putStatic(fntype, munge(k.sym.toString()), KEYWORD_TYPE);\n//\t\t\t}\n//\t\tfor(ISeq s = RT.keys(vars); s != null; s = s.rest())\n//\t\t\t{\n//\t\t\tVar v = (Var) s.first();\n//\t\t\tclinitgen.push(v.ns.name.name);\n//\t\t\tclinitgen.invokeStatic(SYMBOL_TYPE, symcreate);\n//\t\t\tclinitgen.push(v.sym.name);\n//\t\t\tclinitgen.invokeStatic(SYMBOL_TYPE, symcreate);\n//\t\t\tclinitgen.invokeStatic(VAR_TYPE, varintern);\n//\t\t\tclinitgen.putStatic(fntype, munge(v.sym.toString()), VAR_TYPE);\n//\t\t\t}\n//\t\tclinitgen.mark(end);\n//\t\tclinitgen.visitLocalVariable(""constants"", ""[Ljava/lang/Object;"", null, begin, end, 0);')","[20556, 29598]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// below highest bit\r\n\r\n\t// for type declaration only')",[35769]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(if test then) or (if test then else)')","[19584, 28502]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//note - ns-qualified vars must already exist')","[22308, 22370, 32053, 32115]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// storage for internal flags (32 bits)')",[35141]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Start edit server')","[7769, 11865]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// sort and write out')","[6448, 6651]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//vector<object>')","[15793, 24006]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//some global provision for the hierarchy')","[35079, 36680]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//String')","[16041, 16103, 24316, 24378]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Simple name')","[39801, 40054]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//Var v = lookupVar(sym, false);\n//\tVar v = lookupVar(sym, false);\n//\tif(v != null)\n//\t\treturn new VarExpr(v, tag);')","[22246, 31991]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// reachable (statement)')",[38230]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/*\n\t\t//static fields for keywords\n\t\tfor(ISeq s = RT.keys(keywords); s != null; s = s.rest())\n\t\t\t{\n\t\t\tKeyword k = (Keyword) s.first();\n\t\t\tcv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, munge(k.sym.toString()),\n\t\t\t              KEYWORD_TYPE.getDescriptor(), null, null);\n\t\t\t}\n\t\t//static fields for vars\n\t\tfor(ISeq s = RT.keys(vars); s != null; s = s.rest())\n\t\t\t{\n\t\t\tVar v = (Var) s.first();\n\t\t\tcv.visitField(ACC_PUBLIC + ACC_FINAL + ACC_STATIC, munge(v.sym.toString()),\n\t\t\t              VAR_TYPE.getDescriptor(), null, null);\n\t\t\t}\n\t\t\t*/')","[20288, 29330]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tthis.id = RT.nextID();\n//\t\tDynamicClassLoader loader = (DynamicClassLoader) LOADER.get();\n//\t\tloader.registerQuotedVal(id, v);')","[18294, 27006]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//return false;')","[18423, 27135]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//Class c = Class.forName(className);\n\t\t//java.lang.reflect.Field field = c.getField(fieldName);')","[17919, 26383]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// ok, this one seems to confuse newbies\n\t\t\t\t// endlessly, so log it as NOTICE, not\n\t\t\t\t// ERROR')","[7036, 11132]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//if there is a variadic overload (there can only be one) it is stored here')","[19710, 28628]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* inner comment */')",[5602]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""//Type type = Type.getObjectType(className.replace('.', '/'));"")","[18167, 26755, 26817]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//var->constid')","[15917, 24130]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\t\tClass fclass = v.getClass();\n//\t\t\tif(fclass == Keyword.class)\n//\t\t\t\treturn registerKeyword((Keyword) v);\n//\t\t\telse if(v instanceof Num)\n//\t\t\t\treturn new NumExpr((Num) v);\n//\t\t\telse if(fclass == String.class)\n//\t\t\t\treturn new StringExpr((String) v);\n//\t\t\telse if(fclass == Character.class)\n//\t\t\t\treturn new CharExpr((Character) v);\n//\t\t\telse if(v instanceof IPersistentCollection && ((IPersistentCollection) v).count() == 0)\n//\t\t\t\treturn new EmptyExpr(v);')","[18557, 27269]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// 6 bits for operator ID\r\n\r\n\t// for binary expressions')",[38420]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Try connecting to another running jEdit instance')","[6973, 11069]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// inside same unit - no report')","[36180, 36368, 36556, 39172, 39360, 39548]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Start plugins')","[7402, 11498]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//static class IdenticalExpr implements Expr{\n//\tfinal Expr expr1;\n//\tfinal Expr expr2;\n//\n//\n//\tpublic IdenticalExpr(Expr expr1, Expr expr2){\n//\t\tthis.expr1 = expr1;\n//\t\tthis.expr2 = expr2;\n//\t}\n//\n//\tpublic boolean hasJavaClass(){\n//\t\treturn true;\n//\t}\n//\n//\tpublic Class getJavaClass(){\n//\t\treturn Boolean.class;\n//\t}\n//\n//\tpublic Object eval() throws Exception{\n//\t\treturn expr1.eval() == expr2.eval() ?\n//\t\t       RT.T : RT.F;\n//\t}\n//\n//\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n//\t\tif(context != C.STATEMENT)\n//\t\t\t{\n//\t\t\tLabel not = gen.newLabel();\n//\t\t\tLabel end = gen.newLabel();\n//\t\t\texpr1.emit(C.EXPRESSION, fn, gen);\n//\t\t\texpr2.emit(C.EXPRESSION, fn, gen);\n//\t\t\tgen.visitJumpInsn(IF_ACMPNE, not);\n//\t\t\tgen.getStatic(BOOLEAN_OBJECT_TYPE, ""TRUE"", BOOLEAN_OBJECT_TYPE);\n////\t\t\tgen.getStatic(RT_TYPE, ""T"", KEYWORD_TYPE);\n//\t\t\tgen.goTo(end);\n//\t\t\tgen.mark(not);\n//\t\t\tgen.getStatic(BOOLEAN_OBJECT_TYPE, ""FALSE"", BOOLEAN_OBJECT_TYPE);\n////\t\t\tNIL_EXPR.emit(C.EXPRESSION, fn, gen);\n//\t\t\tgen.mark(end);\n//\t\t\t}\n//\t}\n//\n//\tstatic class Parser implements IParser{\n//\t\tpublic Expr parse(C context, Object frm) throws Exception{\n//\t\t\tISeq form = (ISeq) frm;\n//\t\t\tif(form.count() != 3)\n//\t\t\t\tthrow new Exception(""wrong number of arguments, expecting: (identical? x y)"");\n//\n//\t\t\treturn new IdenticalExpr(analyze(C.EXPRESSION, RT.second(form)), analyze(C.EXPRESSION, RT.third(form)));\n//\t\t}\n//\t}\n//}\n\n//static class InstanceExpr implements Expr{\n//\tfinal Expr expr;\n//\tfinal Class c;\n//\n//\n//\tpublic InstanceExpr(Expr expr, Class c){\n//\t\tthis.expr = expr;\n//\t\tthis.c = c;\n//\t}\n//\n//\tpublic Object eval() throws Exception{\n//\t\treturn c.isInstance(expr.eval()) ?\n//\t\t       RT.T : RT.F;\n//\t}\n//\n//\tpublic boolean hasJavaClass(){\n//\t\treturn true;\n//\t}\n//\n//\tpublic Class getJavaClass(){\n//\t\treturn Boolean.class;\n//\t}\n//\n//\tpublic void emit(C context, FnExpr fn, GeneratorAdapter gen){\n//\t\tif(context != C.STATEMENT)\n//\t\t\t{\n//\t\t\tLabel not = gen.newLabel();\n//\t\t\tLabel end = gen.newLabel();\n//\t\t\texpr.emit(C.EXPRESSION, fn, gen);\n//\t\t\tgen.instanceOf(Type.getType(c));\n//\t\t\tgen.ifZCmp(GeneratorAdapter.EQ, not);\n//\t\t\tgen.getStatic(BOOLEAN_OBJECT_TYPE, ""TRUE"", BOOLEAN_OBJECT_TYPE);\n////\t\t\tgen.getStatic(RT_TYPE, ""T"", KEYWORD_TYPE);\n//\t\t\tgen.goTo(end);\n//\t\t\tgen.mark(not);\n//\t\t\tgen.getStatic(BOOLEAN_OBJECT_TYPE, ""FALSE"", BOOLEAN_OBJECT_TYPE);\n////\t\t\tNIL_EXPR.emit(C.EXPRESSION, fn, gen);\n//\t\t\tgen.mark(end);\n//\t\t\t}\n//\t}\n//\n//\tstatic class Parser implements IParser{\n//\t\tpublic Expr parse(C context, Object frm) throws Exception{\n//\t\t\tISeq form = (ISeq) frm;\n//\t\t\t//(instance? x Classname)\n//\t\t\tif(form.count() != 3)\n//\t\t\t\tthrow new Exception(""wrong number of arguments, expecting: (instance? x Classname)"");\n//\t\t\tClass c = HostExpr.maybeClass(RT.third(form), true);\n//\t\t\tif(c == null)\n//\t\t\t\tthrow new IllegalArgumentException(""Unable to resolve classname: "" + RT.third(form));\n//\t\t\treturn new InstanceExpr(analyze(C.EXPRESSION, RT.second(form)), c);\n//\t\t}\n//\t}\n//}')","[19522, 28440]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//*')","[14967, 16833, 23057, 25170]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.ast.java.WhenSourceCodeChangesAreClassified')",[6007]
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.structuredifferencing.java.WhenJavaStructureTreesAreBuilt')",[6197]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* mimimi mi */')","[1366, 2810, 42281, 43222]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Parse command line')","[6912, 11008]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Send EditorExiting')","[9462, 13558]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* if value is null:\n\t\t * - if default is null, unset user prop\n\t\t * - else set user prop to """"\n\t\t * else\n\t\t * - if default equals value, ignore\n\t\t * - if default doesn\'t equal value, set user\n\t\t */')","[7836, 11932]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\t\tgen.push(className);\n//\t\tgen.push(fieldName);\n//\t\tgen.invokeStatic(REFLECTOR_TYPE, getStaticFieldMethod);')","[17856, 26320]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// check the number')","[1242, 2686, 42157, 43098]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//throw new Exception(""No such namespace: "" + sym.ns);')",[32239]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// execute startup macro')","[7586, 11559]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//To change body of catch statement use File | Settings | File Templates.')",[26445]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(fn [args] body...) or (fn ([args] body...) ([args2] body2...) ...)\n\t\t\t//turn former into latter')",[19897]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//private static final Type NUM_TYPE = Type.getType(Num.class);')",[23758]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//exception should be on stack\n\t\t\t//put in clause local')","[18864, 27553]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//(def x) or (def x initexpr)')","[16661, 24998]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// the keyMd5 is bigger')",[33939]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* inside else */')",[5639]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// highest bit')",[35705]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""// for developers: run 'jedit 0' to get extensive logging"")","[6851, 10947]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//note - ns-qualified vars in other namespaces must already exist')",[32177]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '//\tKeywordExpr ke = (KeywordExpr) RT.get(keywordsMap, keyword);\n//\tif(ke == null)\n//\t\tKEYWORDS.set(RT.assoc(keywordsMap, keyword, ke = new KeywordExpr(keyword)));\n//\treturn ke;')","[22119, 31864]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Create a new file when the last is closed')","[8354, 12450]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', ""/*\n\t private static String maybeClassName(Object form, boolean stringOk){\n\t\t String className = null;\n\t\t if(form instanceof Symbol)\n\t\t\t {\n\t\t\t Symbol sym = (Symbol) form;\n\t\t\t if(sym.ns == null) //if ns-qualified can't be classname\n\t\t\t\t {\n\t\t\t\t if(sym.name.indexOf('.') > 0 || sym.name.charAt(0) == '[')\n\t\t\t\t\t className = sym.name;\n\t\t\t\t else\n\t\t\t\t\t {\n\t\t\t\t\t IPersistentMap imports = (IPersistentMap) ((Var) RT.NS_IMPORTS.get()).get();\n\t\t\t\t\t className = (String) imports.valAt(sym);\n\t\t\t\t\t }\n\t\t\t\t }\n\t\t\t }\n\t\t else if(stringOk && form instanceof String)\n\t\t\t className = (String) form;\n\t\t return className;\n\t }\n */"")","[17606, 25946]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '(.*)\\((.*)\\)', 'ch.uzh.ifi.seal.changedistiller.distilling.WhenMethodBodyChangesAreExtracted')",[43443]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Do this crap here so that the view is created\n\t\t// and added to the list before it is shown\n\t\t// (for the sake of plugins that add stuff to views)')","[8662, 12758]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Bit22 -> Bit29')",[38982]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '/* first block comment */')",[5810]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// qualified name')","[39863, 40116]"
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// return type (operators) | name reference kind (name ref) | add assertion (type decl)')",[36804]
"('CommentCleaner.java', 'ch.uzh.ifi.seal.changedistiller.ast.java.CommentCleaner', 'removeCommentedSourceCode', '(?s).*([aA-zZ0-9]*\\.)*[aA-zZ0-9]+?\\((?s).*?\\);(?s).*| (?s).+=(?s).+?;(?s).*| (?s).*if\\s*\\((?s).*\\)\\s*\\{*\\s*(?s).*| (?s).*?try\\s*\\{(?s).*?\\}\\s*catch\\s*\\((?s).*?\\)\\s*\\{(?s).*?\\}(?s).*', '// Bit6 -> Bit13')",[38668]
