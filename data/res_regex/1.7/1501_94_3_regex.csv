"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.lexical.pos.PosTokenTest')","[36, 1930]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'accessible')","[3396, 3962]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.RecognizerShouldAnnotateTest')","[507, 4746]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testNonEquality(io.scigraph.annotation.EntityAnnotationGroupTest)')","[282, 1243]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'neuroscience')","[3240, 3818]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'verifyAllBuilderOptions(io.scigraph.annotation.EntityFormatConfigurationTest)')","[221, 1199]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'materials,')","[3318, 3890]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'resources:')","[3266, 3842]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.EntityRecognizerTest')","[673, 4826]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.EntityAnnotationTest')","[467, 4515]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testMultiSentenceChunks(io.scigraph.lexical.LexicalLibOpenNlpImplTest)')","[97, 1089]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testShingleProduction(io.scigraph.annotation.ShingleProducerTest)')","[734, 1617]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'to')","[3526, 4082]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testInsertAllSpans(io.scigraph.annotation.EntityProcessorImplTest)')","[1045, 1903]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'toString_doesntFail(io.scigraph.lexical.pos.PosTokenTest)')","[57, 1067]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'third')","[2534, 2656]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetBase(io.scigraph.annotation.EntityProcessorImplTest)')","[919, 1771]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testEquality(io.scigraph.annotation.EntityAnnotationGroupTest)')","[345, 1309]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'first')","[2034, 2156, 4234, 4356]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testNonExcludedCategory(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[528, 1441]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testAddBufferToQueue(io.scigraph.annotation.ShingleProducerTest)')","[755, 1639]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetStart(io.scigraph.annotation.EntityAnnotationGroupTest)')","[303, 1265]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetMultipleLongestAnnotationGroups(io.scigraph.annotation.EntityProcessorImplTest)')","[877, 1727]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testExtractSentences(io.scigraph.lexical.LexicalLibOpenNlpImplTest)')","[118, 1111]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testCompareTo(io.scigraph.annotation.EntityAnnotationTest)')","[488, 1419]"
"('EntityRecognizer.java', 'io.scigraph.annotation.EntityRecognizer', 'shouldAnnotate', '(\\d|\\-|_)+', 'Label')","[4541, 4566, 4592, 4617, 4694, 4719]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.EntityFormatConfigurationTest')","[200, 4434]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'second')","[2284, 2406]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'inventory')","[3162, 3746]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testNumericInclusion(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[612, 1529]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'computer')","[3474, 4034]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.lexical.LexicalLibOpenNlpImplTest')","[76, 4407]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetAnnotations(io.scigraph.annotation.EntityProcessorImplTest)')","[1003, 1859]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.EntityAnnotationGroupTest')","[261, 4461]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'dynamic')","[3136, 3722]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'the')","[2008, 2132, 2258, 2382, 2508, 2632, 3552, 4106, 4208, 4332]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'Web-based')","[3214, 3794]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'equalsContract(io.scigraph.annotation.TokenTest)')","[448, 1397]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testInclusion(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[549, 1463]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'Neuroscience')","[2732, 2884, 3032, 3626]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetSeparateAnnotationGroups(io.scigraph.annotation.EntityProcessorImplTest)')","[835, 1683]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'is')","[1982, 2108, 2232, 2358, 2482, 2608, 2810, 2956, 3110, 3698, 4182, 4308]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'and')","[3344, 3914]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testEqualChunks(io.scigraph.lexical.LexicalLibOpenNlpImplTest)')","[160, 1155]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testNumericExclusion(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[591, 1507]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'sentence.')","[2060, 2180, 2310, 2430, 2560, 2680, 4260, 4380]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testExcludedCategories(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[633, 1551]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'Framework')","[2784, 2932, 3084, 3674]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testIntersects(io.scigraph.annotation.EntityAnnotationGroupTest)')","[387, 1353]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'data,')","[3292, 3866]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.EntityProcessorImplTest')","[814, 4903]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.EntityTest')","[774, 4880]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetAnnotationsWithEdgeStopWords(io.scigraph.annotation.EntityProcessorImplTest)')","[961, 1815]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'This')","[1956, 2084, 2206, 2334, 2456, 2584, 4156, 4284]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'website.')","[2836, 2980]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'equalsContract(io.scigraph.annotation.EntityTest)')","[795, 1661]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetEnd(io.scigraph.annotation.EntityAnnotationGroupTest)')","[366, 1331]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.TokenTest')","[406, 4488]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'via')","[3422, 3986]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testKnownEntity(io.scigraph.annotation.EntityRecognizerTest)')","[694, 1595]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'io.scigraph.annotation.ShingleProducerTest')","[713, 4853]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'Internet.')","[3578, 4130]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testNotListedInclusion(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[654, 1573]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testPriorityQueue(io.scigraph.annotation.EntityAnnotationGroupTest)')","[324, 1287]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetJoinedAnnotationGroups(io.scigraph.annotation.EntityProcessorImplTest)')","[898, 1749]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'of')","[3188, 3770]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'The')","[2706, 2860, 3006, 3602]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testTagPOS(io.scigraph.lexical.LexicalLibOpenNlpImplTest)')","[181, 1177]"
"('EntityRecognizer.java', 'io.scigraph.annotation.EntityRecognizer', 'shouldAnnotate', '(\\d|\\-|_)+', 'foo')","[4773, 4799]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testExcludedCategory(io.scigraph.annotation.RecognizerShouldAnnotateTest)')","[570, 1485]"
"('EntityRecognizer.java', 'io.scigraph.annotation.EntityRecognizer', 'shouldAnnotate', '(\\d|\\-|_)+', '123')","[4643, 4668]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'Information')","[2758, 2908, 3058, 3650]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'any')","[3448, 4010]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testUniqueAnnotations(io.scigraph.annotation.EntityProcessorImplTest)')","[982, 1837]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetLongestAnnotationGroups(io.scigraph.annotation.EntityProcessorImplTest)')","[856, 1705]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testChunks(io.scigraph.lexical.LexicalLibOpenNlpImplTest)')","[139, 1133]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'connected')","[3500, 4058]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'setReader(io.scigraph.annotation.EntityFormatConfigurationTest)')","[242, 1221]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'verifyToString(io.scigraph.annotation.TokenTest)')","[427, 1375]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testInsertLongestOnlySpans(io.scigraph.annotation.EntityProcessorImplTest)')","[940, 1793]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'tools')","[3370, 3938]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'testGetAnnotationsWithMinLength(io.scigraph.annotation.EntityProcessorImplTest)')","[1024, 1881]"
"('Description.java', 'org.junit.runner.Description', 'methodAndClassNamePatternGroupOrDefault', '([\\s\\S]*)\\((.*)\\)', 'null')",[17]
