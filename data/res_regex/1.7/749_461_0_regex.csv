"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseMultiLinedQuoted(au.com.bytecode.opencsv.CSVParserTest)')",[1253]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNormalParsedLine(au.com.bytecode.opencsv.CSVReaderTest)')",[334]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.CSVWriterTest')","[1382, 1405, 1429, 1452]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseTrickyString(au.com.bytecode.opencsv.CSVParserTest)')",[854]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseLineWithNoEscapeChar(au.com.bytecode.opencsv.CSVWriterTest)')",[21]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOptionalConstructors(au.com.bytecode.opencsv.CSVReaderTest)')",[544]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'validateEscapeStringBeforeRealTest(au.com.bytecode.opencsv.CSVParserTest)')",[1127]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testASingleQuoteAsDataElement(au.com.bytecode.opencsv.CSVReaderTest)')",[355]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseAll(au.com.bytecode.opencsv.CSVReaderTest)')",[397]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParse(au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest)')",[607]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testASingleQuoteAsDataElementWithEmptyField(au.com.bytecode.opencsv.CSVReaderTest)')",[376]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsedLineWithInternalQuota(au.com.bytecode.opencsv.CSVParserTest)')",[1169]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.CSVReaderTest')","[1476, 1499, 1523, 1546]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest')","[1758, 1781, 1805, 1828]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.CSVParserTest')","[1943, 1963, 1984, 2004]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseQuotedStringWithDefinedSeperatorAndQuote(au.com.bytecode.opencsv.CSVParserTest)')",[1211]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseEmptyElements(au.com.bytecode.opencsv.CSVParserTest)')",[1232]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseWithSpacesInHeader(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest)')",[709]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseLineWithNoEscapeChar(au.com.bytecode.opencsv.CSVWriterTest)')",[41]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSkippingLinesWithDifferentEscape(au.com.bytecode.opencsv.CSVReaderTest)')",[293]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'returnPendingIfNullIsPassedIntoParseLineMulti(au.com.bytecode.opencsv.CSVParserTest)')",[1085]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNoQuoteChars(au.com.bytecode.opencsv.CSVWriterTest)')",[83]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testADoubleQuoteAsDataElement(au.com.bytecode.opencsv.CSVParserTest)')",[1274]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseQuotedStringWithDefinedSeperator(au.com.bytecode.opencsv.CSVParserTest)')",[1358]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testStreamFlushing(au.com.bytecode.opencsv.CSVWriterTest)')",[146]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNoQuotingNoEscaping(au.com.bytecode.opencsv.CSVWriterTest)')",[188]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseLineMultiAllowsQuotesAcrossMultipleLines(au.com.bytecode.opencsv.CSVParserTest)')",[1043]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseLine(au.com.bytecode.opencsv.CSVWriterTest)')",[272]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNoQuoteCharsAndNoEscapeChars(au.com.bytecode.opencsv.CSVWriterTest)')",[104]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIssue2263439(au.com.bytecode.opencsv.CSVParserTest)')",[959]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIssue2859181(au.com.bytecode.opencsv.CSVParserTest)')",[980]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNullValues(au.com.bytecode.opencsv.CSVWriterTest)')",[125]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseLine(au.com.bytecode.opencsv.CSVReaderTest)')",[523]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseAll(au.com.bytecode.opencsv.CSVWriterTest)')",[62]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testAlternateEscapeChar(au.com.bytecode.opencsv.CSVWriterTest)')",[167]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseSimpleString(au.com.bytecode.opencsv.CSVParserTest)')",[1316]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParse(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest)')",[730]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.OpencsvTest')","[1852, 1875, 1899, 1922]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSingleQuoteWhenDoubleQuoteIsQuoteChar(au.com.bytecode.opencsv.CSVReaderTest)')",[460]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'anIOExceptionThrownifStringEndsInsideAQuotedString(au.com.bytecode.opencsv.CSVParserTest)')",[1022]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSkippingLines(au.com.bytecode.opencsv.CSVReaderTest)')",[586]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testAMultiLineInsideQuotes(au.com.bytecode.opencsv.CSVParserTest)')",[875]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'pendingIsClearedAfterCallToParseLine(au.com.bytecode.opencsv.CSVParserTest)')",[1064]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseMultipleQuotes(au.com.bytecode.opencsv.CSVParserTest)')",[833]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testAlternateLineFeeds(au.com.bytecode.opencsv.CSVWriterTest)')",[230]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIssue2726363(au.com.bytecode.opencsv.CSVParserTest)')",[1001]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEscapedEscape(au.com.bytecode.opencsv.CSVReaderTest)')",[439]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSkippingLinesWithDifferentEscape(au.com.bytecode.opencsv.CSVReaderTest)')",[313]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParse(au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest)')",[668]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest')","[1664, 1687, 1711, 1734]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseLineStrictQuote(au.com.bytecode.opencsv.CSVReaderTest)')",[502]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseQuotedQuoteCharacters(au.com.bytecode.opencsv.CSVParserTest)')",[792]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testStrictQuoteSimple(au.com.bytecode.opencsv.CSVParserTest)')",[896]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'correctlyParseNullString(au.com.bytecode.opencsv.CSVWriterTest)')",[251]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNestedQuotes(au.com.bytecode.opencsv.CSVWriterTest)')",[209]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testQuotedParsedLine(au.com.bytecode.opencsv.CSVReaderTest)')",[481]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseWithSpacesInHeader(au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategyTest)')",[689]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEscapedDoubleQuoteAsDataElement(au.com.bytecode.opencsv.CSVParserTest)')",[1295]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParse(au.com.bytecode.opencsv.bean.HeaderColumnNameTranslateMappingStrategyTest)')",[648]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParse(au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest)')",[627]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'whichCharactersAreEscapable(au.com.bytecode.opencsv.CSVParserTest)')",[1148]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseLine(au.com.bytecode.opencsv.CSVParserTest)')",[1337]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testStrictQuoteWithGarbage(au.com.bytecode.opencsv.CSVParserTest)')",[938]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseQuotedStringWithCommas(au.com.bytecode.opencsv.CSVParserTest)')",[1190]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWriteRead(au.com.bytecode.opencsv.OpencsvTest)')",[771]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'parseQuotedQuoteCharacters(au.com.bytecode.opencsv.CSVParserTest)')",[812]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEscapedQuote(au.com.bytecode.opencsv.CSVReaderTest)')",[418]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'parseQuotedStringWithDefinedSeperator(au.com.bytecode.opencsv.CSVReaderTest)')",[565]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWriteRead(au.com.bytecode.opencsv.OpencsvTest)')",[751]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'returnNullWhenNullPassedIn(au.com.bytecode.opencsv.CSVParserTest)')",[1106]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'au.com.bytecode.opencsv.bean.ColumnPositionMappingStrategyTest')","[1570, 1593, 1617, 1640]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testStrictQuoteWithSpacesAndTabs(au.com.bytecode.opencsv.CSVParserTest)')",[917]
