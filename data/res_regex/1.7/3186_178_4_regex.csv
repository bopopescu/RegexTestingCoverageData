"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'staff')",[1042265]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'person!')",[1049945]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsPeriod(opennlp.tools.util.featuregen.StringPatternTest)')","[26222, 28702, 79515, 98864, 115380, 164514, 167314, 224959, 256184, 302180, 304820, 359049, 390253, 442525, 445485, 506546, 541994, 598973, 602173, 668358, 706598, 766715, 770075, 854559, 856529]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'colour.')",[1046553]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'are')","[1102188, 1115321, 1124590, 1156857, 1175129, 1188015, 1222621, 1240893]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pictures')","[1094000, 1145465, 1211229]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'year')","[1125487, 1189263]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'reach')","[1121416, 1183599]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====>N:art(""um"" <arti> <-sam> DET M S)\tum')","[890713, 904011, 917039, 929281, 948047, 967937, 987827, 1007717]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'test3FoldCV(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[32422, 33786, 81819, 99488, 119082, 171514, 173054, 227647, 259634, 308780, 310232, 361545, 394207, 449925, 451553, 509426, 546326, 606973, 608733, 671526, 711182, 775115, 776963, 863499, 864165]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'spontaneously.')",[1043833]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Produce')",[1132322]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<np-idf>')","[934367, 934792, 943476, 948541, 948596, 950292, 950496, 950766, 950858, 954257, 954682, 963366, 968431, 968486, 970182, 970386, 970656, 970748, 974147, 974572, 983256, 988321, 988376, 990072, 990276, 990546, 990638, 994037, 994462, 1003146, 1008211, 1008266, 1009962, 1010166, 1010436, 1010528]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'depended')",[1060089]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'desperately')","[1130754, 1196591]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'about')","[1102993, 1127902, 1157977, 1192623, 1223741]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameFinderMETest')","[1258045, 1258068, 1258092, 1258115]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:prp(""entre"" <right>)\tentre')","[885350, 887274, 898648, 900572, 912098, 913874, 924340, 926116, 940531, 942455, 960421, 962345, 980311, 982235, 1000201, 1002125]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHelpMessageOfTools(opennlp.tools.cmdline.CLITest)')","[12210, 12706, 73659, 97363, 106553, 148694, 149254, 218127, 247955, 287264, 287792, 352705, 380828, 425801, 426393, 499226, 531672, 580893, 581533, 660306, 695678, 747731, 748403, 834357, 834687]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'student')",[1040441]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Max-LÃ¶w-StraÃ\x9fe')",[1239965]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'taxi')",[1034393]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '21,')",[1067833]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'any')",[1044825]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNicePrint(opennlp.tools.chunker.ChunkSampleTest)')","[60477, 60508, 60539, 62461, 62492, 62523, 92499, 92523, 92547, 138186, 138216, 138246, 203189, 203224, 203259, 205429, 205464, 205499, 240107, 240135, 240163, 277428, 277456, 277484, 338645, 338678, 338711, 340757, 340790, 340823, 373115, 373141, 373167, 414621, 414653, 414685, 483410, 483447, 483484, 485778, 485815, 485852, 522776, 522806, 522836, 568705, 568740, 568775, 643173, 643213, 643253, 645733, 645773, 645813, 686211, 686244, 686277, 734871, 734908, 734945, 813125, 813167, 813209, 815813, 815855, 815897, 1076703, 1076743, 1076783, 1078819, 1078861, 1078903]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====N<:pp')","[890791, 904089, 917111, 929353, 948125, 968015, 987905, 1007795]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEqualsDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16333, 16364, 16395, 19681, 19712, 19743, 75699, 75723, 75747, 109651, 109681, 109711, 153349, 153384, 153419, 157129, 157164, 157199, 220507, 220535, 220563, 250843, 250871, 250899, 291653, 291686, 291719, 295217, 295250, 295283, 354915, 354941, 354967, 384136, 384168, 384200, 430722, 430759, 430796, 434718, 434755, 434792, 501776, 501806, 501836, 535295, 535330, 535365, 586213, 586253, 586293, 590533, 590573, 590613, 663111, 663144, 663177, 699511, 699548, 699585, 753317, 753359, 753401, 757853, 757895, 757937, 841493, 841533, 841573, 842953, 842995, 843037]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '""Tapasbar""')","[1097818, 1150777, 1216541]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""He's"")",[1063865]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Italian.')","[1096576, 1149049, 1214813]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Since')",[1039545]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=TOP:n(""casa"" <np-idf> <NER:address> <build> F P)\tCasas')","[888971, 902269, 915431, 927673, 946305, 966195, 986085, 1005975]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<event>')","[950796, 950889, 970686, 970779, 990576, 990669, 1010466, 1010559]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Is')",[1050937]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'U')","[1119714, 1123555, 1126683, 1131099, 1181231, 1186575, 1190927, 1197071, 1253063, 1258159, 1258951]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Europe.')","[1098393, 1151577, 1217341]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:prp(""com_relação_a"" <sam-> <left>)\tCom_relação_a')","[881373, 894671, 908439, 920681, 935721, 955611, 975501, 995391]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsEmpty(opennlp.tools.util.StringUtilTest)')","[34313, 34344, 34375, 35553, 35584, 35615, 82323, 82347, 82371, 119986, 120016, 120046, 173649, 173684, 173719, 175049, 175084, 175119, 228235, 228263, 228291, 260476, 260504, 260532, 310793, 310826, 310859, 312113, 312146, 312179, 362091, 362117, 362143, 395173, 395205, 395237, 452182, 452219, 452256, 453662, 453699, 453736, 510056, 510086, 510116, 547385, 547420, 547455, 609413, 609453, 609493, 611013, 611053, 611093, 672219, 672252, 672285, 712303, 712340, 712377, 777677, 777719, 777761, 779357, 779399, 779441, 865367, 865407, 865447, 866195, 866237, 866279]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=SUBJ:cu')","[884258, 889127, 897556, 902425, 911090, 915575, 923332, 927817, 939439, 946461, 959329, 966351, 979219, 986241, 999109, 1006131]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'told')","[1087859, 1097680, 1136921, 1150585, 1202685, 1216349]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '======H:prp(""para"" <np-long>)\tpara')","[889335, 902633, 915767, 928009, 946669, 966559, 986449, 1006339]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'IND')","[934058, 937153, 943741, 949760, 950235, 953948, 957043, 963631, 969650, 970125, 973838, 976933, 983521, 989540, 990015, 993728, 996823, 1003411, 1009430, 1009905]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=SUBJ:cu')","[882311, 887766, 895609, 901064, 909303, 914326, 921545, 926568, 937492, 945100, 957382, 964990, 977272, 984880, 997162, 1004770]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSet(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[1388, 16054, 19402, 75483, 97822, 109381, 110484, 153034, 156814, 220255, 250591, 251620, 291356, 294920, 354681, 383848, 385025, 430389, 434385, 501506, 534980, 536268, 585853, 590173, 662814, 699178, 700540, 752939, 757475, 841133, 842575]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'b')",[1131883]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokSpanEventStreamTest')","[6863, 134415, 273915, 410592, 564289, 730197]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SentenceDetectorMETest')","[5225, 128537, 268441, 404310, 557401, 722905]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Caf\x8e')","[1092965, 1144025]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Baumann,')",[1066873]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'flaring')","[1105293, 1161177, 1226941]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'shop')","[1101245, 1155545, 1221309]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""parents'"")",[1067993]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDifferentCaseLookup(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14597, 14628, 14659, 17821, 17852, 17883, 75123, 75147, 75171, 108794, 108824, 108854, 151389, 151424, 151459, 155029, 155064, 155099, 219835, 219863, 219891, 250044, 250072, 250100, 289805, 289838, 289871, 293237, 293270, 293303, 354291, 354317, 354343, 383221, 383253, 383285, 428650, 428687, 428724, 432498, 432535, 432572, 501056, 501086, 501116, 534293, 534328, 534363, 583973, 584013, 584053, 588133, 588173, 588213, 662319, 662352, 662385, 698451, 698488, 698525, 750965, 751007, 751049, 755333, 755375, 755417, 838927, 838967, 839007, 840411, 840453, 840495]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====N<:pp')","[888654, 901952, 915140, 927382, 945988, 965878, 985768, 1005658]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Edinburgh,')","[1088020, 1137145, 1202909]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'first,')",[1055961]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=============APP:prop(""Paulo_Custódio"" <hum> <np-close> M S)\tPaulo_Custódio')","[883727, 897025, 910601, 922843, 938908, 958798, 978688, 998578]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOutcomesForSingleSentence(opennlp.tools.postag.POSSampleEventStreamTest)')","[6068, 51394, 52014, 88827, 101541, 131541, 131684, 192934, 193634, 235823, 271239, 271372, 328976, 329636, 369137, 407520, 407673, 472569, 473309, 518186, 560920, 561088, 631453, 632253, 681162, 726630, 726808, 800819, 801659, 1021125, 1021287]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Munich,')","[1111296, 1169529, 1235293]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""parent's"")","[1108743, 1165977, 1231741]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Rue-de-Grandes-Illusions')",[1033177]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'When')","[1111020, 1117529, 1169145, 1178201, 1234909, 1243965]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Kaiserstraße')",[1033945]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'KaiserstraÃ\x9fe')",[1206621]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingSeparatedString(opennlp.tools.tokenize.TokenSampleStreamTest)')","[52789, 52820, 52851, 53657, 53688, 53719, 89427, 89451, 89475, 132702, 132732, 132762, 194509, 194544, 194579, 195489, 195524, 195559, 236523, 236551, 236579, 272320, 272348, 272376, 330461, 330494, 330527, 331385, 331418, 331451, 369787, 369813, 369839, 408761, 408793, 408825, 474234, 474271, 474308, 475270, 475307, 475344, 518936, 518966, 518996, 562281, 562316, 562351, 633253, 633293, 633333, 634373, 634413, 634453, 681987, 682020, 682053, 728071, 728108, 728145, 802709, 802751, 802793, 803885, 803927, 803969, 1023247, 1023287, 1023327, 1023739, 1023781, 1023823]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=ACC:np')","[885064, 890011, 898362, 903309, 911834, 916391, 924076, 928633, 940245, 947345, 960135, 967235, 980025, 987125, 999915, 1007015]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'agency')",[1057881]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===CJT:n(""telha"" <np-idf> <cjt-head> <cc-stone> <right> F P)\ttelhas')","[890271, 903569, 916631, 928873, 947605, 967495, 987385, 1007275]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Lee')","[1124015, 1187215]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'says')","[1130041, 1195599]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCreationWihtSimpleDescriptor(opennlp.tools.util.featuregen.GeneratorFactoryTest)')","[2348, 2372, 2396, 27617, 27648, 27679, 29601, 29632, 29663, 80115, 80139, 80163, 99010, 116267, 116297, 116327, 116648, 116676, 116704, 166089, 166124, 166159, 168329, 168364, 168399, 225659, 225687, 225715, 257011, 257039, 257067, 257366, 257392, 257418, 303665, 303698, 303731, 305777, 305810, 305843, 359699, 359725, 359751, 391200, 391232, 391264, 391607, 391637, 391667, 444190, 444227, 444264, 446558, 446595, 446632, 507296, 507326, 507356, 543031, 543066, 543101, 543477, 543510, 543543, 600773, 600813, 600853, 603333, 603373, 603413, 669183, 669216, 669249, 707695, 707732, 707769, 708167, 708202, 708237, 768605, 768647, 768689, 771293, 771335, 771377, 857669, 857709, 857749, 858153, 858195, 858237]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==P:v-fin(""ter"" <fmc> <mv> PS/MQP 3P IND VFIN)\ttiveram')","[890193, 903491, 916559, 928801, 947527, 967417, 987307, 1007197]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pull')","[1105546, 1161529, 1227293]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:prop(""Porto_Alegre"" <civ> <right> M S)\tPorto_Alegre')","[880484, 893782, 907622, 919864, 933720, 953610, 973500, 993390]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'spoken')","[1130202, 1195823]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</t>', '')","[878099, 891397, 905427, 917669, 931335, 951225, 971115, 991005]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====H:prp(""sem"" <np-close>)\tsem')","[890817, 904115, 917135, 929377, 948151, 968041, 987931, 1007821]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.tokenize.TokenizerEvaluatorTest)')","[6794, 6818, 6842, 54525, 54556, 54587, 55269, 55300, 55331, 90099, 90123, 90147, 101954, 133953, 133983, 134013, 134214, 134242, 134270, 196469, 196504, 196539, 197309, 197344, 197379, 237307, 237335, 237363, 273485, 273513, 273541, 273728, 273754, 273780, 332309, 332342, 332375, 333101, 333134, 333167, 370515, 370541, 370567, 410098, 410130, 410162, 410377, 410407, 410437, 476306, 476343, 476380, 477194, 477231, 477268, 519776, 519806, 519836, 563747, 563782, 563817, 564053, 564086, 564119, 635493, 635533, 635573, 636453, 636493, 636533, 682911, 682944, 682977, 729623, 729660, 729697, 729947, 729982, 730017, 805061, 805103, 805145, 806069, 806111, 806153, 1025993, 1026033, 1026073, 1026317, 1026359, 1026401]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==N<:adj(""religioso"" <np-close> M P)\treligiosos')","[888318, 901616, 914832, 927074, 945652, 965542, 985432, 1005322]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'school')",[1029049]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'completely')","[1111595, 1169945, 1235709]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pick')","[1092758, 1143737, 1209501]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.StringUtilTest')","[3119, 120191, 260667, 395392, 547625, 712557]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'aunt')",[1033401]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'didn`t')",[1032025]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '</body>')",[1132460]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====P<:n(""outubro"" <np-idf> <NER2> M S)\toutubro')","[879626, 892924, 906830, 919072, 932862, 952752, 972642, 992532]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'before.')",[1047641]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Gina')",[1056281]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testReadTestStream(opennlp.tools.parser.ParseSampleStreamTest)')","[359, 383, 407, 9141, 9172, 9203, 9513, 9544, 9575, 72435, 72459, 72483, 96990, 104338, 104368, 104398, 104479, 104507, 104535, 145229, 145264, 145299, 145649, 145684, 145719, 216699, 216727, 216755, 245892, 245920, 245948, 246023, 246049, 246075, 283997, 284030, 284063, 284393, 284426, 284459, 351379, 351405, 351431, 378461, 378493, 378525, 378612, 378642, 378672, 422138, 422175, 422212, 422582, 422619, 422656, 497696, 497726, 497756, 529077, 529112, 529147, 529243, 529276, 529309, 576933, 576973, 577013, 577413, 577453, 577493, 658623, 658656, 658689, 692931, 692968, 693005, 693107, 693142, 693177, 743573, 743615, 743657, 744077, 744119, 744161, 829831, 829871, 829911, 829995, 830037, 830079]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Anders')",[1252903]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '<s id=""63959"" ref=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=-6"" source=""SELVA 1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[880716, 894014, 907836, 920078, 935064, 954954, 974844, 994734]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'spent')","[1100210, 1154105, 1219869]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEvaluatorNoError(opennlp.tools.chunker.ChunkerEvaluatorTest)')","[61810, 64290, 93435, 102889, 139493, 204694, 207494, 241199, 278647, 340064, 342704, 374129, 416016, 485001, 487961, 523946, 570232, 644893, 648093, 687498, 736486, 814931, 818291, 1080541, 1080871]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSEvaluatorTest')","[1022937, 1022960, 1022984, 1023007]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Bruno')","[1109065, 1166425, 1232189]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSingleTokeNameAtSentenceStart(opennlp.tools.namefind.DictionaryNameFinderTest)')","[8057, 63546, 64538, 93531, 102910, 139750, 140373, 206654, 207774, 241311, 278886, 279467, 341912, 342968, 374233, 416291, 416956, 487073, 488257, 524066, 570534, 571262, 647133, 648413, 687630, 736806, 737576, 817283, 818627, 1081131, 1081933]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===P<:np')","[890661, 890999, 903959, 904297, 916991, 917303, 929233, 929545, 947995, 948333, 967885, 968223, 987775, 988113, 1007665, 1008003]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '==--')","[880406, 880562, 893704, 893860, 907550, 907694, 919792, 919936, 933642, 933798, 953532, 953688, 973422, 973578, 993312, 993468]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===========,')","[886728, 900026, 913370, 925612, 941909, 961799, 981689, 1001579]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:prop(""Porto_Alegre"" <civ> <right> M S)\tPorto_Alegre')","[878987, 892285, 906241, 918483, 932223, 952113, 972003, 991893]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest')","[1949, 113781, 254693, 388546, 540125, 704621]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'at')","[1091815, 1092390, 1093011, 1093310, 1095334, 1099543, 1112262, 1113596, 1114631, 1115919, 1116770, 1117000, 1119415, 1123486, 1124889, 1142425, 1143225, 1144089, 1144505, 1147321, 1153177, 1170873, 1172729, 1174169, 1175961, 1177145, 1177465, 1180825, 1186479, 1188431, 1208189, 1208989, 1209853, 1210269, 1213085, 1218941, 1236637, 1238493, 1239933, 1241725, 1242909, 1243229, 1246589]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'founded')","[1109456, 1166969, 1232733]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'which')","[1094138, 1105454, 1106305, 1112630, 1122934, 1145657, 1161401, 1162585, 1171385, 1185711, 1211421, 1227165, 1228349, 1237149]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'she')","[1089607, 1097243, 1097335, 1098439, 1099267, 1103453, 1115068, 1139353, 1149977, 1150105, 1151641, 1152793, 1158617, 1174777, 1205117, 1215741, 1215869, 1217405, 1218557, 1224381, 1240541]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'company')","[1057369, 1058649]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'tenant')","[1118909, 1180121, 1245885]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testRetrievingContent(opennlp.tools.sentdetect.SentenceSampleTest)')","[47426, 48046, 87291, 101105, 128799, 188454, 189154, 234031, 268685, 324752, 325412, 367473, 404590, 467833, 468573, 516266, 557708, 626333, 627133, 679050, 723230, 795443, 796283, 1015145, 1015475]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'papers')",[1055353]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====>N:art(""o"" <artd> <-sam> DET F S)\ta')","[888798, 902096, 915272, 927514, 946132, 966022, 985912, 1005802]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHashCodeDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16550, 19898, 75867, 97926, 109861, 153594, 157374, 220703, 251039, 291884, 295448, 355097, 384360, 430981, 434977, 501986, 535540, 586493, 590813, 663342, 699770, 753611, 758147, 841773, 843247]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hinterhofer')","[1117483, 1178137, 1243901]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'central')",[1058745]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'city.')","[1118058, 1178937, 1244701]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '11,')","[1093793, 1145177, 1210941]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWordDotTokenization(opennlp.tools.tokenize.SimpleTokenizerTest)')","[56261, 56292, 56323, 57377, 57408, 57439, 90771, 90795, 90819, 135341, 135371, 135401, 198429, 198464, 198499, 199689, 199724, 199759, 238091, 238119, 238147, 274777, 274805, 274833, 334157, 334190, 334223, 335345, 335378, 335411, 371243, 371269, 371295, 411582, 411614, 411646, 478378, 478415, 478452, 479710, 479747, 479784, 520616, 520646, 520676, 565375, 565410, 565445, 637733, 637773, 637813, 639173, 639213, 639253, 683835, 683868, 683901, 731347, 731384, 731421, 807413, 807455, 807497, 808925, 808967, 809009, 1070833, 1070873, 1070913, 1071485, 1071527, 1071569]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'programming')",[1041017]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'those')","[1100463, 1154457, 1220221]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'problem')",[1036153]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'see')",[1067481]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'face')","[1131651, 1197839]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'six')","[1124774, 1188271]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '======H:prp(""para"" <np-long>)\tpara')","[889309, 902607, 915743, 927985, 946643, 966533, 986423, 1006313]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.RegexNameFinderTest')","[1086317, 1086340, 1086364, 1086387]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===ADVL:prp(""em"" <left>)\tem')","[889725, 903023, 916127, 928369, 947059, 966949, 986839, 1006729]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'there,')","[1090619, 1140761, 1206525]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'SeidlstraÃ\x9fe')",[1209629]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'country')","[1087399, 1120335, 1136281, 1182095, 1202045]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testFeatureGeneration(opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest)')","[1973, 24362, 25354, 78363, 98552, 113666, 113809, 162414, 163534, 223615, 254586, 254719, 300200, 301256, 357801, 388423, 388576, 440305, 441489, 505106, 539990, 540158, 596573, 597853, 666774, 704478, 704656, 764195, 765539, 851443, 851605]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'got')","[1036089, 1037625, 1047001, 1051961, 1062329]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""He's"")","[1114424, 1173881, 1239645]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==N<:adj(""religioso"" <np-close> M P)\treligiosos')","[890141, 903439, 916511, 928753, 947475, 967365, 987255, 1007145]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '========H:prop(""Lau_Siqueira"" <hum> <np-close> M/F S)\tLau_Siqueira')","[886234, 899532, 912914, 925156, 941415, 961305, 981195, 1001085]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'owner')",[1048409]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testBestSequenceOneElementInput(opennlp.tools.util.BeamSearchTest)')","[30066, 30810, 80571, 99155, 117111, 168854, 169694, 226191, 257797, 306272, 307064, 360193, 392102, 447113, 448001, 507866, 544020, 603933, 604893, 669810, 708742, 771923, 772931, 859289, 859939]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'name,')",[1029401]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======H:prop(""José_Eduardo_Degrazia"" <hum> <np-close> M S)\tJosé_Eduardo_Degrazia')","[883247, 896545, 910161, 922403, 938428, 958318, 978208, 998098]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====CO:conj-c(""e"" <co-subj>)\te')","[887982, 901280, 914524, 926766, 945316, 965206, 985096, 1004986]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLongerTokenNameIsPreferred(opennlp.tools.namefind.DictionaryNameFinderTest)')","[64073, 64104, 64135, 65065, 65096, 65127, 93939, 93963, 93987, 140260, 140290, 140320, 207249, 207284, 207319, 208369, 208404, 208439, 241787, 241815, 241843, 279362, 279390, 279418, 342473, 342506, 342539, 343529, 343562, 343595, 374675, 374701, 374727, 416835, 416867, 416899, 487702, 487739, 487776, 488886, 488923, 488960, 524576, 524606, 524636, 571129, 571164, 571199, 647813, 647853, 647893, 649093, 649133, 649173, 688191, 688224, 688257, 737435, 737472, 737509, 817997, 818039, 818081, 819341, 819383, 819425, 1081811, 1081851, 1081891, 1082647, 1082689, 1082731]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'there')","[1055929, 1062073]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pointed')","[1112239, 1170841, 1236605]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'so')","[1032185, 1039417]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====,')","[885662, 898960, 912386, 924628, 940843, 960733, 980623, 1000513]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""hadnt't"")","[1086778, 1135417, 1201181]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:prop(""Porto_Poesia"" <cjt-head> <civ> <right> M S)\tPorto_Poesia')","[879782, 893080, 906974, 919216, 933018, 952908, 972798, 992688]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""don't"")","[1116494, 1176761, 1242525]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'last')",[1056697]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameSampleTest')","[1260416, 1260439, 1260463, 1260486]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToLowerCase(opennlp.tools.util.StringUtilTest)')","[34034, 35274, 82107, 99591, 119716, 173334, 174734, 227983, 260224, 310496, 311816, 361857, 394885, 451849, 453329, 509786, 547070, 609053, 610653, 671922, 711970, 777299, 778979, 865007, 865817]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Munich,')",[1059705]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'prosperity')","[1122221, 1184719]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Rue-de-Grandes-Illusions')","[1090067, 1139993, 1205757]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'reply.')",[1041433]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'away.')",[1053817]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWindowAtEndOfSentence(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[24982, 27214, 78651, 98655, 114163, 163114, 165634, 223951, 255049, 300860, 303236, 358113, 388954, 441045, 443709, 505466, 540572, 597373, 600253, 667170, 705094, 765035, 768059, 852185, 853003]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleReading(opennlp.tools.formats.ad.ADParagraphStreamTest)')","[43086, 44078, 85659, 100568, 125526, 183554, 184674, 232127, 265638, 320132, 321188, 365705, 401091, 462653, 463837, 514226, 553870, 620733, 622013, 676806, 719166, 789563, 790907, 904679, 905009]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testMainHelpMessage(opennlp.tools.cmdline.CLITest)')","[920, 12086, 12582, 73563, 97322, 106433, 106696, 148554, 149114, 218015, 247843, 248088, 287132, 287660, 352601, 380700, 380981, 425653, 426245, 499106, 531532, 531840, 580733, 581373, 660174, 695530, 695856, 747563, 748235, 834197, 834519]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', ':')","[881971, 895269, 908991, 921233, 936319, 956209, 976099, 995989]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'MeisenstraÃ\x9fe')",[1242973]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWindowAtBeginOfSentence(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[24858, 27090, 78555, 98634, 114043, 162974, 165494, 223839, 254937, 300728, 303104, 358009, 388826, 440897, 443561, 505346, 540432, 597213, 600093, 667038, 704946, 764867, 767891, 852025, 852835]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'It')","[1099842, 1110882, 1121807, 1153593, 1168953, 1184143, 1219357, 1234717]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'always')",[1055865]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNameAtEnd(opennlp.tools.namefind.NameSampleTest)')","[68754, 71234, 95931, 103555, 143435, 212534, 215334, 244111, 282321, 347456, 350096, 376833, 420226, 493289, 496249, 527066, 574844, 653853, 657053, 690930, 741366, 824339, 827699, 1254933, 1256719]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '<ext id=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[877907, 891205, 905251, 917493, 931143, 951033, 970923, 990813]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsAllCapitalLetter(opennlp.tools.util.featuregen.StringPatternTest)')","[25850, 28330, 79227, 98801, 115020, 164094, 166894, 224623, 255848, 301784, 304424, 358737, 389869, 442081, 445041, 506186, 541574, 598493, 601693, 667962, 706154, 766211, 769571, 854079, 856025]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'focusing')","[1130409, 1196111]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'tried')","[1086479, 1105155, 1135001, 1160985, 1200765, 1226749]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleTraining(opennlp.tools.doccat.DocumentCategorizerMETest)')","[4781, 45814, 46310, 86619, 100838, 127274, 127417, 186634, 187194, 233247, 267266, 267399, 323036, 323564, 366745, 402959, 403112, 465909, 466501, 515426, 555918, 556086, 624253, 624893, 678126, 721334, 721512, 793259, 793931, 1012547, 1012709]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'streetname')",[1044857]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==CJT:n(""poeta"" <np-idf> <cjt-subj> <Hprof> <left> M P)\tpoetas')","[882719, 896017, 909677, 921919, 937900, 957790, 977680, 997570]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'burning')","[1127350, 1191855]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testOutcomesForSingleTypeSentence(opennlp.tools.namefind.NameFinderEventStreamTest)')","[8198, 8222, 8246, 64445, 64476, 64507, 65561, 65592, 65623, 94035, 94059, 94083, 103055, 140517, 140547, 140577, 140658, 140686, 140714, 207669, 207704, 207739, 208929, 208964, 208999, 241899, 241927, 241955, 279601, 279629, 279657, 279732, 279758, 279784, 342869, 342902, 342935, 344057, 344090, 344123, 374779, 374805, 374831, 417110, 417142, 417174, 417261, 417291, 417321, 488146, 488183, 488220, 489478, 489515, 489552, 524696, 524726, 524756, 571431, 571466, 571501, 571597, 571630, 571663, 648293, 648333, 648373, 649733, 649773, 649813, 688323, 688356, 688389, 737755, 737792, 737829, 737931, 737966, 738001, 818501, 818543, 818585, 820013, 820055, 820097, 1082905, 1082945, 1082985, 1083069, 1083111, 1083153]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPOSModelSerializationPerceptron(opennlp.tools.postag.POSModelTest)')","[5507, 5531, 5555, 47705, 47736, 47767, 48325, 48356, 48387, 87411, 87435, 87459, 101146, 129086, 129116, 129146, 129347, 129375, 129403, 188769, 188804, 188839, 189469, 189504, 189539, 234171, 234199, 234227, 268952, 268980, 269008, 269195, 269221, 269247, 325049, 325082, 325115, 325709, 325742, 325775, 367603, 367629, 367655, 404897, 404929, 404961, 405176, 405206, 405236, 468166, 468203, 468240, 468906, 468943, 468980, 516416, 516446, 516476, 558045, 558080, 558115, 558351, 558384, 558417, 626693, 626733, 626773, 627493, 627533, 627573, 679215, 679248, 679281, 723587, 723624, 723661, 723911, 723946, 723981, 795821, 795863, 795905, 796661, 796703, 796745, 1015775, 1015815, 1015855, 1016099, 1016141, 1016183]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sometimes.')",[1057273]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'back')","[1093241, 1124728, 1144409, 1188207, 1210173]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '""Tapasbar""')",[1042809]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Or')","[1122612, 1185263]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'However')","[1129052, 1194223]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:n(""av."" <np-idf> <cjt-acc> <right> M S)\tAv.')","[878843, 892141, 906109, 918351, 932079, 951969, 971859, 991749]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'thank')","[1128178, 1193007]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======H:n(""cultura"" <np-def> <ac> F S)\tcultura')","[882671, 895969, 909633, 921875, 937852, 957742, 977632, 997522]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Marie')",[1033273]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'particulary')","[1090734, 1140921, 1206685]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:n(""presença"" <np-def> <state> <per> <right> F S)\tpresença')","[885142, 898440, 911906, 924148, 940323, 960213, 980103, 999993]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'student,')","[1108490, 1165625, 1231389]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'situate')","[1110376, 1168249, 1234013]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLength(opennlp.tools.util.SpanTest)')","[37041, 37072, 37103, 39769, 39800, 39831, 83379, 83403, 83427, 121854, 121884, 121914, 176729, 176764, 176799, 179809, 179844, 179879, 229467, 229495, 229523, 262216, 262244, 262272, 313697, 313730, 313763, 316601, 316634, 316667, 363235, 363261, 363287, 397169, 397201, 397233, 455438, 455475, 455512, 458694, 458731, 458768, 511376, 511406, 511436, 549573, 549608, 549643, 612933, 612973, 613013, 616453, 616493, 616533, 673671, 673704, 673737, 714619, 714656, 714693, 781373, 781415, 781457, 785069, 785111, 785153, 869519, 869559, 869599, 872419, 872461, 872503]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidPhraseAsSpan3(opennlp.tools.chunker.ChunkSampleTest)')","[61221, 61252, 61283, 63205, 63236, 63267, 93075, 93099, 93123, 138906, 138936, 138966, 204029, 204064, 204099, 206269, 206304, 206339, 240779, 240807, 240835, 278100, 278128, 278156, 339437, 339470, 339503, 341549, 341582, 341615, 373739, 373765, 373791, 415389, 415421, 415453, 484298, 484335, 484372, 486666, 486703, 486740, 523496, 523526, 523556, 569545, 569580, 569615, 644133, 644173, 644213, 646693, 646733, 646773, 687003, 687036, 687069, 735759, 735796, 735833, 814133, 814175, 814217, 816821, 816863, 816905, 1077663, 1077703, 1077743, 1079827, 1079869, 1079911]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==========APP:np')","[886650, 899948, 913298, 925540, 941831, 961721, 981611, 1001501]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'meet')","[1044537, 1045049]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'good.')","[1091378, 1141817, 1207581]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'much!')","[1092045, 1142745, 1208509]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCacheClearAfterSentenceChange(opennlp.tools.util.featuregen.CachedFeatureGeneratorTest)')","[1880, 1904, 1928, 23649, 23680, 23711, 24517, 24548, 24579, 78195, 78219, 78243, 98510, 113319, 113349, 113379, 113580, 113608, 113636, 161609, 161644, 161679, 162589, 162624, 162659, 223419, 223447, 223475, 254263, 254291, 254319, 254506, 254532, 254558, 299441, 299474, 299507, 300365, 300398, 300431, 357619, 357645, 357671, 388052, 388084, 388116, 388331, 388361, 388391, 439454, 439491, 439528, 440490, 440527, 440564, 504896, 504926, 504956, 539583, 539618, 539653, 539889, 539922, 539955, 595653, 595693, 595733, 596773, 596813, 596853, 666543, 666576, 666609, 704047, 704084, 704121, 704371, 704406, 704441, 763229, 763271, 763313, 764405, 764447, 764489, 850733, 850773, 850813, 851057, 851099, 851141]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '2010')",[1253671]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSSampleTest')","[5810, 131022, 270756, 406965, 560311, 725985]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'building')",[1059129]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsAllDigit(opennlp.tools.util.featuregen.StringPatternTest)')","[26098, 28578, 79419, 98843, 115260, 164374, 167174, 224847, 256072, 302048, 304688, 358945, 390125, 442377, 445337, 506426, 541854, 598813, 602013, 668226, 706450, 766547, 769907, 854399, 856361]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.util.StringListTest)')","[21014, 23370, 77595, 98344, 112295, 158634, 161294, 222719, 253309, 296636, 299144, 356969, 386958, 436309, 439121, 504146, 538384, 592253, 595293, 665718, 702778, 759659, 762851, 847865, 848859]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===CJT:np')","[888438, 901736, 914942, 927184, 945772, 965662, 985552, 1005442]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testBuildNGramDictionary(opennlp.tools.postag.POSTaggerMETest)')","[50526, 51642, 88731, 101520, 131284, 191954, 193214, 235711, 271000, 328052, 329240, 369033, 407245, 471533, 472865, 518066, 560618, 630333, 631773, 681030, 726310, 799643, 801155, 1020535, 1020865]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.DictionaryDetokenizerTest')","[6278, 132410, 272048, 408449, 561939, 727709]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.cmdline.TerminateToolExceptionTest')","[837977, 838000, 838024, 838047]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'foreign')","[1096461, 1148889, 1214653]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====H:n(""shopping"" <np-def> <Lh> M S)\tshopping')","[881052, 894350, 908144, 920386, 935400, 955290, 975180, 995070]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPrecision(opennlp.tools.util.eval.FMeasureTest)')","[31337, 31368, 31399, 32701, 32732, 32763, 81075, 81099, 81123, 118015, 118045, 118075, 170289, 170324, 170359, 171829, 171864, 171899, 226779, 226807, 226835, 258639, 258667, 258695, 307625, 307658, 307691, 309077, 309110, 309143, 360739, 360765, 360791, 393068, 393100, 393132, 448630, 448667, 448704, 450258, 450295, 450332, 508496, 508526, 508556, 545079, 545114, 545149, 605573, 605613, 605653, 607333, 607373, 607413, 670503, 670536, 670569, 709863, 709900, 709937, 773645, 773687, 773729, 775493, 775535, 775577, 861157, 861197, 861237, 862129, 862171, 862213]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '========H:prop(""Lau_Siqueira"" <hum> <np-close> M/F S)\tLau_Siqueira')","[886208, 899506, 912890, 925132, 941389, 961279, 981169, 1001059]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.dictionary.DictionaryTest)')","[18906, 21882, 76827, 98156, 111198, 156254, 159614, 221823, 252286, 294392, 297560, 356137, 385787, 433793, 437345, 503186, 537102, 589533, 593373, 664662, 701422, 756803, 760835, 844979, 846461]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'them')","[1046937, 1047033]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===>N:art(""o"" <-sam> <artd> DET F S)\ta')","[881425, 894723, 908487, 920729, 935773, 955663, 975553, 995443]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '.')","[879059, 883847, 888846, 892357, 897145, 902144, 906307, 910711, 915316, 918549, 922953, 927558, 932295, 939028, 946180, 952185, 958918, 966070, 972075, 978808, 985960, 991965, 998698, 1005850]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Since')","[1095173, 1147097, 1212861]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:prp(""em"" <sam-> <np-long>)\tem')","[878723, 892021, 905999, 918241, 931959, 951849, 971739, 991629]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Meier')","[1107938, 1164857, 1230621]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'About')","[1091217, 1141593, 1207357]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNoBreakSpace(opennlp.tools.util.StringUtilTest)')","[3167, 3191, 3215, 33941, 33972, 34003, 35181, 35212, 35243, 82035, 82059, 82083, 99570, 119626, 119656, 119686, 120247, 120275, 120303, 173229, 173264, 173299, 174629, 174664, 174699, 227899, 227927, 227955, 260140, 260168, 260196, 260719, 260745, 260771, 310397, 310430, 310463, 311717, 311750, 311783, 361779, 361805, 361831, 394789, 394821, 394853, 395452, 395482, 395512, 451738, 451775, 451812, 453218, 453255, 453292, 509696, 509726, 509756, 546965, 547000, 547035, 547691, 547724, 547757, 608933, 608973, 609013, 610533, 610573, 610613, 671823, 671856, 671889, 711859, 711896, 711933, 712627, 712662, 712697, 777173, 777215, 777257, 778853, 778895, 778937, 864887, 864927, 864967, 865691, 865733, 865775]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Cities')",[1132299]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.dictionary.DictionaryTest')","[1481, 111673, 252729, 386294, 537657, 702009]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Alexander')","[1247795, 1247923, 1250461, 1250589]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleArguments(opennlp.tools.cmdline.ArgumentParserTest)')","[13078, 15310, 74043, 97487, 107307, 149674, 152194, 218575, 248657, 288188, 290564, 353121, 381634, 426837, 429501, 499706, 532556, 582013, 584893, 660834, 696614, 748907, 751931, 835689, 836987]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParse(opennlp.tools.postag.POSSampleTest)')","[5858, 5882, 5906, 49193, 49224, 49255, 50681, 50712, 50743, 88083, 88107, 88131, 101353, 130337, 130367, 130397, 131078, 131106, 131134, 190449, 190484, 190519, 192129, 192164, 192199, 234955, 234983, 235011, 270117, 270145, 270173, 270808, 270834, 270860, 326633, 326666, 326699, 328217, 328250, 328283, 368331, 368357, 368383, 406234, 406266, 406298, 407025, 407055, 407085, 469942, 469979, 470016, 471718, 471755, 471792, 517256, 517286, 517316, 559511, 559546, 559581, 560377, 560410, 560443, 628613, 628653, 628693, 630533, 630573, 630613, 680139, 680172, 680205, 725139, 725176, 725213, 726055, 726090, 726125, 797837, 797879, 797921, 799853, 799895, 799937, 1018353, 1018393, 1018433, 1019317, 1019359, 1019401]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<right>')","[934848, 943983, 944145, 944629, 949679, 950379, 950586, 954738, 963873, 964035, 964519, 969569, 970269, 970476, 974628, 983763, 983925, 984409, 989459, 990159, 990366, 994518, 1003653, 1003815, 1004299, 1009349, 1010049, 1010256]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Spanish')","[1097542, 1150393, 1216157]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenSampleStreamTest')","[1024765, 1024788, 1024812, 1024835]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'city')","[1099221, 1111503, 1152729, 1169817, 1218493, 1235581]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:prp(""em"" <sam-> <right>)\tem')","[879288, 892586, 906518, 918760, 932524, 952414, 972304, 992194]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'best')","[1048217, 1065881]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'called?')",[1050137]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Tor')","[1098922, 1152313, 1218077]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<build>')","[948654, 949312, 968544, 969202, 988434, 989092, 1008324, 1008982]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testMissingType(opennlp.tools.namefind.NameSampleTest)')","[69126, 71606, 96219, 103618, 143795, 212954, 215754, 244447, 282657, 347852, 350492, 377145, 420610, 493733, 496693, 527426, 575264, 654333, 657533, 691326, 741810, 824843, 828203, 1255413, 1257223]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====P<:n(""precedente"" <np-idf> <event> M P)\tprecedentes')","[888702, 902000, 915184, 927426, 946036, 965926, 985816, 1005706]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Erding,')",[1057945]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hint')",[1043033]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testhHashCode(opennlp.tools.util.SpanTest)')","[38498, 41226, 84507, 100196, 123264, 178374, 181454, 230783, 263532, 315248, 318152, 364457, 398673, 457177, 460433, 512786, 551218, 614813, 618333, 675222, 716358, 783347, 787043, 871399, 874393]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Cafe')",[1036729]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===>N:art(""o"" <artd> <-sam> DET M S)\to')","[879366, 892664, 906590, 918832, 932602, 952492, 972382, 992272]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingEnglishSample(opennlp.tools.formats.NameFinderCensus90NameStreamTest)')","[4103, 4127, 4151, 42373, 42404, 42435, 42869, 42900, 42931, 85299, 85323, 85347, 100444, 124802, 124832, 124862, 124943, 124971, 124999, 182749, 182784, 182819, 183309, 183344, 183379, 231707, 231735, 231763, 264964, 264992, 265020, 265095, 265121, 265147, 319373, 319406, 319439, 319901, 319934, 319967, 365315, 365341, 365367, 400317, 400349, 400381, 400468, 400498, 400528, 461802, 461839, 461876, 462394, 462431, 462468, 513776, 513806, 513836, 553021, 553056, 553091, 553187, 553220, 553253, 619813, 619853, 619893, 620453, 620493, 620533, 676311, 676344, 676377, 718267, 718304, 718341, 718443, 718478, 718513, 788597, 788639, 788681, 789269, 789311, 789353, 876791, 876831, 876871, 876955, 876997, 877039]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'underground')","[1100003, 1153817, 1219581]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'token')","[1259483, 1259575, 1259644, 1259713]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Sure,')","[1101682, 1156153, 1221917]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'home,')","[1113481, 1172569, 1238333]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Nürnberg')",[1035897]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingGermanSampleWithEnglishAsLanguage(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[44605, 44636, 44667, 45721, 45752, 45783, 86451, 86475, 86499, 126790, 126820, 126850, 185269, 185304, 185339, 186529, 186564, 186599, 233051, 233079, 233107, 266816, 266844, 266872, 321749, 321782, 321815, 322937, 322970, 323003, 366563, 366589, 366615, 402441, 402473, 402505, 464466, 464503, 464540, 465798, 465835, 465872, 515216, 515246, 515276, 555349, 555384, 555419, 622693, 622733, 622773, 624133, 624173, 624213, 677895, 677928, 677961, 720731, 720768, 720805, 791621, 791663, 791705, 793133, 793175, 793217, 1011239, 1011279, 1011319, 1011907, 1011949, 1011991]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSingleTokeNameInsideSentence(opennlp.tools.namefind.DictionaryNameFinderTest)')","[63670, 64662, 93627, 102951, 139870, 206794, 207914, 241423, 278998, 342044, 343100, 374337, 416419, 487221, 488405, 524186, 570674, 647293, 648573, 687762, 736954, 817451, 818795, 1081291, 1082101]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContains(opennlp.tools.util.SpanTest)')","[37165, 37196, 37227, 39893, 39924, 39955, 83475, 83499, 83523, 121974, 122004, 122034, 176869, 176904, 176939, 179949, 179984, 180019, 229579, 229607, 229635, 262328, 262356, 262384, 313829, 313862, 313895, 316733, 316766, 316799, 363339, 363365, 363391, 397297, 397329, 397361, 455586, 455623, 455660, 458842, 458879, 458916, 511496, 511526, 511556, 549713, 549748, 549783, 613093, 613133, 613173, 616613, 616653, 616693, 673803, 673836, 673869, 714767, 714804, 714841, 781541, 781583, 781625, 785237, 785279, 785321, 869679, 869719, 869759, 872587, 872629, 872671]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'DET')","[934510, 936600, 936834, 942694, 943821, 944710, 948920, 949162, 949514, 949899, 954400, 956490, 956724, 962584, 963711, 964600, 968810, 969052, 969404, 969789, 974290, 976380, 976614, 982474, 983601, 984490, 988700, 988942, 989294, 989679, 994180, 996270, 996504, 1002364, 1003491, 1004380, 1008590, 1008832, 1009184, 1009569]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWordNumericTokeniztation(opennlp.tools.tokenize.SimpleTokenizerTest)')","[56354, 57470, 90843, 102202, 135431, 198534, 199794, 238175, 274861, 334256, 335444, 371321, 411678, 478489, 479821, 520706, 565480, 637853, 639293, 683934, 731458, 807539, 809051, 1070953, 1071611]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingSample(opennlp.tools.formats.LeipzigDoccatSampleStreamTest)')","[3986, 4010, 4034, 42125, 42156, 42187, 42497, 42528, 42559, 85203, 85227, 85251, 100403, 124545, 124575, 124605, 124686, 124714, 124742, 182469, 182504, 182539, 182889, 182924, 182959, 231595, 231623, 231651, 264725, 264753, 264781, 264856, 264882, 264908, 319109, 319142, 319175, 319505, 319538, 319571, 365211, 365237, 365263, 400042, 400074, 400106, 400193, 400223, 400253, 461506, 461543, 461580, 461950, 461987, 462024, 513656, 513686, 513716, 552719, 552754, 552789, 552885, 552918, 552951, 619493, 619533, 619573, 619973, 620013, 620053, 676179, 676212, 676245, 717947, 717984, 718021, 718123, 718158, 718193, 788261, 788303, 788345, 788765, 788807, 788849, 876369, 876409, 876449, 876533, 876575, 876617]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '81234')","[1094207, 1145753, 1211517]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""I'll"")",[1050521]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sending')","[1131375, 1197455, 1258423, 1259215]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'aimed')","[1124866, 1188399]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'him.')","[1030265, 1054393]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Brandenburger')",[1044217]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'his')","[1029369, 1029913, 1050361, 1052473, 1063641]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'area.')","[1110583, 1168537, 1234301]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<cjt-head>')","[934594, 943062, 948625, 950321, 954484, 962952, 968515, 970211, 974374, 982842, 988405, 990101, 994264, 1002732, 1008295, 1009991]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'went')","[1041625, 1056185]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '======P<:np')","[884778, 889361, 898076, 902659, 911570, 915791, 923812, 928033, 939959, 946695, 959849, 966585, 979739, 986475, 999629, 1006365]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'exhibition.')",[1061945]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Fritsch.')","[1102372, 1157113, 1222877]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==P:v-fin(""ter"" <fmc> <mv> PS/MQP 3P IND VFIN)\ttiveram')","[888342, 901640, 914854, 927096, 945676, 965566, 985456, 1005346]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '========,')","[886286, 899584, 912962, 925204, 941467, 961357, 981247, 1001137]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""that's"")","[1100831, 1154969, 1220733]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testItertor(opennlp.tools.util.StringListTest)')","[20673, 20704, 20735, 23029, 23060, 23091, 77331, 77355, 77379, 111965, 111995, 112025, 158249, 158284, 158319, 160909, 160944, 160979, 222411, 222439, 222467, 253001, 253029, 253057, 296273, 296306, 296339, 298781, 298814, 298847, 356683, 356709, 356735, 386606, 386638, 386670, 435902, 435939, 435976, 438714, 438751, 438788, 503816, 503846, 503876, 537999, 538034, 538069, 591813, 591853, 591893, 594853, 594893, 594933, 665355, 665388, 665421, 702371, 702408, 702445, 759197, 759239, 759281, 762389, 762431, 762473, 847425, 847465, 847505, 848397, 848439, 848481]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '10th')",[1037497]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'apartment,')","[1094115, 1145625, 1211389]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'staff')","[1097404, 1150201, 1215965]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLastMatchingTokenNameIsChoosen(opennlp.tools.namefind.DictionaryNameFinderTest)')","[63918, 64910, 93819, 102993, 140110, 207074, 208194, 241647, 279222, 342308, 343364, 374545, 416675, 487517, 488701, 524426, 570954, 647613, 648893, 688026, 737250, 817787, 819131, 1081611, 1082437]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'answered')","[1088296, 1137529, 1203293]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====H:prop(""Alcy_Cheuiche"" <hum> <np-close> M/F S)\tAlcy_Cheuiche')","[885766, 899064, 912482, 924724, 940947, 960837, 980727, 1000617]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'anyway,')","[1100900, 1155065, 1220829]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingWhitespaceSeparatedTokens(opennlp.tools.tokenize.TokenSampleStreamTest)')","[6443, 6467, 6491, 52665, 52696, 52727, 53533, 53564, 53595, 89331, 89355, 89379, 101726, 132582, 132612, 132642, 132963, 132991, 133019, 194369, 194404, 194439, 195349, 195384, 195419, 236411, 236439, 236467, 272208, 272236, 272264, 272563, 272589, 272615, 330329, 330362, 330395, 331253, 331286, 331319, 369683, 369709, 369735, 408633, 408665, 408697, 409040, 409070, 409100, 474086, 474123, 474160, 475122, 475159, 475196, 518816, 518846, 518876, 562141, 562176, 562211, 562587, 562620, 562653, 633093, 633133, 633173, 634213, 634253, 634293, 681855, 681888, 681921, 727923, 727960, 727997, 728395, 728430, 728465, 802541, 802583, 802625, 803717, 803759, 803801, 1023087, 1023127, 1023167, 1023571, 1023613, 1023655]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====>N:art(""o"" <artd> <-sam> DET F S)\ta')","[891025, 904323, 917327, 929569, 948359, 968249, 988139, 1008029]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'yet')",[1066553]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:n(""organizador"" <np-def> <Hprof> <left> M S)\torganizador')","[881841, 895139, 908871, 921113, 936189, 956079, 975969, 995859]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'letter')","[1030713, 1031257, 1048313]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===CO:conj-c(""e"" <co-acc>)\te')","[890323, 903621, 916679, 928921, 947657, 967547, 987437, 1007327]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'contact')",[1030201]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOutcomesForSingleTypeSentence(opennlp.tools.namefind.NameFinderEventStreamTest)')","[8174, 64414, 65530, 94011, 103035, 140487, 140630, 207634, 208894, 241871, 279573, 279706, 342836, 344024, 374753, 417078, 417231, 488109, 489441, 524666, 571396, 571564, 648253, 649693, 688290, 737718, 737896, 818459, 819971, 1082865, 1083027]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleArguments(opennlp.tools.cmdline.ArgumentParserTest)')","[13109, 13140, 13171, 15341, 15372, 15403, 74067, 74091, 74115, 107337, 107367, 107397, 149709, 149744, 149779, 152229, 152264, 152299, 218603, 218631, 218659, 248685, 248713, 248741, 288221, 288254, 288287, 290597, 290630, 290663, 353147, 353173, 353199, 381666, 381698, 381730, 426874, 426911, 426948, 429538, 429575, 429612, 499736, 499766, 499796, 532591, 532626, 532661, 582053, 582093, 582133, 584933, 584973, 585013, 660867, 660900, 660933, 696651, 696688, 696725, 748949, 748991, 749033, 751973, 752015, 752057, 835729, 835769, 835809, 837029, 837071, 837113]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'off')","[1105569, 1161561, 1227325]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'air')","[1123670, 1186735]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testhHashCode(opennlp.tools.util.SpanTest)')","[38529, 38560, 38591, 41257, 41288, 41319, 84531, 84555, 84579, 123294, 123324, 123354, 178409, 178444, 178479, 181489, 181524, 181559, 230811, 230839, 230867, 263560, 263588, 263616, 315281, 315314, 315347, 318185, 318218, 318251, 364483, 364509, 364535, 398705, 398737, 398769, 457214, 457251, 457288, 460470, 460507, 460544, 512816, 512846, 512876, 551253, 551288, 551323, 614853, 614893, 614933, 618373, 618413, 618453, 675255, 675288, 675321, 716395, 716432, 716469, 783389, 783431, 783473, 787085, 787127, 787169, 871439, 871479, 871519, 874435, 874477, 874519]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===========,')","[883559, 896857, 910447, 922689, 938740, 958630, 978520, 998410]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Yeah')","[1115574, 1115965, 1175481, 1176025, 1241245, 1241789]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==ADVL:pp')","[890583, 890921, 903881, 904219, 916919, 917231, 929161, 929473, 947917, 948255, 967807, 968145, 987697, 988035, 1007587, 1007925]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseEmtpyTag(opennlp.tools.postag.POSSampleTest)')","[49689, 49720, 49751, 51177, 51208, 51239, 88467, 88491, 88515, 130817, 130847, 130877, 191009, 191044, 191079, 192689, 192724, 192759, 235403, 235431, 235459, 270565, 270593, 270621, 327161, 327194, 327227, 328745, 328778, 328811, 368747, 368773, 368799, 406746, 406778, 406810, 470534, 470571, 470608, 472310, 472347, 472384, 517736, 517766, 517796, 560071, 560106, 560141, 629253, 629293, 629333, 631173, 631213, 631253, 680667, 680700, 680733, 725731, 725768, 725805, 798509, 798551, 798593, 800525, 800567, 800609, 1018993, 1019033, 1019073, 1019989, 1020031, 1020073]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<ext[^>]*>', '<ext id=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[878003, 891301, 905339, 917581, 931239, 951129, 971019, 990909]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'show')","[1098738, 1120243, 1152057, 1181967, 1217821]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====H:prop(""Shopping_Total"" <site> M S)\tShopping_Total')","[880068, 893366, 907238, 919480, 933304, 953194, 973084, 992974]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==>N:art(""o"" <artd> DET F S)\ta')","[882791, 896089, 909743, 921985, 937972, 957862, 977752, 997642]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'flames')",[1052345]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Heidelberg.')","[1119185, 1180505, 1246269]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""It's"")","[1033657, 1047385]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.parser.ParseTest)')","[10350, 11590, 73179, 97198, 105542, 146594, 147994, 217567, 247014, 285284, 286604, 352185, 379747, 423581, 425061, 498626, 530486, 578493, 580093, 659646, 694422, 745211, 746891, 831595, 832925]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest')","[1247, 109239, 250459, 383696, 534813, 699001]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'that?')","[1115735, 1175705, 1241469]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Michael')","[1117460, 1178105, 1243869]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hamburg.')","[1035161, 1047097, 1048121, 1068697]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCompareToHigher(opennlp.tools.util.SpanTest)')","[38250, 40978, 84315, 100154, 123024, 178094, 181174, 230559, 263308, 314984, 317888, 364249, 398417, 456881, 460137, 512546, 550938, 614493, 618013, 674958, 716062, 783011, 786707, 871079, 874057]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Pest')",[1132138]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'call')","[1091447, 1141913, 1207677]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'appartment')",[1068185]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWhitespaceTokenization(opennlp.tools.tokenize.WhitespaceTokenizerTest)')","[7379, 7403, 7427, 56881, 56912, 56943, 58493, 58524, 58555, 91059, 91083, 91107, 102264, 135838, 135868, 135898, 136219, 136247, 136275, 199129, 199164, 199199, 200949, 200984, 201019, 238427, 238455, 238483, 275240, 275268, 275296, 275595, 275621, 275647, 334817, 334850, 334883, 336533, 336566, 336599, 371555, 371581, 371607, 412113, 412145, 412177, 412520, 412550, 412580, 479118, 479155, 479192, 481042, 481079, 481116, 520976, 521006, 521036, 565957, 565992, 566027, 566403, 566436, 566469, 638533, 638573, 638613, 640613, 640653, 640693, 684231, 684264, 684297, 731963, 732000, 732037, 732435, 732470, 732505, 808253, 808295, 808337, 810437, 810479, 810521, 1072079, 1072119, 1072159, 1072563, 1072605, 1072647]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'How')","[1049977, 1065369]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'flair')","[1119323, 1180697, 1246461]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:prp(""entre"" <right>)\tentre')","[882911, 883799, 896209, 897097, 909853, 910667, 922095, 922909, 938092, 938980, 957982, 958870, 977872, 978760, 997762, 998650]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWithoutNameTypeAndInvalidData(opennlp.tools.namefind.NameSampleDataStreamTest)')","[65778, 67762, 94491, 103200, 141361, 209174, 211414, 242431, 280387, 344288, 346400, 375273, 418012, 489737, 492105, 525266, 572420, 650013, 652573, 688950, 738802, 820307, 822995, 1084525, 1085495]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'talking')",[1048857]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'multiple')","[1115114, 1174841, 1240605]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLongerTokenNameIsPreferred(opennlp.tools.namefind.DictionaryNameFinderTest)')","[64042, 65034, 93915, 103014, 140230, 207214, 208334, 241759, 279334, 342440, 343496, 374649, 416803, 487665, 488849, 524546, 571094, 647773, 649053, 688158, 737398, 817955, 819299, 1081771, 1082605]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'recently')",[1037401]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'NÃ¼rnberg')",[1208957]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Italian.')",[1041241]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'best')","[1101935, 1116034, 1156505, 1176121, 1222269, 1241885]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSDictionaryTest')","[5693, 130165, 269957, 406050, 559309, 724925]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testBestSequenceOneElementInput(opennlp.tools.util.BeamSearchTest)')","[30097, 30128, 30159, 30841, 30872, 30903, 80595, 80619, 80643, 117141, 117171, 117201, 168889, 168924, 168959, 169729, 169764, 169799, 226219, 226247, 226275, 257825, 257853, 257881, 306305, 306338, 306371, 307097, 307130, 307163, 360219, 360245, 360271, 392134, 392166, 392198, 447150, 447187, 447224, 448038, 448075, 448112, 507896, 507926, 507956, 544055, 544090, 544125, 603973, 604013, 604053, 604933, 604973, 605013, 669843, 669876, 669909, 708779, 708816, 708853, 771965, 772007, 772049, 772973, 773015, 773057, 859329, 859369, 859409, 859981, 860023, 860065]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'leader')","[1129926, 1195439]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Where')","[1100371, 1154329, 1220093]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<co-acc>')","[950466, 970356, 990246, 1010136]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'September,')",[1028729]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hinterhofer.')",[1067737]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testMeanCalculation(opennlp.tools.util.eval.MeanTest)')","[3026, 33290, 34530, 81915, 99509, 119339, 119482, 172494, 173894, 227759, 259873, 260006, 309704, 311024, 361649, 394482, 394635, 450961, 452441, 509546, 546628, 546796, 608093, 609693, 671658, 711502, 711680, 776291, 777971, 864425, 864587]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDifferentCaseLookup(opennlp.tools.dictionary.DictionaryTest)')","[19185, 19216, 19247, 22161, 22192, 22223, 77043, 77067, 77091, 111468, 111498, 111528, 156569, 156604, 156639, 159929, 159964, 159999, 222075, 222103, 222131, 252538, 252566, 252594, 294689, 294722, 294755, 297857, 297890, 297923, 356371, 356397, 356423, 386075, 386107, 386139, 434126, 434163, 434200, 437678, 437715, 437752, 503456, 503486, 503516, 537417, 537452, 537487, 589893, 589933, 589973, 593733, 593773, 593813, 664959, 664992, 665025, 701755, 701792, 701829, 757181, 757223, 757265, 761213, 761255, 761297, 845339, 845379, 845419, 846839, 846881, 846923]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '!')","[1130800, 1196655]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==CJT:num(""545"" <cjt-acc> <NER:prednum> <card> <right> M/F P)\t545')","[880302, 893600, 907454, 919696, 933538, 953428, 973318, 993208]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Schwitters')",[1258775]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPOSModelSerializationPerceptron(opennlp.tools.postag.POSModelTest)')","[5483, 47674, 48294, 87387, 101126, 129056, 129319, 188734, 189434, 234143, 268924, 269169, 325016, 325676, 367577, 404865, 405146, 468129, 468869, 516386, 558010, 558318, 626653, 627453, 679182, 723550, 723876, 795779, 796619, 1015735, 1016057]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.ParseTest')","[833665, 833688, 833712, 833735]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'middle-aged')","[1113527, 1172633, 1238397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'B\x9frgerstra§e')","[1119093, 1180377]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'could')","[1060537, 1061817]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'still')","[1030137, 1048569, 1056409]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToHashCode(opennlp.tools.parser.ParseTest)')","[569, 9606, 10846, 72603, 97052, 104822, 105805, 145754, 147154, 216895, 246342, 247259, 284492, 285812, 351561, 378979, 380028, 422693, 424173, 497906, 529646, 530794, 577533, 579133, 658854, 693534, 694748, 744203, 745883, 830635, 831917]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'LeonardstraÃ\x9fe')",[1207805]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'uni.')",[1065753]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'frequented')",[1058809]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Stifterstra§e')","[1106604, 1163001]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'depended')","[1111572, 1169913, 1235677]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=============,')","[887066, 900364, 913682, 925924, 942247, 962137, 982027, 1001917]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'friendly')","[1109249, 1166681, 1232445]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.StringPatternTest')","[858597, 858620, 858644, 858667]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===APP:np')","[883007, 896305, 909941, 922183, 938188, 958078, 977968, 997858]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'address')","[1028921, 1049593, 1063737]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:pron-pers(""eles"" M 3P NOM/PIV)\teles')","[885428, 898726, 912170, 924412, 940609, 960499, 980389, 1000279]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'too.')","[1100992, 1155193, 1220957]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '12424')",[1033081]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'easy')","[1089400, 1099083, 1139065, 1152537, 1204829, 1218301]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'more')","[1110054, 1110491, 1122267, 1129581, 1131053, 1167801, 1168409, 1184783, 1194959, 1197007, 1233565, 1234173]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:n(""organizador"" <np-def> <Hprof> <left> M S)\torganizador')","[881815, 895113, 908847, 921089, 936163, 956053, 975943, 995833]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'write')","[1031225, 1032857, 1048281]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '3P')","[943715, 944201, 949733, 950207, 963605, 964091, 969623, 970097, 983495, 983981, 989513, 989987, 1003385, 1003871, 1009403, 1009877]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ad.ADParagraphStreamTest')","[931049, 931072, 931096, 931119]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==,')","[880250, 890531, 893548, 903829, 907406, 916871, 919648, 929113, 933486, 947865, 953376, 967755, 973266, 987645, 993156, 1007535]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Baumann,')","[1116793, 1177177, 1242941]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Akin')","[1247667, 1250333]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'speed')",[1062841]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'situate')",[1058585]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'both.')",[1032921]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.doccat.DocumentSampleTest')","[4640, 127132, 267134, 402807, 555751, 721157]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'issue')","[1126039, 1190031]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'urgent')",[1052985]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'some')",[1044057]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.chunker.ChunkSampleTest)')","[7847, 7871, 7895, 59981, 60012, 60043, 61965, 61996, 62027, 92115, 92139, 92163, 102575, 137706, 137736, 137766, 139287, 139315, 139343, 202629, 202664, 202699, 204869, 204904, 204939, 239659, 239687, 239715, 276980, 277008, 277036, 278455, 278481, 278507, 338117, 338150, 338183, 340229, 340262, 340295, 372699, 372725, 372751, 414109, 414141, 414173, 415796, 415826, 415856, 482818, 482855, 482892, 485186, 485223, 485260, 522296, 522326, 522356, 568145, 568180, 568215, 569991, 570024, 570057, 642533, 642573, 642613, 645093, 645133, 645173, 685683, 685716, 685749, 734279, 734316, 734353, 736231, 736266, 736301, 812453, 812495, 812537, 815141, 815183, 815225, 1076063, 1076103, 1076143, 1078147, 1078189, 1078231]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===N<:num(""6"" <NER:date> <card> <np-close> M P)\t6')","[879496, 892794, 906710, 918952, 932732, 952622, 972512, 992402]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.StringListTest')","[1598, 112530, 253528, 387209, 538659, 703069]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Berlin.')","[1033625, 1041977, 1042521, 1045433, 1059225]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenProbArray(opennlp.tools.chunker.ChunkerMETest)')","[58090, 59330, 91611, 102410, 136665, 200494, 201894, 239071, 276011, 336104, 337424, 372153, 412996, 480561, 482041, 521666, 566924, 640093, 641693, 684990, 732986, 809891, 811571, 1073597, 1074583]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '56473')","[1091677, 1142233, 1207997]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '13')",[1064153]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testGetTagNodes(opennlp.tools.parser.ParseTest)')","[10133, 10164, 10195, 11373, 11404, 11435, 73011, 73035, 73059, 105332, 105362, 105392, 146349, 146384, 146419, 147749, 147784, 147819, 217371, 217399, 217427, 246818, 246846, 246874, 285053, 285086, 285119, 286373, 286406, 286439, 352003, 352029, 352055, 379523, 379555, 379587, 423322, 423359, 423396, 424802, 424839, 424876, 498416, 498446, 498476, 530241, 530276, 530311, 578213, 578253, 578293, 579813, 579853, 579893, 659415, 659448, 659481, 694163, 694200, 694237, 744917, 744959, 745001, 746597, 746639, 746681, 831315, 831355, 831395, 832631, 832673, 832715]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDetokenizer(opennlp.tools.tokenize.DictionaryDetokenizerTest)')","[6302, 52138, 53006, 89115, 101644, 132175, 132438, 193774, 194754, 236159, 271829, 272074, 329768, 330692, 369449, 408198, 408479, 473457, 474493, 518546, 561664, 561972, 632413, 633533, 681558, 727418, 727744, 801827, 803003, 1022297, 1022619]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsComma(opennlp.tools.util.featuregen.StringPatternTest)')","[26377, 26408, 26439, 28857, 28888, 28919, 79635, 79659, 79683, 115530, 115560, 115590, 164689, 164724, 164759, 167489, 167524, 167559, 225099, 225127, 225155, 256324, 256352, 256380, 302345, 302378, 302411, 304985, 305018, 305051, 359179, 359205, 359231, 390413, 390445, 390477, 442710, 442747, 442784, 445670, 445707, 445744, 506696, 506726, 506756, 542169, 542204, 542239, 599173, 599213, 599253, 602373, 602413, 602453, 668523, 668556, 668589, 706783, 706820, 706857, 766925, 766967, 767009, 770285, 770327, 770369, 854759, 854799, 854839, 856739, 856781, 856823]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:street>')",[1131812]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====,')","[885792, 899090, 912506, 924748, 940973, 960863, 980753, 1000643]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===========H:prop(""Mário_Pirata"" <hum> <np-close> M S)\tMário_Pirata')","[883535, 896833, 910425, 922667, 938716, 958606, 978496, 998386]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Mike')",[1049081]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'of')","[1086617, 1087422, 1094023, 1095978, 1096392, 1097059, 1100762, 1101452, 1103292, 1104948, 1106788, 1107248, 1107501, 1110146, 1111733, 1115206, 1115459, 1121945, 1122819, 1125441, 1125809, 1126568, 1128983, 1129144, 1129949, 1135193, 1136313, 1145497, 1148217, 1148793, 1149721, 1154873, 1155833, 1158393, 1160697, 1163257, 1163897, 1164249, 1167929, 1170137, 1174969, 1175321, 1184335, 1185551, 1189199, 1189711, 1190767, 1194127, 1194351, 1195471, 1200957, 1202077, 1211261, 1213981, 1214557, 1215485, 1220637, 1221597, 1224157, 1226461, 1229021, 1229661, 1230013, 1233693, 1235901, 1240733, 1241085]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '========,')","[886312, 899610, 912986, 925228, 941493, 961383, 981273, 1001163]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'or')","[1099382, 1103430, 1131720, 1152953, 1158585, 1197935, 1218717, 1224349]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=P:v-fin(""iniciar"" <fmc> <mv> PR 3S IND VFIN)\tInicia')","[878315, 891613, 905625, 917867, 931551, 951441, 971331, 991221]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'PS/MQP')","[950179, 970069, 989959, 1009849]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSetEncodingParameter(opennlp.tools.cmdline.ArgumentParserTest)')","[13574, 15806, 74427, 97571, 107787, 150234, 152754, 219023, 249105, 288716, 291092, 353537, 382146, 427429, 430093, 500186, 533116, 582653, 585533, 661362, 697206, 749579, 752603, 836329, 837659]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'traditional')","[1098140, 1151225, 1216989]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hope')",[1067225]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCreationWihtSimpleDescriptor(opennlp.tools.util.featuregen.GeneratorFactoryTest)')","[2324, 27586, 29570, 80091, 98990, 116237, 116620, 166054, 168294, 225631, 256983, 257340, 303632, 305744, 359673, 391168, 391577, 444153, 446521, 507266, 542996, 543444, 600733, 603293, 669150, 707658, 708132, 768563, 771251, 857629, 858111]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'and')","[1087146, 1088250, 1088411, 1088871, 1089308, 1092459, 1093494, 1095610, 1096070, 1096438, 1096553, 1098048, 1098531, 1098945, 1100164, 1102717, 1103200, 1103660, 1108099, 1109594, 1110215, 1110537, 1111687, 1112354, 1112883, 1114217, 1114309, 1114562, 1114907, 1119346, 1121991, 1122244, 1123279, 1123785, 1124452, 1130478, 1135929, 1137465, 1137689, 1138329, 1138937, 1143321, 1144761, 1147705, 1148345, 1148857, 1149017, 1151097, 1151769, 1152345, 1154041, 1157593, 1158265, 1158905, 1165081, 1167161, 1168025, 1168473, 1170073, 1171001, 1171737, 1173593, 1173721, 1174073, 1174553, 1180729, 1184399, 1184751, 1186191, 1186895, 1187823, 1196207, 1201693, 1203229, 1203453, 1204093, 1204701, 1209085, 1210525, 1213469, 1214109, 1214621, 1214781, 1216861, 1217533, 1218109, 1219805, 1223357, 1224029, 1224669, 1230845, 1232925, 1233789, 1234237, 1235837, 1236765, 1237501, 1239357, 1239485, 1239837, 1240317, 1246493]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleCount(opennlp.tools.formats.ad.ADChunkSampleStreamTest)')","[42714, 43334, 85467, 100506, 125149, 183134, 183834, 231903, 265287, 319736, 320396, 365497, 400688, 462209, 462949, 513986, 553428, 620253, 621053, 676542, 718698, 789059, 789899, 877333, 877663]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingWhitespaceAndSeparatedString(opennlp.tools.tokenize.TokenSampleStreamTest)')","[52882, 53750, 89499, 101768, 132792, 194614, 195594, 236607, 272404, 330560, 331484, 369865, 408857, 474345, 475381, 519026, 562386, 633373, 634493, 682086, 728182, 802835, 804011, 1023367, 1023865]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Silberhornstraße')",[1035353]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<per>')","[943956, 963846, 983736, 1003626]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:n(""comunidade"" <np-def> <HH> F S)\tcomunidade')","[891077, 904375, 917375, 929617, 948411, 968301, 988191, 1008081]"
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'location-cont')","[1198028, 1198057, 1198086, 1198173, 1198260, 1198289, 1198318, 1198405, 1198492, 1198579, 1198637, 1198666, 1198695, 1198724, 1198782, 1198811, 1198840, 1198898, 1198927, 1198956, 1198985, 1199009, 1199057, 1199081, 1199139, 1199197, 1199371, 1199487, 1199603, 1199719, 1199806, 1199835, 1199864, 1199951, 1200067, 1200154, 1200183, 1200212, 1253761, 1253906, 1253935, 1253964, 1254138, 1254167, 1254196, 1254254, 1254283, 1254312]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<fs-subst>')","[949625, 969515, 989405, 1009295]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Therefore,')","[1093839, 1145241, 1211005]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'pictures')",[1038009]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Human')","[1130961, 1196879]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'study')","[1117966, 1178809, 1244573]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWordDotTokenization(opennlp.tools.tokenize.SimpleTokenizerTest)')","[56230, 57346, 90747, 102181, 135311, 198394, 199654, 238063, 274749, 334124, 335312, 371217, 411550, 478341, 479673, 520586, 565340, 637693, 639133, 683802, 731310, 807371, 808883, 1070793, 1071443]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.TokenNameFinderEvaluatorTest')","[1260507, 1260527, 1260548, 1260568]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidPhraseAsSpan1(opennlp.tools.chunker.ChunkSampleTest)')","[60942, 62926, 92859, 102743, 138636, 203714, 205954, 240527, 277848, 339140, 341252, 373505, 415101, 483965, 486333, 523226, 569230, 643773, 646333, 686706, 735426, 813755, 816443, 1077303, 1079449]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Lamar')","[1247763, 1250429]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '030/827234.')","[1103775, 1159065, 1224829]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'currently')",[1043417]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'bike')",[1036249]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.SpanTest')","[3587, 123739, 263975, 399180, 551773, 716945]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.DetokenizationDictionaryTest')","[1025843, 1025866, 1025890, 1025913]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Meier,')",[1055673]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'birthday')",[1031449]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'meet')","[1099129, 1099520, 1152601, 1153145, 1218365, 1218909]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'crashed')",[1062745]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'him')","[1030681, 1053081, 1061209]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Dramenstraße')",[1057017]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Bye!')","[1104810, 1160505, 1226269]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Yesterday,')","[1098416, 1151609, 1217373]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'new')",[1068473]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWindowSizeOne(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[2114, 2138, 2162, 24765, 24796, 24827, 26997, 27028, 27059, 78483, 78507, 78531, 98613, 113953, 113983, 114013, 114574, 114602, 114630, 162869, 162904, 162939, 165389, 165424, 165459, 223755, 223783, 223811, 254853, 254881, 254909, 255432, 255458, 255484, 300629, 300662, 300695, 303005, 303038, 303071, 357931, 357957, 357983, 388730, 388762, 388794, 389393, 389423, 389453, 440786, 440823, 440860, 443450, 443487, 443524, 505256, 505286, 505316, 540327, 540362, 540397, 541053, 541086, 541119, 597093, 597133, 597173, 599973, 600013, 600053, 666939, 666972, 667005, 704835, 704872, 704909, 705603, 705638, 705673, 764741, 764783, 764825, 767765, 767807, 767849, 851905, 851945, 851985, 852709, 852751, 852793]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Assembly')",[1252615]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Please')","[1093080, 1144185, 1209949]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'always')","[1108145, 1165145, 1230909]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Mr')","[1126085, 1129328, 1130064, 1130593, 1190095, 1194607, 1195631, 1196367]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====>N:art(""o"" <artd> DET F S)\ta')","[889621, 902919, 916031, 928273, 946955, 966845, 986735, 1006625]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '.')","[880666, 887404, 891155, 893964, 900702, 904453, 907790, 913994, 917447, 920032, 926236, 929689, 933902, 942585, 948489, 953792, 962475, 968379, 973682, 982365, 988269, 993572, 1002255, 1008159]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.StringUtilTest')","[867877, 867900, 867924, 867947]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSModelTest')","[1016797, 1016820, 1016844, 1016867]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.NameFinderCensus90NameStreamTest')","[877813, 877836, 877860, 877883]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'where')","[1106650, 1113895, 1116563, 1120128, 1131582, 1163065, 1173145, 1176857, 1181807, 1197743, 1228829, 1238909, 1242621]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<ext[^>]*>', '<ext id=""1002.pesquisa da usp mapeia cultura livre em são paulo"">')","[887550, 900848, 914128, 926370, 944884, 964774, 984664, 1004554]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '80333')","[1112699, 1171481, 1237245]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'by')","[1057529, 1070265]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLoadingDictionaryWithoutCaseAttribute(opennlp.tools.postag.POSDictionaryTest)')","[48697, 48728, 48759, 50061, 50092, 50123, 87795, 87819, 87843, 129840, 129870, 129900, 189889, 189924, 189959, 191429, 191464, 191499, 234619, 234647, 234675, 269654, 269682, 269710, 326105, 326138, 326171, 327557, 327590, 327623, 368019, 368045, 368071, 405703, 405735, 405767, 469350, 469387, 469424, 470978, 471015, 471052, 516896, 516926, 516956, 558929, 558964, 558999, 627973, 628013, 628053, 629733, 629773, 629813, 679743, 679776, 679809, 724523, 724560, 724597, 797165, 797207, 797249, 799013, 799055, 799097, 1017107, 1017147, 1017187, 1017759, 1017801, 1017843]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'great')","[1040345, 1046009, 1046329]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.tokenize.TokenSampleTest)')","[6677, 6701, 6725, 53905, 53936, 53967, 54773, 54804, 54835, 89811, 89835, 89859, 101871, 133456, 133486, 133516, 133837, 133865, 133893, 195769, 195804, 195839, 196749, 196784, 196819, 236971, 236999, 237027, 273022, 273050, 273078, 273377, 273403, 273429, 331649, 331682, 331715, 332573, 332606, 332639, 370203, 370229, 370255, 409567, 409599, 409631, 409974, 410004, 410034, 475566, 475603, 475640, 476602, 476639, 476676, 519416, 519446, 519476, 563165, 563200, 563235, 563611, 563644, 563677, 634693, 634733, 634773, 635813, 635853, 635893, 682515, 682548, 682581, 729007, 729044, 729081, 729479, 729514, 729549, 804221, 804263, 804305, 805397, 805439, 805481, 1024915, 1024955, 1024995, 1025399, 1025441, 1025483]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.GeneratorFactoryTest')","[2300, 116592, 257314, 391547, 543411, 708097]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOneToken(opennlp.tools.tokenize.WhitespaceTokenizerTest)')","[56974, 58586, 91131, 102285, 135928, 199234, 201054, 238511, 275324, 334916, 336632, 371633, 412209, 479229, 481153, 521066, 566062, 638653, 640733, 684330, 732074, 808379, 810563, 1072199, 1072689]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:prop(""Arturos"" <org> <left> M P)\tArturos')","[888198, 901496, 914722, 926964, 945532, 965422, 985312, 1005202]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====P<:n(""precedente"" <np-idf> <event> M P)\tprecedentes')","[890869, 904167, 917183, 929425, 948203, 968093, 987983, 1007873]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'No,')","[1100808, 1154937, 1220701]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidPhraseAsSpan1(opennlp.tools.chunker.ChunkSampleTest)')","[60973, 61004, 61035, 62957, 62988, 63019, 92883, 92907, 92931, 138666, 138696, 138726, 203749, 203784, 203819, 205989, 206024, 206059, 240555, 240583, 240611, 277876, 277904, 277932, 339173, 339206, 339239, 341285, 341318, 341351, 373531, 373557, 373583, 415133, 415165, 415197, 484002, 484039, 484076, 486370, 486407, 486444, 523256, 523286, 523316, 569265, 569300, 569335, 643813, 643853, 643893, 646373, 646413, 646453, 686739, 686772, 686805, 735463, 735500, 735537, 813797, 813839, 813881, 816485, 816527, 816569, 1077343, 1077383, 1077423, 1079491, 1079533, 1079575]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'with')","[1087790, 1089147, 1093977, 1095840, 1106443, 1107409, 1118932, 1120289, 1123900, 1136825, 1138713, 1145433, 1148025, 1162777, 1164121, 1180153, 1182031, 1187055, 1202589, 1204477, 1211197, 1213789, 1228541, 1229885, 1245917]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseOneEntryPerLine(opennlp.tools.dictionary.DictionaryTest)')","[18441, 18472, 18503, 21417, 21448, 21479, 76467, 76491, 76515, 110748, 110778, 110808, 155729, 155764, 155799, 159089, 159124, 159159, 221403, 221431, 221459, 251866, 251894, 251922, 293897, 293930, 293963, 297065, 297098, 297131, 355747, 355773, 355799, 385307, 385339, 385371, 433238, 433275, 433312, 436790, 436827, 436864, 502736, 502766, 502796, 536577, 536612, 536647, 588933, 588973, 589013, 592773, 592813, 592853, 664167, 664200, 664233, 700867, 700904, 700941, 756173, 756215, 756257, 760205, 760247, 760289, 844379, 844419, 844459, 845831, 845873, 845915]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'address')","[1086594, 1103039, 1114332, 1135161, 1158041, 1173753, 1200925, 1223805, 1239517]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:n(""comunidade"" <np-def> <HH> F S)\tcomunidade')","[891103, 904401, 917399, 929641, 948437, 968327, 988217, 1008107]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'badly')",[1062361]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPhraseAsSpan(opennlp.tools.chunker.ChunkSampleTest)')","[60694, 62678, 92667, 102701, 138396, 203434, 205674, 240303, 277624, 338876, 340988, 373297, 414845, 483669, 486037, 522986, 568950, 643453, 646013, 686442, 735130, 813419, 816107, 1076983, 1079113]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'me.')","[1118610, 1179705, 1245469]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testFindSingleTokenPattern(opennlp.tools.namefind.RegexNameFinderTest)')","[8291, 65158, 66398, 94107, 103076, 140744, 141127, 208474, 209874, 241983, 279812, 280169, 343628, 344948, 374857, 417353, 417762, 488997, 490477, 524786, 571698, 572146, 649213, 650813, 688422, 738038, 738512, 819467, 821147, 1083287, 1083769]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.doccat.DocumentCategorizerMETest')","[4757, 127389, 267373, 403082, 556053, 721477]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLoadingDictionaryWithoutCaseAttribute(opennlp.tools.postag.POSDictionaryTest)')","[48666, 50030, 87771, 101270, 129810, 189854, 191394, 234591, 269626, 326072, 327524, 367993, 405671, 469313, 470941, 516866, 558894, 627933, 629693, 679710, 724486, 797123, 798971, 1017067, 1017717]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'give')",[1047737]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hamburg,')","[1095058, 1146937, 1212701]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'through')","[1105385, 1161305, 1227069]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Alisa')","[1041465, 1042937]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'you:')",[1066777]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'find')","[1028825, 1032409, 1060601, 1061305, 1067289]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'wanted')","[1088526, 1088963, 1098669, 1137849, 1138457, 1151961, 1203613, 1204221, 1217725]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDifferentCaseLookup(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14566, 17790, 75099, 97738, 108764, 151354, 154994, 219807, 250016, 289772, 293204, 354265, 383189, 428613, 432461, 501026, 534258, 583933, 588093, 662286, 698414, 750923, 755291, 838887, 840369]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'lives')","[1050841, 1051257, 1063001, 1064057]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Mike,')",[1035705]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'letter')","[1088181, 1088618, 1102027, 1137369, 1137977, 1156633, 1203133, 1203741, 1222397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Robert')","[1247379, 1250045]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'off')",[1052697]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.namefind.TokenNameFinderEvaluatorTest)')","[70738, 96795, 103764, 144652, 214774, 245119, 283456, 349568, 377769, 421525, 495657, 528146, 576266, 656413, 692118, 742870, 827027, 1259936, 1260266]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======>N:art(""o"" <artd> DET M P)\tos')","[889387, 902685, 915815, 928057, 946721, 966611, 986501, 1006391]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==APP:prop(""RS"" <civ> <np-close> M S)\tRS')","[879035, 892333, 906285, 918527, 932271, 952161, 972051, 991941]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'far')",[1062521]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', ':')","[882023, 895321, 909039, 921281, 936371, 956261, 976151, 996041]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'called')","[1087537, 1101337, 1107869, 1114010, 1114447, 1129282, 1136473, 1155673, 1164761, 1173305, 1173913, 1194543, 1202237, 1221437, 1230525, 1239069, 1239677]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '30303')","[1097174, 1110836, 1149881, 1168889, 1215645, 1234653]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidChunkSampleList(opennlp.tools.chunker.ChunkSampleTest)')","[61469, 61500, 61531, 63453, 63484, 63515, 93267, 93291, 93315, 139146, 139176, 139206, 204309, 204344, 204379, 206549, 206584, 206619, 241003, 241031, 241059, 278324, 278352, 278380, 339701, 339734, 339767, 341813, 341846, 341879, 373947, 373973, 373999, 415645, 415677, 415709, 484594, 484631, 484668, 486962, 486999, 487036, 523736, 523766, 523796, 569825, 569860, 569895, 644453, 644493, 644533, 647013, 647053, 647093, 687267, 687300, 687333, 736055, 736092, 736129, 814469, 814511, 814553, 817157, 817199, 817241, 1077983, 1078023, 1078063, 1080163, 1080205, 1080247]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'year,')","[1027571, 1028513, 1031129, 1054457, 1058905]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.postag.POSEvaluatorTest)')","[6209, 6233, 6257, 51797, 51828, 51859, 52417, 52448, 52479, 88947, 88971, 88995, 101602, 131828, 131858, 131888, 132089, 132117, 132145, 193389, 193424, 193459, 194089, 194124, 194159, 235963, 235991, 236019, 271506, 271534, 271562, 271749, 271775, 271801, 329405, 329438, 329471, 330065, 330098, 330131, 369267, 369293, 369319, 407827, 407859, 407891, 408106, 408136, 408166, 473050, 473087, 473124, 473790, 473827, 473864, 518336, 518366, 518396, 561257, 561292, 561327, 561563, 561596, 561629, 631973, 632013, 632053, 632773, 632813, 632853, 681327, 681360, 681393, 726987, 727024, 727061, 727311, 727346, 727381, 801365, 801407, 801449, 802205, 802247, 802289, 1021587, 1021627, 1021667, 1021911, 1021953, 1021995]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:Person>')",[1258291]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====N<:v-pcp(""destruir"" <np-close> M P)\tdestruídos')","[890453, 903751, 916799, 929041, 947787, 967677, 987567, 1007457]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'aunt')","[1090297, 1140313, 1206077]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Aderholt')","[1247411, 1250077]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""parents'"")","[1117736, 1178489, 1244253]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sign')","[1112331, 1170969, 1236733]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'up,')","[1093126, 1144249, 1210013]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '======,')","[886000, 899298, 912698, 924940, 941181, 961071, 980961, 1000851]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:n(""comunidade"" <np-def> <HH> F S)\tcomunidade')","[888822, 902120, 915294, 927536, 946156, 966046, 985936, 1005826]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:prp(""com"" <np-close>)\tcom')","[880980, 894278, 908078, 920320, 935328, 955218, 975108, 994998]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'her.')","[1089170, 1138745, 1204509]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:prp(""entre"" <right>)\tentre')","[885376, 887300, 898674, 900598, 912122, 913898, 924364, 926140, 940557, 942481, 960447, 962371, 980337, 982261, 1000227, 1002151]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEqualsWithNull(opennlp.tools.util.SpanTest)')","[38622, 41350, 84603, 100217, 123384, 178514, 181594, 230895, 263644, 315380, 318284, 364561, 398801, 457325, 460581, 512906, 551358, 614973, 618493, 675354, 716506, 783515, 787211, 871559, 874561]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:n(""galpão"" <np-idf> <cjt-head> <build> <left> M S)\tgalpão')","[889179, 902477, 915623, 927865, 946513, 966403, 986293, 1006183]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'complete')","[1101636, 1156089, 1221853]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'shoes?')",[1046361]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPOSModelSerializationMaxent(opennlp.tools.postag.POSModelTest)')","[47829, 47860, 47891, 48449, 48480, 48511, 87507, 87531, 87555, 129206, 129236, 129266, 188909, 188944, 188979, 189609, 189644, 189679, 234283, 234311, 234339, 269064, 269092, 269120, 325181, 325214, 325247, 325841, 325874, 325907, 367707, 367733, 367759, 405025, 405057, 405089, 468314, 468351, 468388, 469054, 469091, 469128, 516536, 516566, 516596, 558185, 558220, 558255, 626853, 626893, 626933, 627653, 627693, 627733, 679347, 679380, 679413, 723735, 723772, 723809, 795989, 796031, 796073, 796829, 796871, 796913, 1015935, 1015975, 1016015, 1016267, 1016309, 1016351]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'face-to-face,')",[1032121]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====H:n(""capela"" <np-def> <cjt-subj> <build> <left> F S)\tcapela')","[889673, 902971, 916079, 928321, 947007, 966897, 986787, 1006677]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.postag.POSSampleTest)')","[49286, 50774, 88155, 101374, 130427, 190554, 192234, 235039, 270201, 326732, 328316, 368409, 406330, 470053, 471829, 517346, 559616, 628733, 630653, 680238, 725250, 797963, 799979, 1018473, 1019443]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=SUBJ:np')","[878963, 881076, 888150, 892261, 894374, 901448, 906219, 908166, 914678, 918461, 920408, 926920, 932199, 935424, 945484, 952089, 955314, 965374, 971979, 975204, 985264, 991869, 995094, 1005154]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<body>')",[1132000]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'that?')",[1065497]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'only')","[1039001, 1053273]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenizerModelTest')","[1028379, 1028402, 1028426, 1028449]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:n(""av."" <np-idf> <cjt-acc> <right> M S)\tAv.')","[880120, 893418, 907286, 919528, 933356, 953246, 973136, 993026]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Convulsed')","[1106420, 1162745, 1228509]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'list')",[1055001]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Therefore,')",[1037817]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.ListHeapTest')","[869049, 869072, 869096, 869119]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Julie,')",[1030041]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCopyConstructor(opennlp.tools.util.SequenceTest)')","[35057, 35088, 35119, 36297, 36328, 36359, 82803, 82827, 82851, 120723, 120753, 120783, 174489, 174524, 174559, 175889, 175924, 175959, 228795, 228823, 228851, 261163, 261191, 261219, 311585, 311618, 311651, 312905, 312938, 312971, 362611, 362637, 362663, 395960, 395992, 396024, 453070, 453107, 453144, 454550, 454587, 454624, 510656, 510686, 510716, 548247, 548282, 548317, 610373, 610413, 610453, 611973, 612013, 612053, 672879, 672912, 672945, 713215, 713252, 713289, 778685, 778727, 778769, 780365, 780407, 780449, 867101, 867141, 867181, 867769, 867811, 867853]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'to.')","[1116379, 1176601, 1242365]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'city.')",[1068409]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Pyongyang')","[1125326, 1189039]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'United')","[1124521, 1187919, 1252423]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'real')","[1127327, 1191823]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Center')","[1126637, 1190863]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '""Daily\'s""')","[1099704, 1153401, 1219165]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseWithAdditionalSpace(opennlp.tools.namefind.NameSampleTest)')","[68909, 68940, 68971, 71389, 71420, 71451, 96051, 96075, 96099, 143585, 143615, 143645, 212709, 212744, 212779, 215509, 215544, 215579, 244251, 244279, 244307, 282461, 282489, 282517, 347621, 347654, 347687, 350261, 350294, 350327, 376963, 376989, 377015, 420386, 420418, 420450, 493474, 493511, 493548, 496434, 496471, 496508, 527216, 527246, 527276, 575019, 575054, 575089, 654053, 654093, 654133, 657253, 657293, 657333, 691095, 691128, 691161, 741551, 741588, 741625, 824549, 824591, 824633, 827909, 827951, 827993, 1255133, 1255173, 1255213, 1256929, 1256971, 1257013]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Weilheim,')",[1053689]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testShow(opennlp.tools.parser.ParseTest)')","[9885, 9916, 9947, 11125, 11156, 11187, 72819, 72843, 72867, 105092, 105122, 105152, 146069, 146104, 146139, 147469, 147504, 147539, 217147, 217175, 217203, 246594, 246622, 246650, 284789, 284822, 284855, 286109, 286142, 286175, 351795, 351821, 351847, 379267, 379299, 379331, 423026, 423063, 423100, 424506, 424543, 424580, 498176, 498206, 498236, 529961, 529996, 530031, 577893, 577933, 577973, 579493, 579533, 579573, 659151, 659184, 659217, 693867, 693904, 693941, 744581, 744623, 744665, 746261, 746303, 746345, 830995, 831035, 831075, 832295, 832337, 832379]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'shop')",[1047289]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseInvalidVersion(opennlp.tools.util.VersionTest)')","[22657, 22688, 22719, 24145, 24176, 24207, 78003, 78027, 78051, 112942, 112972, 113002, 160489, 160524, 160559, 162169, 162204, 162239, 223195, 223223, 223251, 253912, 253940, 253968, 298385, 298418, 298451, 299969, 300002, 300035, 357411, 357437, 357463, 387649, 387681, 387713, 438270, 438307, 438344, 440046, 440083, 440120, 504656, 504686, 504716, 539141, 539176, 539211, 594373, 594413, 594453, 596293, 596333, 596373, 666279, 666312, 666345, 703579, 703616, 703653, 761885, 761927, 761969, 763901, 763943, 763985, 849647, 849687, 849727, 850307, 850349, 850391]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '.')","[880640, 887378, 891129, 893938, 900676, 904427, 907766, 913970, 917423, 920008, 926212, 929665, 933876, 942559, 948463, 953766, 962449, 968353, 973656, 982339, 988243, 993546, 1002229, 1008133]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""who's"")","[1087698, 1136697, 1202461]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'most.')","[1108352, 1165433, 1231197]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingEnglishSampleWithGermanAsLanguage(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[44450, 45566, 86331, 100755, 126640, 185094, 186354, 232911, 266676, 321584, 322772, 366433, 402281, 464281, 465613, 515066, 555174, 622493, 623933, 677730, 720546, 791411, 792923, 1011039, 1011697]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Bruno')",[1056921]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==========,')","[886572, 899870, 913226, 925468, 941753, 961643, 981533, 1001423]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=ADVL:pp')","[881321, 883972, 885324, 887248, 894619, 897270, 898622, 900546, 908391, 910826, 912074, 913850, 920633, 923068, 924316, 926092, 935669, 939153, 940505, 942429, 955559, 959043, 960395, 962319, 975449, 978933, 980285, 982209, 995339, 998823, 1000175, 1002099]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsComma(opennlp.tools.util.featuregen.StringPatternTest)')","[26346, 28826, 79611, 98885, 115500, 164654, 167454, 225071, 256296, 302312, 304952, 359153, 390381, 442673, 445633, 506666, 542134, 599133, 602333, 668490, 706746, 766883, 770243, 854719, 856697]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.SequenceTest)')","[3284, 3308, 3332, 34685, 34716, 34747, 35925, 35956, 35987, 82515, 82539, 82563, 99695, 120363, 120393, 120423, 120864, 120892, 120920, 174069, 174104, 174139, 175469, 175504, 175539, 228459, 228487, 228515, 260827, 260855, 260883, 261294, 261320, 261346, 311189, 311222, 311255, 312509, 312542, 312575, 362299, 362325, 362351, 395576, 395608, 395640, 396111, 396141, 396171, 452626, 452663, 452700, 454106, 454143, 454180, 510296, 510326, 510356, 547827, 547862, 547897, 548413, 548446, 548479, 609893, 609933, 609973, 611493, 611533, 611573, 672483, 672516, 672549, 712771, 712808, 712845, 713391, 713426, 713461, 778181, 778223, 778265, 779861, 779903, 779945, 866621, 866661, 866701, 867265, 867307, 867349]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'both.')","[1089883, 1139737, 1205501]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'took')","[1106742, 1113964, 1121186, 1163193, 1173241, 1183279, 1228957, 1239005]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Schneider,')",[1056313]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'inquiries?')","[1102533, 1157337, 1223101]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '90')",[1058201]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSentenceDetector(opennlp.tools.sentdetect.SentenceDetectorMETest)')","[5249, 47054, 47550, 87099, 101023, 128422, 128565, 188034, 188594, 233807, 268334, 268467, 324356, 324884, 367265, 404187, 404340, 467389, 467981, 516026, 557266, 557434, 625853, 626493, 678786, 722762, 722940, 794939, 795611, 1014563, 1014725]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'tell')",[1066745]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'name')","[1086985, 1090849, 1102280, 1102579, 1103177, 1103522, 1114286, 1117391, 1135705, 1141081, 1156985, 1157401, 1158233, 1158713, 1173689, 1178009, 1201469, 1206845, 1222749, 1223165, 1223997, 1224477, 1239453, 1243773]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======>N:art(""o"" <artd> <-sam> DET F S)\ta')","[882647, 895945, 909611, 921853, 937828, 957718, 977608, 997498]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==--')","[880354, 880510, 893652, 893808, 907502, 907646, 919744, 919888, 933590, 933746, 953480, 953636, 973370, 973526, 993260, 993416]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'needed')","[1130777, 1196623]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'had')","[1032601, 1052121, 1053369, 1054969, 1059769, 1063513, 1064729]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Sunday')",[1053465]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'SOURCE: ref=""1003.cultura-ameacada=removeme=-5"" source=""SELVA 1003.cultura-ameacada=removeme=""')","[887598, 900896, 914172, 926414, 944932, 964822, 984712, 1004602]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'July')",[1051769]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===>N:adjp')","[884310, 897608, 911138, 923380, 939491, 959381, 979271, 999161]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkerMETest')","[1075491, 1075514, 1075538, 1075561]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'later,')","[1094828, 1110261, 1146617, 1168089, 1212381, 1233853]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'exhibition.')","[1112998, 1171897, 1237661]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testClearAdaptiveData(opennlp.tools.namefind.NameSampleDataStreamTest)')","[66150, 68134, 94779, 103263, 141721, 209594, 211834, 242767, 280723, 344684, 346796, 375585, 418396, 490181, 492549, 525626, 572840, 650493, 653053, 689346, 739246, 820811, 823499, 1085005, 1085999]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Oh')",[1066201]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Stifterstraße')",[1054105]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'continue')","[1121853, 1184207]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLookupCaseSensitive(opennlp.tools.dictionary.DictionaryTest)')","[1529, 1553, 1577, 18317, 18348, 18379, 21293, 21324, 21355, 76371, 76395, 76419, 98051, 110628, 110658, 110688, 111729, 111757, 111785, 155589, 155624, 155659, 158949, 158984, 159019, 221291, 221319, 221347, 251754, 251782, 251810, 252781, 252807, 252833, 293765, 293798, 293831, 296933, 296966, 296999, 355643, 355669, 355695, 385179, 385211, 385243, 386354, 386384, 386414, 433090, 433127, 433164, 436642, 436679, 436716, 502616, 502646, 502676, 536437, 536472, 536507, 537723, 537756, 537789, 588773, 588813, 588853, 592613, 592653, 592693, 664035, 664068, 664101, 700719, 700756, 700793, 702079, 702114, 702149, 756005, 756047, 756089, 760037, 760079, 760121, 844219, 844259, 844299, 845663, 845705, 845747]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====>N:art(""o"" <artd> DET M S)\to')","[881659, 894957, 908703, 920945, 936007, 955897, 975787, 995677]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.ParseSampleStreamTest')","[311, 104423, 245971, 378552, 529177, 693037]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Munich.')","[1038329, 1058073, 1061625, 1062233, 1067033]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'help.')","[1112193, 1170777, 1236541]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=======>N:art(""o"" <artd> DET M P)\tos')","[889413, 902711, 915839, 928081, 946747, 966637, 986527, 1006417]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====H:prp(""sem"" <np-close>)\tsem')","[888678, 901976, 915162, 927404, 946012, 965902, 985792, 1005682]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====H:n(""área"" <np-def> <L> F S)\tárea')","[884648, 897946, 911450, 923692, 939829, 959719, 979609, 999499]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkSampleTest')","[7799, 139231, 278403, 415736, 569925, 736161]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:prop(""Armindo_Trevisan"" <hum> <np-close> M S)\tArmindo_Trevisan')","[883031, 896329, 909963, 922205, 938212, 958102, 977992, 997882]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '10')",[1034585]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:n(""parceria"" <np-def> <com> <HH> F S)\tparceria')","[880932, 894230, 908034, 920276, 935280, 955170, 975060, 994950]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Inc.')",[1132368]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'me')","[1087882, 1089446, 1092781, 1093517, 1098692, 1101590, 1136953, 1139129, 1143769, 1144793, 1151993, 1156025, 1202717, 1204893, 1209533, 1210557, 1217757, 1221789]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'day')","[1100279, 1154201, 1219965]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'gave')","[1114240, 1173625, 1239389]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'whom')","[1086732, 1107570, 1135353, 1164345, 1201117, 1230109]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Max-Löw-Straße')",[1064121]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSentenceModel(opennlp.tools.tokenize.TokenizerModelTest)')","[7028, 7052, 7076, 55517, 55548, 55579, 56013, 56044, 56075, 90387, 90411, 90435, 102057, 134587, 134617, 134647, 134728, 134756, 134784, 197589, 197624, 197659, 198149, 198184, 198219, 237643, 237671, 237699, 274075, 274103, 274131, 274206, 274232, 274258, 333365, 333398, 333431, 333893, 333926, 333959, 370827, 370853, 370879, 410776, 410808, 410840, 410927, 410957, 410987, 477490, 477527, 477564, 478082, 478119, 478156, 520136, 520166, 520196, 564491, 564526, 564561, 564657, 564690, 564723, 636773, 636813, 636853, 637413, 637453, 637493, 683307, 683340, 683373, 730411, 730448, 730485, 730587, 730622, 730657, 806405, 806447, 806489, 807077, 807119, 807161, 1027165, 1027205, 1027245, 1027329, 1027371, 1027413]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWithoutWindow(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[25261, 25292, 25323, 27493, 27524, 27555, 78867, 78891, 78915, 114433, 114463, 114493, 163429, 163464, 163499, 165949, 165984, 166019, 224203, 224231, 224259, 255301, 255329, 255357, 301157, 301190, 301223, 303533, 303566, 303599, 358347, 358373, 358399, 389242, 389274, 389306, 441378, 441415, 441452, 444042, 444079, 444116, 505736, 505766, 505796, 540887, 540922, 540957, 597733, 597773, 597813, 600613, 600653, 600693, 667467, 667500, 667533, 705427, 705464, 705501, 765413, 765455, 765497, 768437, 768479, 768521, 852545, 852585, 852625, 853381, 853423, 853465]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'elderly')","[1055481, 1069497]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'underground')",[1045689]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'retired')","[1108996, 1166329, 1232093]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSingleTokeNameInsideSentence(opennlp.tools.namefind.DictionaryNameFinderTest)')","[63701, 63732, 63763, 64693, 64724, 64755, 93651, 93675, 93699, 139900, 139930, 139960, 206829, 206864, 206899, 207949, 207984, 208019, 241451, 241479, 241507, 279026, 279054, 279082, 342077, 342110, 342143, 343133, 343166, 343199, 374363, 374389, 374415, 416451, 416483, 416515, 487258, 487295, 487332, 488442, 488479, 488516, 524216, 524246, 524276, 570709, 570744, 570779, 647333, 647373, 647413, 648613, 648653, 648693, 687795, 687828, 687861, 736991, 737028, 737065, 817493, 817535, 817577, 818837, 818879, 818921, 1081331, 1081371, 1081411, 1082143, 1082185, 1082227]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'widow.')","[1119001, 1180249, 1246013]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'P')","[934734, 942978, 943174, 943611, 944764, 948982, 949570, 949955, 950095, 950437, 950646, 950736, 954624, 962868, 963064, 963501, 964654, 968872, 969460, 969845, 969985, 970327, 970536, 970626, 974514, 982758, 982954, 983391, 984544, 988762, 989350, 989735, 989875, 990217, 990426, 990516, 994404, 1002648, 1002844, 1003281, 1004434, 1008652, 1009240, 1009625, 1009765, 1010107, 1010316, 1010406]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '=======,')","[886156, 899454, 912842, 925084, 941337, 961227, 981117, 1001007]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseSnapshot(opennlp.tools.util.VersionTest)')","[22533, 22564, 22595, 24021, 24052, 24083, 77907, 77931, 77955, 112822, 112852, 112882, 160349, 160384, 160419, 162029, 162064, 162099, 223083, 223111, 223139, 253800, 253828, 253856, 298253, 298286, 298319, 299837, 299870, 299903, 357307, 357333, 357359, 387521, 387553, 387585, 438122, 438159, 438196, 439898, 439935, 439972, 504536, 504566, 504596, 539001, 539036, 539071, 594213, 594253, 594293, 596133, 596173, 596213, 666147, 666180, 666213, 703431, 703468, 703505, 761717, 761759, 761801, 763733, 763775, 763817, 849487, 849527, 849567, 850139, 850181, 850223]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLeadingWithContraction(opennlp.tools.formats.ad.ADParagraphStreamTest)')","[4337, 4361, 4385, 42993, 43024, 43055, 43985, 44016, 44047, 85587, 85611, 85635, 100547, 125436, 125466, 125496, 125697, 125725, 125753, 183449, 183484, 183519, 184569, 184604, 184639, 232043, 232071, 232099, 265554, 265582, 265610, 265797, 265823, 265849, 320033, 320066, 320099, 321089, 321122, 321155, 365627, 365653, 365679, 400995, 401027, 401059, 401274, 401304, 401334, 462542, 462579, 462616, 463726, 463763, 463800, 514136, 514166, 514196, 553765, 553800, 553835, 554071, 554104, 554137, 620613, 620653, 620693, 621893, 621933, 621973, 676707, 676740, 676773, 719055, 719092, 719129, 719379, 719414, 719449, 789437, 789479, 789521, 790781, 790823, 790865, 904559, 904599, 904639, 904883, 904925, 904967]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'The')","[1032953, 1042553, 1052281, 1056665, 1062265, 1064281, 1067065, 1070169]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====H:n(""capela"" <np-def> <cjt-subj> <build> <left> F S)\tcapela')","[889699, 902997, 916103, 928345, 947033, 966923, 986813, 1006703]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'last')","[1108881, 1166169, 1231933]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'maps.')",[1060025]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""'"")","[1120358, 1126200, 1127235, 1127603, 1127833, 1128707, 1129696, 1182127, 1190255, 1191695, 1192207, 1192527, 1193743, 1195119]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest')","[4874, 127766, 267724, 403485, 556495, 721945]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHashCodeDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14473, 14504, 14535, 17697, 17728, 17759, 75027, 75051, 75075, 108674, 108704, 108734, 151249, 151284, 151319, 154889, 154924, 154959, 219723, 219751, 219779, 249932, 249960, 249988, 289673, 289706, 289739, 293105, 293138, 293171, 354187, 354213, 354239, 383093, 383125, 383157, 428502, 428539, 428576, 432350, 432387, 432424, 500936, 500966, 500996, 534153, 534188, 534223, 583813, 583853, 583893, 587973, 588013, 588053, 662187, 662220, 662253, 698303, 698340, 698377, 750797, 750839, 750881, 755165, 755207, 755249, 838767, 838807, 838847, 840243, 840285, 840327]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'move')",[1069209]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCreation(opennlp.tools.cmdline.TerminateToolExceptionTest)')","[1061, 1085, 1109, 12489, 12520, 12551, 13853, 13884, 13915, 73779, 73803, 73827, 97404, 106840, 106870, 106900, 106981, 107009, 107037, 149009, 149044, 149079, 150549, 150584, 150619, 218267, 218295, 218323, 248222, 248250, 248278, 248353, 248379, 248405, 287561, 287594, 287627, 289013, 289046, 289079, 352835, 352861, 352887, 381135, 381167, 381199, 381286, 381316, 381346, 426134, 426171, 426208, 427762, 427799, 427836, 499376, 499406, 499436, 532009, 532044, 532079, 532175, 532208, 532241, 581253, 581293, 581333, 583013, 583053, 583093, 660471, 660504, 660537, 696035, 696072, 696109, 696211, 696246, 696281, 748109, 748151, 748193, 749957, 749999, 750041, 834987, 835027, 835067, 835151, 835193, 835235]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===,')","[885480, 898778, 912218, 924460, 940661, 960551, 980441, 1000331]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'reception')","[1097013, 1149657, 1215421]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'because')","[1044697, 1055993]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:n(""parceria"" <np-def> <com> <HH> F S)\tparceria')","[881477, 894775, 908535, 920777, 935825, 955715, 975605, 995495]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'An')","[1043225, 1055449]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=PIV:pp')","[878339, 891637, 905647, 917889, 931575, 951465, 971355, 991245]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'notable')",[1070105]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWhitespaceTokenization(opennlp.tools.tokenize.WhitespaceTokenizerTest)')","[7355, 56850, 58462, 91035, 102244, 135808, 136191, 199094, 200914, 238399, 275212, 275569, 334784, 336500, 371529, 412081, 412490, 479081, 481005, 520946, 565922, 566370, 638493, 640573, 684198, 731926, 732400, 808211, 810395, 1072039, 1072521]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:num(""98"" <card> M/F P)\t98')","[884414, 897712, 911234, 923476, 939595, 959485, 979375, 999265]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'summer.')","[1090780, 1140985, 1206749]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testScanning(opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest)')","[5015, 46434, 46930, 86907, 100941, 127908, 128051, 187334, 187894, 233583, 267856, 267989, 323696, 324224, 367057, 403637, 403790, 466649, 467241, 515786, 556662, 556830, 625053, 625693, 678522, 722122, 722300, 794099, 794771, 1013719, 1013881]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Gärtnerweg')","[1055769, 1056601]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.parser.ParseTest)')","[10226, 11466, 73083, 97177, 105422, 146454, 147854, 217455, 246902, 285152, 286472, 352081, 379619, 423433, 424913, 498506, 530346, 578333, 579933, 659514, 694274, 745043, 746723, 831435, 832757]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'them')","[1100969, 1101061, 1155161, 1155289, 1220925, 1221053]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'American')","[1258467, 1259259]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'meal.')","[1098163, 1151257, 1217021]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.tokenize.DetokenizationDictionaryTest)')","[6560, 6584, 6608, 53285, 53316, 53347, 54277, 54308, 54339, 89619, 89643, 89667, 101809, 133079, 133109, 133139, 133340, 133368, 133396, 195069, 195104, 195139, 196189, 196224, 196259, 236747, 236775, 236803, 272671, 272699, 272727, 272914, 272940, 272966, 330989, 331022, 331055, 332045, 332078, 332111, 369995, 370021, 370047, 409164, 409196, 409228, 409443, 409473, 409503, 474826, 474863, 474900, 476010, 476047, 476084, 519176, 519206, 519236, 562723, 562758, 562793, 563029, 563062, 563095, 633893, 633933, 633973, 635173, 635213, 635253, 682251, 682284, 682317, 728539, 728576, 728613, 728863, 728898, 728933, 803381, 803423, 803465, 804725, 804767, 804809, 1024165, 1024205, 1024245, 1024489, 1024531, 1024573]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.dictionary.DictionaryTest)')","[18937, 18968, 18999, 21913, 21944, 21975, 76851, 76875, 76899, 111228, 111258, 111288, 156289, 156324, 156359, 159649, 159684, 159719, 221851, 221879, 221907, 252314, 252342, 252370, 294425, 294458, 294491, 297593, 297626, 297659, 356163, 356189, 356215, 385819, 385851, 385883, 433830, 433867, 433904, 437382, 437419, 437456, 503216, 503246, 503276, 537137, 537172, 537207, 589573, 589613, 589653, 593413, 593453, 593493, 664695, 664728, 664761, 701459, 701496, 701533, 756845, 756887, 756929, 760877, 760919, 760961, 845019, 845059, 845099, 846503, 846545, 846587]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'to.')",[1066361]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Reichstag.')",[1044345]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseEmtpyTag(opennlp.tools.postag.POSSampleTest)')","[49658, 51146, 88443, 101437, 130787, 190974, 192654, 235375, 270537, 327128, 328712, 368721, 406714, 470497, 472273, 517706, 560036, 629213, 631133, 680634, 725694, 798467, 800483, 1018953, 1019947]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'while')","[1130386, 1196079]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'countries,')","[1089745, 1139545, 1205309]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '15.')",[1057049]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'liked')","[1108283, 1165337, 1231101]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '<ext id=""1002.pesquisa da usp mapeia cultura livre em são paulo"">')","[887454, 900752, 914040, 926282, 944788, 964678, 984568, 1004458]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEmpty(opennlp.tools.util.eval.FMeasureTest)')","[31554, 32918, 81243, 99342, 118225, 170534, 172074, 226975, 258835, 307856, 309308, 360921, 393292, 448889, 450517, 508706, 545324, 605853, 607613, 670734, 710122, 773939, 775787, 861437, 862423]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'apartments')",[1032665]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'proposed')","[1099474, 1153081, 1218845]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=SUB:conj-s(""que"" <clb-fs>)\tque')","[889777, 903075, 916175, 928417, 947111, 967001, 986891, 1006781]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====,')","[885636, 898934, 912362, 924604, 940817, 960707, 980597, 1000487]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testForCorrectFeatures(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[25137, 25168, 25199, 27369, 27400, 27431, 78771, 78795, 78819, 114313, 114343, 114373, 163289, 163324, 163359, 165809, 165844, 165879, 224091, 224119, 224147, 255189, 255217, 255245, 301025, 301058, 301091, 303401, 303434, 303467, 358243, 358269, 358295, 389114, 389146, 389178, 441230, 441267, 441304, 443894, 443931, 443968, 505616, 505646, 505676, 540747, 540782, 540817, 597573, 597613, 597653, 600453, 600493, 600533, 667335, 667368, 667401, 705279, 705316, 705353, 765245, 765287, 765329, 768269, 768311, 768353, 852385, 852425, 852465, 853213, 853255, 853297]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '63737')","[1119162, 1180473, 1246237]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'two')",[1032633]
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'properly')",[1070545]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START>')","[1087031, 1087560, 1090136, 1090895, 1092091, 1092206, 1093425, 1095541, 1095633, 1096737, 1097910, 1102326, 1102625, 1103568, 1104028, 1104396, 1107892, 1108513, 1109042, 1109640, 1111043, 1112745, 1114470, 1115482, 1117437, 1119507, 1119530, 1119553, 1119645, 1119668, 1135769, 1136505, 1140089, 1141145, 1142809, 1142969, 1144665, 1147609, 1147737, 1149273, 1150905, 1157049, 1157465, 1158777, 1159417, 1159929, 1164793, 1165657, 1166393, 1167225, 1169177, 1171545, 1173945, 1175353, 1178073, 1246963, 1247091, 1247219, 1247347, 1247475, 1247603, 1247731, 1247859, 1258621, 1258753, 1258841]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCompareToLower(opennlp.tools.util.SpanTest)')","[38157, 38188, 38219, 40885, 40916, 40947, 84243, 84267, 84291, 122934, 122964, 122994, 177989, 178024, 178059, 181069, 181104, 181139, 230475, 230503, 230531, 263224, 263252, 263280, 314885, 314918, 314951, 317789, 317822, 317855, 364171, 364197, 364223, 398321, 398353, 398385, 456770, 456807, 456844, 460026, 460063, 460100, 512456, 512486, 512516, 550833, 550868, 550903, 614373, 614413, 614453, 617893, 617933, 617973, 674859, 674892, 674925, 715951, 715988, 716025, 782885, 782927, 782969, 786581, 786623, 786665, 870959, 870999, 871039, 873931, 873973, 874015]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'get')","[1089078, 1100440, 1102947, 1138617, 1154425, 1157913, 1204381, 1220189, 1223677]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '112,')","[1091562, 1104557, 1142073, 1160153, 1207837, 1225917]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'station')",[1045721]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'September,')","[1086433, 1134937, 1200701]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'minutes')","[1099911, 1114861, 1153689, 1174489, 1219453, 1240253]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==>N:pron-det(""seu"" <si> <poss 3S> DET M P)\tseus')","[890063, 903361, 916439, 928681, 947397, 967287, 987177, 1007067]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'p.m.')",[1067193]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLength(opennlp.tools.util.SpanTest)')","[37010, 39738, 83355, 99944, 121824, 176694, 179774, 229439, 262188, 313664, 316568, 363209, 397137, 455401, 458657, 511346, 549538, 612893, 616413, 673638, 714582, 781331, 785027, 869479, 872377]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'read')","[1040185, 1059929]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.parser.lang.en.HeadRulesTest)')","[452, 9358, 10598, 72507, 97011, 104565, 104708, 145474, 146874, 216783, 246103, 246236, 284228, 285548, 351457, 378704, 378857, 422397, 423877, 497786, 529344, 529512, 577213, 578813, 658722, 693214, 693392, 743867, 745547, 830213, 830375]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCompareToLower(opennlp.tools.util.SpanTest)')","[38126, 40854, 84219, 100133, 122904, 177954, 181034, 230447, 263196, 314852, 317756, 364145, 398289, 456733, 459989, 512426, 550798, 614333, 617853, 674826, 715914, 782843, 786539, 870919, 873889]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14101, 14132, 14163, 17325, 17356, 17387, 74739, 74763, 74787, 108314, 108344, 108374, 150829, 150864, 150899, 154469, 154504, 154539, 219387, 219415, 219443, 249596, 249624, 249652, 289277, 289310, 289343, 292709, 292742, 292775, 353875, 353901, 353927, 382709, 382741, 382773, 428058, 428095, 428132, 431906, 431943, 431980, 500576, 500606, 500636, 533733, 533768, 533803, 583333, 583373, 583413, 587493, 587533, 587573, 661791, 661824, 661857, 697859, 697896, 697933, 750293, 750335, 750377, 754661, 754703, 754745, 838287, 838327, 838367, 839739, 839781, 839823]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'next')","[1065625, 1066137, 1067545]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'family')",[1051929]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'How')","[1103361, 1115643, 1158489, 1175577, 1224253, 1241341]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHashCodeDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14442, 17666, 75003, 97717, 108644, 151214, 154854, 219695, 249904, 289640, 293072, 354161, 383061, 428465, 432313, 500906, 534118, 583773, 587933, 662154, 698266, 750755, 755123, 838727, 840201]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSentenceDetector(opennlp.tools.sentdetect.SentenceDetectorMETest)')","[5273, 5297, 5321, 47085, 47116, 47147, 47581, 47612, 47643, 87123, 87147, 87171, 101043, 128452, 128482, 128512, 128593, 128621, 128649, 188069, 188104, 188139, 188629, 188664, 188699, 233835, 233863, 233891, 268362, 268390, 268418, 268493, 268519, 268545, 324389, 324422, 324455, 324917, 324950, 324983, 367291, 367317, 367343, 404219, 404251, 404283, 404370, 404400, 404430, 467426, 467463, 467500, 468018, 468055, 468092, 516056, 516086, 516116, 557301, 557336, 557371, 557467, 557500, 557533, 625893, 625933, 625973, 626533, 626573, 626613, 678819, 678852, 678885, 722799, 722836, 722873, 722975, 723010, 723045, 794981, 795023, 795065, 795653, 795695, 795737, 1014603, 1014643, 1014683, 1014767, 1014809, 1014851]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'PR')","[934006, 937101, 943689, 949706, 953896, 956991, 963579, 969596, 973786, 976881, 983469, 989486, 993676, 996771, 1003359, 1009376]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToUpperCase(opennlp.tools.util.StringUtilTest)')","[34189, 34220, 34251, 35429, 35460, 35491, 82227, 82251, 82275, 119866, 119896, 119926, 173509, 173544, 173579, 174909, 174944, 174979, 228123, 228151, 228179, 260364, 260392, 260420, 310661, 310694, 310727, 311981, 312014, 312047, 361987, 362013, 362039, 395045, 395077, 395109, 452034, 452071, 452108, 453514, 453551, 453588, 509936, 509966, 509996, 547245, 547280, 547315, 609253, 609293, 609333, 610853, 610893, 610933, 672087, 672120, 672153, 712155, 712192, 712229, 777509, 777551, 777593, 779189, 779231, 779273, 865207, 865247, 865287, 866027, 866069, 866111]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""wasn't"")","[1089377, 1099060, 1118518, 1139033, 1152505, 1179577, 1204797, 1218269, 1245341]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====APP:np')","[885870, 899168, 912578, 924820, 941051, 960941, 980831, 1000721]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'point:')","[1099635, 1153305, 1219069]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ad.ADParagraphStreamTest')","[4289, 125641, 265745, 401214, 554005, 719309]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '20193')",[1051417]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""didn't"")",[1038521]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'cafe')",[1219133]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '20193')","[1104603, 1160217, 1225981]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:prp(""de"" <sam-> <np-close>)\tde')","[882479, 895777, 909457, 921699, 937660, 957550, 977440, 997330]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:prp(""de"" <sam-> <np-close>)\tde')","[884544, 897842, 911354, 923596, 939725, 959615, 979505, 999395]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.TokenNameFinderEvaluatorTest')","[8735, 144767, 283563, 421648, 576401, 743013]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16178, 19526, 75579, 97863, 109501, 153174, 156954, 220367, 250703, 291488, 295052, 354785, 383976, 430537, 434533, 501626, 535120, 586013, 590333, 662946, 699326, 753107, 757643, 841293, 842743]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '======,')","[883199, 896497, 910117, 922359, 938380, 958270, 978160, 998050]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '30291')",[1045401]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==APP:prop(""RS"" <civ> <np-close> M S)\tRS')","[880588, 893886, 907718, 919960, 933824, 953714, 973604, 993494]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSSampleEventStreamTest')","[1022187, 1022210, 1022234, 1022257]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======>N:art(""o"" <artd> DET M P)\tos')","[887934, 901232, 914480, 926722, 945268, 965158, 985048, 1004938]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'later,')","[1039097, 1058425]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=========,')","[886442, 899740, 913106, 925348, 941623, 961513, 981403, 1001293]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkSampleTest')","[1081021, 1081044, 1081068, 1081091]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Peter')","[1114493, 1173977, 1239741]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'number')","[1049881, 1050393]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'famous')","[1097105, 1098807, 1101222, 1111986, 1149785, 1152153, 1155513, 1170489, 1215549, 1217917, 1221277, 1236253]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Alan')","[1087054, 1135801, 1201565]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.postag.POSSampleTest)')","[49317, 49348, 49379, 50805, 50836, 50867, 88179, 88203, 88227, 130457, 130487, 130517, 190589, 190624, 190659, 192269, 192304, 192339, 235067, 235095, 235123, 270229, 270257, 270285, 326765, 326798, 326831, 328349, 328382, 328415, 368435, 368461, 368487, 406362, 406394, 406426, 470090, 470127, 470164, 471866, 471903, 471940, 517376, 517406, 517436, 559651, 559686, 559721, 628773, 628813, 628853, 630693, 630733, 630773, 680271, 680304, 680337, 725287, 725324, 725361, 798005, 798047, 798089, 800021, 800063, 800105, 1018513, 1018553, 1018593, 1019485, 1019527, 1019569]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'up,')",[1036953]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14070, 17294, 74715, 97654, 108284, 150794, 154434, 219359, 249568, 289244, 292676, 353849, 382677, 428021, 431869, 500546, 533698, 583293, 587453, 661758, 697822, 750251, 754619, 838247, 839697]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'directly')",[1053113]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '======,')","[885974, 899272, 912674, 924916, 941155, 961045, 980935, 1000825]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=ACC:np')","[882767, 888246, 896065, 901544, 909721, 914766, 921963, 927008, 937948, 945580, 957838, 965470, 977728, 985360, 997618, 1005250]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'before.')","[1101498, 1155897, 1221661]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'her.')",[1031993]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'photo')","[1093931, 1145369, 1211133]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'who')","[1050809, 1055545, 1056345, 1062969]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'possible.')","[1091953, 1142617, 1208381]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==CJT:np')","[879704, 880094, 884284, 889153, 893002, 893392, 897582, 902451, 906902, 907262, 911114, 915599, 919144, 919504, 923356, 927841, 932940, 933330, 939465, 946487, 952830, 953220, 959355, 966377, 972720, 973110, 979245, 986267, 992610, 993000, 999135, 1006157]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEqualsWithNull(opennlp.tools.util.SpanTest)')","[38653, 38684, 38715, 41381, 41412, 41443, 84627, 84651, 84675, 123414, 123444, 123474, 178549, 178584, 178619, 181629, 181664, 181699, 230923, 230951, 230979, 263672, 263700, 263728, 315413, 315446, 315479, 318317, 318350, 318383, 364587, 364613, 364639, 398833, 398865, 398897, 457362, 457399, 457436, 460618, 460655, 460692, 512936, 512966, 512996, 551393, 551428, 551463, 615013, 615053, 615093, 618533, 618573, 618613, 675387, 675420, 675453, 716543, 716580, 716617, 783557, 783599, 783641, 787253, 787295, 787337, 871599, 871639, 871679, 874603, 874645, 874687]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Max-L\x9aw-Stra§e')","[1114654, 1174201]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidPhraseAsSpan3(opennlp.tools.chunker.ChunkSampleTest)')","[61190, 63174, 93051, 102785, 138876, 203994, 206234, 240751, 278072, 339404, 341516, 373713, 415357, 484261, 486629, 523466, 569510, 644093, 646653, 686970, 735722, 814091, 816779, 1077623, 1079785]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'isolation')","[1122290, 1184815]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'S')","[1119760, 1123601, 1126729, 1131145, 1181295, 1186639, 1190991, 1197135, 1253127, 1258203, 1258995]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'order')",[1068249]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNoBreakSpace(opennlp.tools.util.StringUtilTest)')","[3143, 33910, 35150, 82011, 99550, 119596, 120219, 173194, 174594, 227871, 260112, 260693, 310364, 311684, 361753, 394757, 395422, 451701, 453181, 509666, 546930, 547658, 608893, 610493, 671790, 711822, 712592, 777131, 778811, 864847, 865649]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Korean')","[1123946, 1124291, 1129190, 1130317, 1131421, 1187119, 1187599, 1194415, 1195983, 1197519]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'So')","[1087491, 1091401, 1099428, 1104373, 1112032, 1118633, 1136409, 1141849, 1153017, 1159897, 1170553, 1179737, 1202173, 1207613, 1218781, 1225661, 1236317, 1245501]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.treeinsert.ParserTest')","[834087, 834110, 834134, 834157]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'computer...')","[1103936, 1159289, 1225053]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'personal')",[1054233]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.DetokenizationDictionaryTest')","[6512, 133284, 272862, 409383, 562963, 728793]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Afghanistan')","[1128408, 1193327, 1253383, 1253575, 1258555, 1259347]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'apartment')","[1090412, 1140473, 1206237]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEventOutcomes(opennlp.tools.sentdetect.SDEventStreamTest)')","[5156, 5180, 5204, 46837, 46868, 46899, 47209, 47240, 47271, 87027, 87051, 87075, 101002, 128195, 128225, 128255, 128336, 128364, 128392, 187789, 187824, 187859, 188209, 188244, 188279, 233723, 233751, 233779, 268123, 268151, 268179, 268254, 268280, 268306, 324125, 324158, 324191, 324521, 324554, 324587, 367187, 367213, 367239, 403944, 403976, 404008, 404095, 404125, 404155, 467130, 467167, 467204, 467574, 467611, 467648, 515936, 515966, 515996, 556999, 557034, 557069, 557165, 557198, 557231, 625573, 625613, 625653, 626053, 626093, 626133, 678687, 678720, 678753, 722479, 722516, 722553, 722655, 722690, 722725, 794645, 794687, 794729, 795149, 795191, 795233, 1014181, 1014221, 1014261, 1014345, 1014387, 1014429]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Seidlstra§e')","[1092850, 1143865]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===N<:pp')","[879548, 879886, 881529, 884492, 892846, 893184, 894827, 897790, 906758, 907070, 908583, 911306, 919000, 919312, 920825, 923548, 932784, 933122, 935877, 939673, 952674, 953012, 955767, 959563, 972564, 972902, 975657, 979453, 992454, 992792, 995547, 999343]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Brandenburger')","[1098899, 1152281, 1218045]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameFinderEventStreamTest')","[1084255, 1084278, 1084302, 1084325]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'choose')","[1122681, 1185359]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'explained')",[1061145]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenProbMinScore(opennlp.tools.chunker.ChunkerMETest)')","[58245, 58276, 58307, 59485, 59516, 59547, 91731, 91755, 91779, 136815, 136845, 136875, 200669, 200704, 200739, 202069, 202104, 202139, 239211, 239239, 239267, 276151, 276179, 276207, 336269, 336302, 336335, 337589, 337622, 337655, 372283, 372309, 372335, 413156, 413188, 413220, 480746, 480783, 480820, 482226, 482263, 482300, 521816, 521846, 521876, 567099, 567134, 567169, 640293, 640333, 640373, 641893, 641933, 641973, 685155, 685188, 685221, 733171, 733208, 733245, 810101, 810143, 810185, 811781, 811823, 811865, 1073797, 1073837, 1073877, 1074793, 1074835, 1074877]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Erding,')","[1109893, 1167577, 1233341]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<com>')","[936427, 956317, 976207, 996097]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWindowAtBeginOfSentence(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[24889, 24920, 24951, 27121, 27152, 27183, 78579, 78603, 78627, 114073, 114103, 114133, 163009, 163044, 163079, 165529, 165564, 165599, 223867, 223895, 223923, 254965, 254993, 255021, 300761, 300794, 300827, 303137, 303170, 303203, 358035, 358061, 358087, 388858, 388890, 388922, 440934, 440971, 441008, 443598, 443635, 443672, 505376, 505406, 505436, 540467, 540502, 540537, 597253, 597293, 597333, 600133, 600173, 600213, 667071, 667104, 667137, 704983, 705020, 705057, 764909, 764951, 764993, 767933, 767975, 768017, 852065, 852105, 852145, 852877, 852919, 852961]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==>N:pron-det(""seu"" <si> <poss 3S> DET M P)\tseus')","[890037, 903335, 916415, 928657, 947371, 967261, 987151, 1007041]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'you?')",[1065081]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Chesterstr.')","[1097864, 1150841, 1216605]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<state>')","[943929, 963819, 983709, 1003599]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'countries,')",[1032761]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'deem')",[1048153]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'semester,')","[1096047, 1148313, 1214077]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testAsSpan(opennlp.tools.chunker.ChunkSampleTest)')","[60570, 62554, 92571, 102680, 138276, 203294, 205534, 240191, 277512, 338744, 340856, 373193, 414717, 483521, 485889, 522866, 568810, 643293, 645853, 686310, 734982, 813251, 815939, 1076823, 1078945]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:abc:a>')",[1259621]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'led')","[1122083, 1184527]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Leipzig.')","[1104189, 1104626, 1159641, 1160249, 1225405, 1226013]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<NER:prednum>')","[934986, 954876, 974766, 994656]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPhraseAsSpan(opennlp.tools.chunker.ChunkSampleTest)')","[60725, 60756, 60787, 62709, 62740, 62771, 92691, 92715, 92739, 138426, 138456, 138486, 203469, 203504, 203539, 205709, 205744, 205779, 240331, 240359, 240387, 277652, 277680, 277708, 338909, 338942, 338975, 341021, 341054, 341087, 373323, 373349, 373375, 414877, 414909, 414941, 483706, 483743, 483780, 486074, 486111, 486148, 523016, 523046, 523076, 568985, 569020, 569055, 643493, 643533, 643573, 646053, 646093, 646133, 686475, 686508, 686541, 735167, 735204, 735241, 813461, 813503, 813545, 816149, 816191, 816233, 1077023, 1077063, 1077103, 1079155, 1079197, 1079239]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseOneEntryPerLine(opennlp.tools.dictionary.DictionaryTest)')","[18410, 21386, 76443, 98072, 110718, 155694, 159054, 221375, 251838, 293864, 297032, 355721, 385275, 433201, 436753, 502706, 536542, 588893, 592733, 664134, 700830, 756131, 760163, 844339, 845789]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '9')","[1117023, 1177497, 1243261]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'home,')",[1062617]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameSampleTest')","[8618, 144390, 283212, 421245, 575959, 742545]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHashCodeDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16581, 16612, 16643, 19929, 19960, 19991, 75891, 75915, 75939, 109891, 109921, 109951, 153629, 153664, 153699, 157409, 157444, 157479, 220731, 220759, 220787, 251067, 251095, 251123, 291917, 291950, 291983, 295481, 295514, 295547, 355123, 355149, 355175, 384392, 384424, 384456, 431018, 431055, 431092, 435014, 435051, 435088, 502016, 502046, 502076, 535575, 535610, 535645, 586533, 586573, 586613, 590853, 590893, 590933, 663375, 663408, 663441, 699807, 699844, 699881, 753653, 753695, 753737, 758189, 758231, 758273, 841813, 841853, 841893, 843289, 843331, 843373]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'high')","[1113619, 1172761, 1238525]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNameFinderWithTypes(opennlp.tools.namefind.NameFinderMETest)')","[67142, 70118, 95259, 103388, 142458, 210714, 214074, 243327, 281410, 345740, 348908, 376105, 419183, 491365, 494917, 526226, 573702, 651773, 655613, 690006, 740158, 822155, 826187, 1133003, 1134149]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'community')","[1122382, 1122888, 1184943, 1185647]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenizer(opennlp.tools.tokenize.TokenizerMETest)')","[55889, 55920, 55951, 56757, 56788, 56819, 90579, 90603, 90627, 134964, 134994, 135024, 198009, 198044, 198079, 198989, 199024, 199059, 237867, 237895, 237923, 274426, 274454, 274482, 333761, 333794, 333827, 334685, 334718, 334751, 371035, 371061, 371087, 411179, 411211, 411243, 477934, 477971, 478008, 478970, 479007, 479044, 520376, 520406, 520436, 564933, 564968, 565003, 637253, 637293, 637333, 638373, 638413, 638453, 683571, 683604, 683637, 730879, 730916, 730953, 806909, 806951, 806993, 808085, 808127, 808169, 1027939, 1027979, 1028019, 1028271, 1028313, 1028355]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testOnlyWithNamesWithTypes(opennlp.tools.namefind.NameFinderMETest)')","[67421, 67452, 67483, 70397, 70428, 70459, 95475, 95499, 95523, 142728, 142758, 142788, 211029, 211064, 211099, 214389, 214424, 214459, 243579, 243607, 243635, 281662, 281690, 281718, 346037, 346070, 346103, 349205, 349238, 349271, 376339, 376365, 376391, 419471, 419503, 419535, 491698, 491735, 491772, 495250, 495287, 495324, 526496, 526526, 526556, 574017, 574052, 574087, 652133, 652173, 652213, 655973, 656013, 656053, 690303, 690336, 690369, 740491, 740528, 740565, 822533, 822575, 822617, 826565, 826607, 826649, 1133363, 1133403, 1133443, 1134527, 1134569, 1134611]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParse(opennlp.tools.util.VersionTest)')","[1763, 1787, 1811, 22409, 22440, 22471, 23897, 23928, 23959, 77811, 77835, 77859, 98406, 112702, 112732, 112762, 113203, 113231, 113259, 160209, 160244, 160279, 161889, 161924, 161959, 222971, 222999, 223027, 253688, 253716, 253744, 254155, 254181, 254207, 298121, 298154, 298187, 299705, 299738, 299771, 357203, 357229, 357255, 387393, 387425, 387457, 387928, 387958, 387988, 437974, 438011, 438048, 439750, 439787, 439824, 504416, 504446, 504476, 538861, 538896, 538931, 539447, 539480, 539513, 594053, 594093, 594133, 595973, 596013, 596053, 666015, 666048, 666081, 703283, 703320, 703357, 703903, 703938, 703973, 761549, 761591, 761633, 763565, 763607, 763649, 849327, 849367, 849407, 849971, 850013, 850055]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSModelTest')","[5459, 129291, 269143, 405116, 558285, 723841]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'attention.')","[1095886, 1148089, 1213853]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'police')","[1114792, 1174393, 1240157]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'immediately')","[1106719, 1163161, 1228925]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====CJT:np')","[888030, 901328, 914568, 926810, 945364, 965254, 985144, 1005034]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'our')","[1093586, 1094046, 1095219, 1107524, 1110399, 1144889, 1145529, 1147161, 1164281, 1168281, 1210653, 1211293, 1212925, 1230045, 1234045]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'K')",[1258687]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Now')",[1069337]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====H:n(""shopping"" <np-def> <Lh> M S)\tshopping')","[881711, 895009, 908751, 920993, 936059, 955949, 975839, 995729]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.SequenceTest)')","[3260, 34654, 35894, 82491, 99675, 120333, 120836, 174034, 175434, 228431, 260799, 261268, 311156, 312476, 362273, 395544, 396081, 452589, 454069, 510266, 547792, 548380, 609853, 611453, 672450, 712734, 713356, 778139, 779819, 866581, 867223]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'help')","[1111664, 1170041, 1235805]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==APP:prop(""RS"" <civ> <np-close> M S)\tRS')","[880614, 893912, 907742, 919984, 933850, 953740, 973630, 993520]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTypeWithSpecialChars(opennlp.tools.namefind.NameSampleTest)')","[69033, 69064, 69095, 71513, 71544, 71575, 96147, 96171, 96195, 143705, 143735, 143765, 212849, 212884, 212919, 215649, 215684, 215719, 244363, 244391, 244419, 282573, 282601, 282629, 347753, 347786, 347819, 350393, 350426, 350459, 377067, 377093, 377119, 420514, 420546, 420578, 493622, 493659, 493696, 496582, 496619, 496656, 527336, 527366, 527396, 575159, 575194, 575229, 654213, 654253, 654293, 657413, 657453, 657493, 691227, 691260, 691293, 741699, 741736, 741773, 824717, 824759, 824801, 828077, 828119, 828161, 1255293, 1255333, 1255373, 1257097, 1257139, 1257181]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'job')","[1094989, 1096231, 1146841, 1148569, 1212605, 1214333]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleArgumentsUsage(opennlp.tools.cmdline.ArgumentParserTest)')","[13326, 15558, 74235, 97529, 107547, 149954, 152474, 218799, 248881, 288452, 290828, 353329, 381890, 427133, 429797, 499946, 532836, 582333, 585213, 661098, 696910, 749243, 752267, 836009, 837323]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'wounds')","[1105661, 1161689, 1227453]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEventOutcomes(opennlp.tools.tokenize.TokSpanEventStreamTest)')","[6887, 55114, 55610, 90267, 101996, 134300, 134443, 197134, 197694, 237503, 273808, 273941, 332936, 333464, 370697, 410469, 410622, 477009, 477601, 519986, 564154, 564322, 636253, 636893, 683142, 730054, 730232, 805859, 806531, 1026703, 1026865]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<co-subj>')","[943449, 949073, 963339, 968963, 983229, 988853, 1003119, 1008743]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'like')","[1035225, 1041145, 1044153, 1046905, 1049209, 1066329, 1069817]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hospital')",[1053305]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '======,')","[885948, 899246, 912650, 924892, 941129, 961019, 980909, 1000799]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==P<:np')","[879314, 881399, 884050, 885402, 892612, 894697, 897348, 898700, 906542, 908463, 910898, 912146, 918784, 920705, 923140, 924388, 932550, 935747, 939231, 940583, 952440, 955637, 959121, 960473, 972330, 975527, 979011, 980363, 992220, 995417, 998901, 1000253]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'near')","[1091585, 1109985, 1113182, 1113826, 1142105, 1167705, 1172153, 1173049, 1207869, 1233469, 1237917, 1238813]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'VeilchenstraÃ\x9fe')","[1213117, 1222013]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Frankly')","[1126890, 1191215]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'your')","[1095771, 1096185, 1096691, 1130685, 1147929, 1148505, 1149209, 1196495, 1213693, 1214269, 1214973]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsAllLowerCaseLetter(opennlp.tools.util.featuregen.StringPatternTest)')","[25974, 28454, 79323, 98822, 115140, 164234, 167034, 224735, 255960, 301916, 304556, 358841, 389997, 442229, 445189, 506306, 541714, 598653, 601853, 668094, 706302, 766379, 769739, 854239, 856193]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEmtpyEventStream(opennlp.tools.util.AbstractEventStreamTest)')","[36514, 39118, 83067, 99861, 121327, 176134, 179074, 229103, 261725, 313136, 315908, 362897, 396606, 454809, 457917, 510986, 548956, 612253, 615613, 673242, 713966, 780659, 784187, 868569, 868899]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hope')","[1117092, 1177593, 1243357]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'German')","[1111756, 1170169, 1235933]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:prop(""Arturos"" <org> <left> M P)\tArturos')","[889933, 903231, 916319, 928561, 947267, 967157, 987047, 1006937]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'go')",[1042713]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'yes,')","[1116287, 1176473, 1242237]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Berlin')",[1043673]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'called?')","[1103476, 1158649, 1224413]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Afterwards,')","[1108375, 1165465, 1231229]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testGetToken(opennlp.tools.util.StringListTest)')","[1622, 20518, 22874, 77211, 98240, 111815, 112558, 158074, 160734, 222271, 252861, 253554, 296108, 298616, 356553, 386446, 387239, 435717, 438529, 503666, 537824, 538692, 591613, 594653, 665190, 702186, 703104, 758987, 762179, 847225, 848187]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'yes')","[1027667, 1028609]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'delighted.')",[1031065]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'as')","[1033337, 1035417, 1035481, 1054521]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '6th')","[1096024, 1148281, 1214045]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'place.')",[1066681]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<HH>')","[936455, 950949, 956345, 970839, 976235, 990729, 996125, 1010619]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testChunkingParserTraining(opennlp.tools.parser.chunking.ParserTest)')","[827, 851, 875, 11869, 11900, 11931, 12365, 12396, 12427, 73491, 73515, 73539, 97301, 106206, 106236, 106266, 106347, 106375, 106403, 148309, 148344, 148379, 148869, 148904, 148939, 217931, 217959, 217987, 247632, 247660, 247688, 247763, 247789, 247815, 286901, 286934, 286967, 287429, 287462, 287495, 352523, 352549, 352575, 380457, 380489, 380521, 380608, 380638, 380668, 425394, 425431, 425468, 425986, 426023, 426060, 499016, 499046, 499076, 531265, 531300, 531335, 531431, 531464, 531497, 580453, 580493, 580533, 581093, 581133, 581173, 660075, 660108, 660141, 695247, 695284, 695321, 695423, 695458, 695493, 747269, 747311, 747353, 747941, 747983, 748025, 833815, 833855, 833895, 833979, 834021, 834063]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'appreciated')","[1097979, 1151001, 1216765]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidReturnType(opennlp.tools.cmdline.ArgumentParserTest)')","[12954, 15186, 73947, 97466, 107187, 149534, 152054, 218463, 248545, 288056, 290432, 353017, 381506, 426689, 429353, 499586, 532416, 581853, 584733, 660702, 696466, 748739, 751763, 835529, 836819]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'back')",[1037081]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'expected')","[1120197, 1181903]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Berlin.')","[1090458, 1097197, 1097611, 1099819, 1110859, 1140537, 1149913, 1150489, 1153561, 1168921, 1206301, 1215677, 1216253, 1219325, 1234685]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'felt')","[1097266, 1150009, 1215773]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Gary')","[1247251, 1249917]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'if')","[1039865, 1042297, 1048441, 1049305, 1049625]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Veilchenstraße?')",[1047353]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.WindowFeatureGeneratorTest')","[857519, 857542, 857566, 857589]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'local')","[1045145, 1054681]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===N<:pp')","[878507, 878699, 880956, 882455, 891805, 891997, 894254, 895753, 905801, 905977, 908056, 909435, 918043, 918219, 920298, 921677, 931743, 931935, 935304, 937636, 951633, 951825, 955194, 957526, 971523, 971715, 975084, 977416, 991413, 991605, 994974, 997306]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<NER:date>')","[934280, 954170, 974060, 993950]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '-')","[1124061, 1124797, 1125556, 1125602, 1128546, 1187279, 1188303, 1189359, 1189423, 1193519]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.ListHeapTest')","[3353, 121065, 261481, 396326, 548649, 713641]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'you')","[1091999, 1092712, 1100417, 1101153, 1101544, 1104672, 1115390, 1115689, 1115804, 1116103, 1117207, 1117299, 1142681, 1143673, 1154393, 1155417, 1155961, 1160313, 1175225, 1175641, 1175801, 1176217, 1177753, 1177881, 1208445, 1209437, 1220157, 1221181, 1221725, 1226077, 1240989, 1241405, 1241565, 1241981, 1243517, 1243645]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'security')","[1122152, 1130455, 1184623, 1196175]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameFinderMETest')","[8501, 142933, 281853, 419690, 574257, 740745]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Meisenstraße')",[1066905]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<NER2>')","[934309, 934396, 954199, 954286, 974089, 974176, 993979, 994066]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSize(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[4430, 43458, 44698, 85755, 100589, 125783, 126286, 183974, 185374, 232239, 265877, 266346, 320528, 321848, 365809, 401366, 401903, 463097, 464577, 514346, 554172, 554760, 621213, 622813, 676938, 719486, 720108, 790067, 791747, 929753, 930395]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'process')","[1125901, 1189839]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Tor')",[1044249]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=P:v-fin(""celebrar"" <fs-subst> <mv> <right> PR 3P IND VFIN)\tcelebram')","[888222, 901520, 914744, 926986, 945556, 965446, 985336, 1005226]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Blumenweg')","[1094690, 1146425, 1212189]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'phone')","[1103246, 1158329, 1224093]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'ups')",[1058329]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testRecall(opennlp.tools.util.eval.FMeasureTest)')","[31430, 32794, 81147, 99321, 118105, 170394, 171934, 226863, 258723, 307724, 309176, 360817, 393164, 448741, 450369, 508586, 545184, 605693, 607453, 670602, 709974, 773771, 775619, 861277, 862255]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""I'm"")","[1092321, 1092896, 1095909, 1096093, 1096599, 1118863, 1143129, 1143929, 1148121, 1148377, 1149081, 1180057, 1208893, 1209693, 1213885, 1214141, 1214845, 1245821]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'right?')",[1051001]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingWhitespaceAndSeparatedString(opennlp.tools.tokenize.TokenSampleStreamTest)')","[52913, 52944, 52975, 53781, 53812, 53843, 89523, 89547, 89571, 132822, 132852, 132882, 194649, 194684, 194719, 195629, 195664, 195699, 236635, 236663, 236691, 272432, 272460, 272488, 330593, 330626, 330659, 331517, 331550, 331583, 369891, 369917, 369943, 408889, 408921, 408953, 474382, 474419, 474456, 475418, 475455, 475492, 519056, 519086, 519116, 562421, 562456, 562491, 633413, 633453, 633493, 634533, 634573, 634613, 682119, 682152, 682185, 728219, 728256, 728293, 802877, 802919, 802961, 804053, 804095, 804137, 1023407, 1023447, 1023487, 1023907, 1023949, 1023991]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'face-to-face,')","[1089285, 1138905, 1204669]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'married')","[1037657, 1038425]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Worcesterstreet')","[1088043, 1137177, 1202941]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Fernandes')","[1096783, 1149337, 1215101]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'heard')","[1029561, 1047545]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'place,')","[1113987, 1173273, 1239037]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '12.')",[1030617]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'severe')","[1131674, 1197871]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:prp(""com"" <np-close>)\tcom')","[881581, 894879, 908631, 920873, 935929, 955819, 975709, 995599]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===P<:np')","[888582, 888774, 901880, 902072, 915074, 915250, 927316, 927492, 945916, 946108, 965806, 965998, 985696, 985888, 1005586, 1005778]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Lenbachhaus')","[1112538, 1171257, 1237021]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==CO:conj-c(""e"" <co-subj>)\te')","[882695, 895993, 909655, 921897, 937876, 957766, 977656, 997546]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'had')","[1089630, 1105132, 1106052, 1107340, 1111342, 1114171, 1115091, 1139385, 1160953, 1162233, 1164025, 1169593, 1173529, 1174809, 1205149, 1226717, 1227997, 1229789, 1235357, 1239293, 1240573]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testGetText(opennlp.tools.parser.ParseTest)')","[9730, 10970, 72699, 97093, 104942, 145894, 147294, 217007, 246454, 284624, 285944, 351665, 379107, 422841, 424321, 498026, 529786, 577693, 579293, 658986, 693682, 744371, 746051, 830795, 832085]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'toward')","[1120588, 1182447]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Luisenstra§e')","[1112584, 1171321]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testChunkAsSpan(opennlp.tools.chunker.ChunkerMETest)')","[7472, 57718, 58958, 91323, 102327, 136305, 137048, 200074, 201474, 238735, 275675, 276368, 335708, 337028, 371841, 412612, 413405, 480117, 481597, 521306, 566504, 567372, 639613, 641213, 684594, 732542, 733460, 809387, 811067, 1073117, 1074079]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '======H:prop(""Donaldo_Schüller"" <hum> <np-close> M S)\tDonaldo_Schüller')","[885922, 899220, 912626, 924868, 941103, 960993, 980883, 1000773]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'interested')","[1096139, 1148441, 1214205]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Leonardstraße')",[1034937]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseSimpleSample(opennlp.tools.postag.WordTagSampleStreamTest)')","[5600, 48170, 49038, 87579, 101188, 129433, 129576, 189294, 190274, 234367, 269275, 269408, 325544, 326468, 367785, 405268, 405421, 468721, 469757, 516626, 558452, 558620, 627293, 628413, 679446, 724018, 724196, 796451, 797627, 1016485, 1016647]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Paracelsus')","[1106190, 1162425, 1228189]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Bye!')",[1051705]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'flair')",[1069913]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'possible')","[1102901, 1157849, 1223613]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'talking')","[1102464, 1157241, 1223005]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'smalltown')",[1069881]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSetDiffCase(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[17046, 20394, 76251, 98010, 110341, 154154, 157934, 221151, 251487, 292412, 295976, 355513, 384872, 431573, 435569, 502466, 536100, 587133, 591453, 663870, 700362, 754283, 758819, 842413, 843919]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'apartment')",[1033561]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'different')",[1032729]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'tourist')","[1096875, 1111181, 1149465, 1169369, 1215229, 1235133]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '3S')","[934032, 937127, 953922, 957017, 973812, 976907, 993702, 996797]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'photo')",[1037913]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======H:prop(""José_Eduardo_Degrazia"" <hum> <np-close> M S)\tJosé_Eduardo_Degrazia')","[886052, 899350, 912746, 924988, 941233, 961123, 981013, 1000903]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'look')","[1046425, 1050585]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '5.')","[1090090, 1140025, 1205789]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParameterValidation(opennlp.tools.chunker.ChunkSampleTest)')","[60322, 62306, 92379, 102638, 138036, 203014, 205254, 239967, 277288, 338480, 340592, 372985, 414461, 483225, 485593, 522626, 568530, 642973, 645533, 686046, 734686, 812915, 815603, 1076503, 1078609]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:n(""vidro"" <np-idf> <cjt-acc> <con> <right> M P)\tvidros')","[888462, 901760, 914964, 927206, 945796, 965686, 985576, 1005466]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Scotland,')",[1029785]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=P:v-fin(""celebrar"" <fs-subst> <mv> <right> PR 3P IND VFIN)\tcelebram')","[889985, 903283, 916367, 928609, 947319, 967209, 987099, 1006989]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'summer.')",[1034073]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Lenbachhaus')",[1061369]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'simply')",[1060505]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testStartsWith(opennlp.tools.util.SpanTest)')","[37785, 37816, 37847, 40513, 40544, 40575, 83955, 83979, 84003, 122574, 122604, 122634, 177569, 177604, 177639, 180649, 180684, 180719, 230139, 230167, 230195, 262888, 262916, 262944, 314489, 314522, 314555, 317393, 317426, 317459, 363859, 363885, 363911, 397937, 397969, 398001, 456326, 456363, 456400, 459582, 459619, 459656, 512096, 512126, 512156, 550413, 550448, 550483, 613893, 613933, 613973, 617413, 617453, 617493, 674463, 674496, 674529, 715507, 715544, 715581, 782381, 782423, 782465, 786077, 786119, 786161, 870479, 870519, 870559, 873427, 873469, 873511]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'George')","[1093448, 1095656, 1111066, 1144697, 1147769, 1169209, 1210461, 1213533, 1234973]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'address.')","[1089561, 1139289, 1205053]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:n(""episódio"" <np-idf> <event> M S)\tepisódio')","[890765, 904063, 917087, 929329, 948099, 967989, 987879, 1007769]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'yet')","[1116540, 1176825, 1242589]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'much,')",[1067449]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<ul>')",[1132023]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.NameFinderCensus90NameStreamTest')","[4055, 124887, 265043, 400408, 553121, 718373]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '30291')","[1099796, 1153529, 1219293]"
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'default-cont')","[1180950, 1180979, 1181032, 1181061, 1181090, 1181119, 1181167, 1247984, 1248013, 1248042, 1248071, 1248100, 1248129, 1248158, 1248187, 1248216, 1248245, 1248274, 1248303, 1248332, 1248361, 1248390, 1248419, 1248448, 1248477, 1248506, 1248535, 1248564, 1248593, 1248622, 1248651, 1248680, 1248709, 1248738, 1248767, 1248796, 1248825, 1248854, 1248883, 1248912, 1248941, 1248970, 1248999, 1249028, 1249057, 1249086, 1249115, 1249144, 1249173, 1249202, 1249231, 1249260, 1249289, 1249318, 1249347, 1249376, 1249405, 1249597]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""weren't"")",[1052857]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToHashCode(opennlp.tools.parser.ParseTest)')","[593, 617, 641, 9637, 9668, 9699, 10877, 10908, 10939, 72627, 72651, 72675, 97072, 104852, 104882, 104912, 105833, 105861, 105889, 145789, 145824, 145859, 147189, 147224, 147259, 216923, 216951, 216979, 246370, 246398, 246426, 247285, 247311, 247337, 284525, 284558, 284591, 285845, 285878, 285911, 351587, 351613, 351639, 379011, 379043, 379075, 380058, 380088, 380118, 422730, 422767, 422804, 424210, 424247, 424284, 497936, 497966, 497996, 529681, 529716, 529751, 530827, 530860, 530893, 577573, 577613, 577653, 579173, 579213, 579253, 658887, 658920, 658953, 693571, 693608, 693645, 694783, 694818, 694853, 744245, 744287, 744329, 745925, 745967, 746009, 830675, 830715, 830755, 831959, 832001, 832043]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'turbulent')",[1058297]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '======P<:np')","[882623, 887910, 895921, 901208, 909589, 914458, 921831, 926700, 937804, 945244, 957694, 965134, 977584, 985024, 997474, 1004914]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'an')","[1086640, 1103016, 1110721, 1113136, 1118955, 1121439, 1125234, 1135225, 1158009, 1168729, 1172089, 1180185, 1183631, 1188911, 1200989, 1223773, 1234493, 1237853, 1245949]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Graf,')",[1034265]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testGetTagNodes(opennlp.tools.parser.ParseTest)')","[10102, 11342, 72987, 97156, 105302, 146314, 147714, 217343, 246790, 285020, 286340, 351977, 379491, 423285, 424765, 498386, 530206, 578173, 579773, 659382, 694126, 744875, 746555, 831275, 832589]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'this')",[1038809]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', 'SUB:conj-s(""que"" <clb-fs>)\tque')","[881945, 895243, 908967, 921209, 936293, 956183, 976073, 995963]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'grandaunt.')",[1031353]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHtmlNameSampleParsing(opennlp.tools.namefind.NameSampleDataStreamTest)')","[66274, 68258, 94875, 103284, 141841, 209734, 211974, 242879, 280835, 344816, 346928, 375689, 418524, 490329, 492697, 525746, 572980, 650653, 653213, 689478, 739394, 820979, 823667, 1085165, 1086167]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testChunkAsArray(opennlp.tools.chunker.ChunkerMETest)')","[58369, 58400, 58431, 59609, 59640, 59671, 91827, 91851, 91875, 136935, 136965, 136995, 200809, 200844, 200879, 202209, 202244, 202279, 239323, 239351, 239379, 276263, 276291, 276319, 336401, 336434, 336467, 337721, 337754, 337787, 372387, 372413, 372439, 413284, 413316, 413348, 480894, 480931, 480968, 482374, 482411, 482448, 521936, 521966, 521996, 567239, 567274, 567309, 640453, 640493, 640533, 642053, 642093, 642133, 685287, 685320, 685353, 733319, 733356, 733393, 810269, 810311, 810353, 811949, 811991, 812033, 1073957, 1073997, 1074037, 1074961, 1075003, 1075045]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '======H:prop(""Donaldo_Schüller"" <hum> <np-close> M S)\tDonaldo_Schüller')","[883175, 896473, 910095, 922337, 938356, 958246, 978136, 998026]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Schneider')","[1108559, 1165721, 1231485]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Spain,')",[1041593]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParse(opennlp.tools.util.VersionTest)')","[1739, 22378, 23866, 77787, 98386, 112672, 113175, 160174, 161854, 222943, 253660, 254129, 298088, 299672, 357177, 387361, 387898, 437937, 439713, 504386, 538826, 539414, 594013, 595933, 665982, 703246, 703868, 761507, 763523, 849287, 849929]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'town')",[1058009]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testRegions(opennlp.tools.chunker.ChunkSampleTest)')","[60818, 62802, 92763, 102722, 138516, 203574, 205814, 240415, 277736, 339008, 341120, 373401, 414973, 483817, 486185, 523106, 569090, 643613, 646173, 686574, 735278, 813587, 816275, 1077143, 1079281]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'My')","[1037241, 1048985, 1067609, 1068441]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==========H:prop(""Luiz_Coronel"" <hum> <np-close> M S)\tLuiz_Coronel')","[883463, 896761, 910359, 922601, 938644, 958534, 978424, 998314]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSDictionaryTest')","[1020265, 1020288, 1020312, 1020335]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '1995.')","[1093816, 1145209, 1210973]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'bike')","[1092620, 1143545, 1209309]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=P:v-fin(""ter"" <fmc> <mv> PR 3P IND VFIN)\ttêm')","[882743, 896041, 909699, 921941, 937924, 957814, 977704, 997594]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '.')","[1092298, 1109732, 1119737, 1119783, 1120726, 1121577, 1121784, 1122566, 1123371, 1123578, 1123624, 1124337, 1125004, 1125924, 1126108, 1126384, 1126706, 1126752, 1126844, 1127534, 1128040, 1128454, 1129029, 1129351, 1129765, 1130087, 1130547, 1130616, 1130938, 1131122, 1131168, 1131766, 1143097, 1167353, 1181263, 1181327, 1182639, 1183823, 1184111, 1185199, 1186319, 1186607, 1186671, 1187663, 1188591, 1189871, 1190127, 1190511, 1190959, 1191023, 1191151, 1192111, 1192815, 1193391, 1194191, 1194639, 1195215, 1195663, 1196303, 1196399, 1196847, 1197103, 1197167, 1197999, 1208861, 1233117, 1253095, 1253159, 1258181, 1258225, 1258599, 1258665, 1258709, 1258973, 1259017, 1259391]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'friend')","[1029081, 1030073, 1043289, 1065177]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'empty')","[1110744, 1168761, 1234525]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '======H:prp(""de"" <sam-> <np-close>)\tde')","[882599, 895897, 909567, 921809, 937780, 957670, 977560, 997450]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '30202.')",[1033753]
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'default-start')","[1181003, 1181143, 1249429, 1249453, 1249477, 1249501, 1249525, 1249549, 1249573]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'officer.')",[1063833]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=P:v-fin(""ter"" <fmc> <mv> PR 3P IND VFIN)\ttêm')","[885012, 898310, 911786, 924028, 940193, 960083, 979973, 999863]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'it')","[1027635, 1028577, 1032217, 1044409, 1045849, 1048185, 1049337, 1051065, 1052921, 1066617]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Lilienstraße')",[1068601]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'moment.')",[1036857]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'information.')",[1051673]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLookup(opennlp.tools.dictionary.DictionaryTest)')","[19278, 22254, 77115, 98219, 111558, 156674, 160034, 222159, 252622, 294788, 297956, 356449, 386171, 434237, 437789, 503546, 537522, 590013, 593853, 665058, 701866, 757307, 761339, 845459, 846965]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testFailSafty(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[32205, 32236, 32267, 33569, 33600, 33631, 81651, 81675, 81699, 118872, 118902, 118932, 171269, 171304, 171339, 172809, 172844, 172879, 227451, 227479, 227507, 259438, 259466, 259494, 308549, 308582, 308615, 310001, 310034, 310067, 361363, 361389, 361415, 393983, 394015, 394047, 449666, 449703, 449740, 451294, 451331, 451368, 509216, 509246, 509276, 546081, 546116, 546151, 606693, 606733, 606773, 608453, 608493, 608533, 671295, 671328, 671361, 710923, 710960, 710997, 774821, 774863, 774905, 776669, 776711, 776753, 863219, 863259, 863299, 863871, 863913, 863955]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDefaultEncodingParameter(opennlp.tools.cmdline.ArgumentParserTest)')","[13481, 13512, 13543, 15713, 15744, 15775, 74355, 74379, 74403, 107697, 107727, 107757, 150129, 150164, 150199, 152649, 152684, 152719, 218939, 218967, 218995, 249021, 249049, 249077, 288617, 288650, 288683, 290993, 291026, 291059, 353459, 353485, 353511, 382050, 382082, 382114, 427318, 427355, 427392, 429982, 430019, 430056, 500096, 500126, 500156, 533011, 533046, 533081, 582533, 582573, 582613, 585413, 585453, 585493, 661263, 661296, 661329, 697095, 697132, 697169, 749453, 749495, 749537, 752477, 752519, 752561, 836209, 836249, 836289, 837533, 837575, 837617]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'leather?')",[1046713]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====N<:pp')","[884700, 889283, 897998, 902581, 911498, 915719, 923740, 927961, 939881, 946617, 959771, 966507, 979661, 986397, 999551, 1006287]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWithNameTypeAndInvalidData(opennlp.tools.namefind.NameSampleDataStreamTest)')","[66057, 66088, 66119, 68041, 68072, 68103, 94707, 94731, 94755, 141631, 141661, 141691, 209489, 209524, 209559, 211729, 211764, 211799, 242683, 242711, 242739, 280639, 280667, 280695, 344585, 344618, 344651, 346697, 346730, 346763, 375507, 375533, 375559, 418300, 418332, 418364, 490070, 490107, 490144, 492438, 492475, 492512, 525536, 525566, 525596, 572735, 572770, 572805, 650373, 650413, 650453, 652933, 652973, 653013, 689247, 689280, 689313, 739135, 739172, 739209, 820685, 820727, 820769, 823373, 823415, 823457, 1084885, 1084925, 1084965, 1085873, 1085915, 1085957]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTypeWithSpace(opennlp.tools.namefind.NameSampleTest)')","[69281, 69312, 69343, 71761, 71792, 71823, 96339, 96363, 96387, 143945, 143975, 144005, 213129, 213164, 213199, 215929, 215964, 215999, 244587, 244615, 244643, 282797, 282825, 282853, 348017, 348050, 348083, 350657, 350690, 350723, 377275, 377301, 377327, 420770, 420802, 420834, 493918, 493955, 493992, 496878, 496915, 496952, 527576, 527606, 527636, 575439, 575474, 575509, 654533, 654573, 654613, 657733, 657773, 657813, 691491, 691524, 691557, 741995, 742032, 742069, 825053, 825095, 825137, 828413, 828455, 828497, 1255613, 1255653, 1255693, 1257433, 1257475, 1257517]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'informatics,')",[1040505]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<np-long>')","[948858, 968748, 988638, 1008528]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.postag.POSEvaluatorTest)')","[51890, 52510, 89019, 101623, 131918, 193494, 194194, 236047, 271590, 329504, 330164, 369345, 407923, 473161, 473901, 518426, 561362, 632093, 632893, 681426, 727098, 801491, 802331, 1021707, 1022037]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=TOP:n(""casa"" <np-idf> <NER:address> <build> F P)\tCasas')","[887694, 900992, 914260, 926502, 945028, 964918, 984808, 1004698]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Ulm')","[1093287, 1144473, 1210237]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'They')",[1046393]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testGetEnd(opennlp.tools.util.SpanTest)')","[38870, 41598, 84795, 100259, 123624, 178794, 181874, 231119, 263868, 315644, 318548, 364769, 399057, 457621, 460877, 513146, 551638, 615293, 618813, 675618, 716802, 783851, 787547, 871879, 874897]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testReadingEvents(opennlp.tools.chunker.ChunkSampleStreamTest)')","[7613, 7637, 7661, 58865, 58896, 58927, 59857, 59888, 59919, 91923, 91947, 91971, 102493, 137192, 137222, 137252, 137333, 137361, 137389, 201369, 201404, 201439, 202489, 202524, 202559, 239435, 239463, 239491, 276502, 276530, 276558, 276633, 276659, 276685, 336929, 336962, 336995, 337985, 338018, 338051, 372491, 372517, 372543, 413559, 413591, 413623, 413710, 413740, 413770, 481486, 481523, 481560, 482670, 482707, 482744, 522056, 522086, 522116, 567541, 567576, 567611, 567707, 567740, 567773, 641093, 641133, 641173, 642373, 642413, 642453, 685419, 685452, 685485, 733639, 733676, 733713, 733815, 733850, 733885, 810941, 810983, 811025, 812285, 812327, 812369, 1075219, 1075259, 1075299, 1075383, 1075425, 1075467]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==ACC:cu')","[890245, 903543, 916607, 928849, 947579, 967469, 987359, 1007249]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==>N:pron-det(""seu"" <si> <poss 3S> DET M P)\tseus')","[888270, 901568, 914788, 927030, 945604, 965494, 985384, 1005274]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===ADVL:adv(""até_mesmo"" <left>)\taté_mesmo')","[889569, 902867, 915983, 928225, 946903, 966793, 986683, 1006573]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'homesick,')","[1097312, 1150073, 1215837]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'number')","[1103269, 1103706, 1158361, 1158969, 1224125, 1224733]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.namefind.NameSampleTest)')","[8642, 68382, 70862, 95643, 103472, 143075, 144418, 212114, 214914, 243775, 281985, 283238, 347060, 349700, 376521, 419842, 421275, 492845, 495805, 526706, 574424, 575992, 653373, 656573, 690534, 740922, 742580, 823835, 827195, 1254453, 1256215]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'part-time')",[1040793]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToUpperCase(opennlp.tools.util.StringUtilTest)')","[34158, 35398, 82203, 99612, 119836, 173474, 174874, 228095, 260336, 310628, 311948, 361961, 395013, 451997, 453477, 509906, 547210, 609213, 610813, 672054, 712118, 777467, 779147, 865167, 865985]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCaseInsensitiveDictionary(opennlp.tools.postag.POSDictionaryTest)')","[48945, 48976, 49007, 50309, 50340, 50371, 87987, 88011, 88035, 130080, 130110, 130140, 190169, 190204, 190239, 191709, 191744, 191779, 234843, 234871, 234899, 269878, 269906, 269934, 326369, 326402, 326435, 327821, 327854, 327887, 368227, 368253, 368279, 405959, 405991, 406023, 469646, 469683, 469720, 471274, 471311, 471348, 517136, 517166, 517196, 559209, 559244, 559279, 628293, 628333, 628373, 630053, 630093, 630133, 680007, 680040, 680073, 724819, 724856, 724893, 797501, 797543, 797585, 799349, 799391, 799433, 1017427, 1017467, 1017507, 1018095, 1018137, 1018179]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sure.')","[1115620, 1175545, 1241309]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 's')","[1120381, 1126223, 1128730, 1129719, 1182159, 1190287, 1193775, 1195151]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'young')","[1094299, 1112124, 1145881, 1170681, 1211645, 1236445]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:n(""episódio"" <np-idf> <event> M S)\tepisódio')","[890739, 904037, 917063, 929305, 948073, 967963, 987853, 1007743]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'name')","[1034169, 1048665, 1049017, 1049753, 1050201, 1063673, 1067641]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.lang.en.HeadRulesTest')","[833243, 833266, 833290, 833313]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWithoutNameTypeAndInvalidData(opennlp.tools.namefind.NameSampleDataStreamTest)')","[65809, 65840, 65871, 67793, 67824, 67855, 94515, 94539, 94563, 141391, 141421, 141451, 209209, 209244, 209279, 211449, 211484, 211519, 242459, 242487, 242515, 280415, 280443, 280471, 344321, 344354, 344387, 346433, 346466, 346499, 375299, 375325, 375351, 418044, 418076, 418108, 489774, 489811, 489848, 492142, 492179, 492216, 525296, 525326, 525356, 572455, 572490, 572525, 650053, 650093, 650133, 652613, 652653, 652693, 688983, 689016, 689049, 738839, 738876, 738913, 820349, 820391, 820433, 823037, 823079, 823121, 1084565, 1084605, 1084645, 1085537, 1085579, 1085621]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'S')","[934140, 934252, 934454, 934566, 934904, 936511, 936660, 936780, 936888, 937023, 942750, 942862, 943294, 943422, 943875, 944037, 944118, 948741, 948828, 949222, 949402, 951009, 954030, 954142, 954344, 954456, 954794, 956401, 956550, 956670, 956778, 956913, 962640, 962752, 963184, 963312, 963765, 963927, 964008, 968631, 968718, 969112, 969292, 970899, 973920, 974032, 974234, 974346, 974684, 976291, 976440, 976560, 976668, 976803, 982530, 982642, 983074, 983202, 983655, 983817, 983898, 988521, 988608, 989002, 989182, 990789, 993810, 993922, 994124, 994236, 994574, 996181, 996330, 996450, 996558, 996693, 1002420, 1002532, 1002964, 1003092, 1003545, 1003707, 1003788, 1008411, 1008498, 1008892, 1009072, 1010679]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWhitespaceTokenization(opennlp.tools.tokenize.SimpleTokenizerTest)')","[7238, 56106, 57222, 90651, 102140, 135191, 135694, 198254, 199514, 237951, 274637, 275106, 333992, 335180, 371113, 411422, 411959, 478193, 479525, 520466, 565200, 565788, 637533, 638973, 683670, 731162, 731784, 807203, 808715, 1070633, 1071275]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'reception')",[1041721]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'tell')","[1116701, 1177049, 1242813]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==ADVL:pp')","[888534, 888726, 901832, 902024, 915030, 915206, 927272, 927448, 945868, 946060, 965758, 965950, 985648, 985840, 1005538, 1005730]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=P:v-fin(""dizer"" <fmc> <mv> PR 3S IND VFIN)\tdiz')","[881148, 894446, 908232, 920474, 935496, 955386, 975276, 995166]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidMethodName(opennlp.tools.cmdline.ArgumentParserTest)')","[1178, 1202, 1226, 12861, 12892, 12923, 15093, 15124, 15155, 73875, 73899, 73923, 97445, 107097, 107127, 107157, 108078, 108106, 108134, 149429, 149464, 149499, 151949, 151984, 152019, 218379, 218407, 218435, 248461, 248489, 248517, 249376, 249402, 249428, 287957, 287990, 288023, 290333, 290366, 290399, 352939, 352965, 352991, 381410, 381442, 381474, 382457, 382487, 382517, 426578, 426615, 426652, 429242, 429279, 429316, 499496, 499526, 499556, 532311, 532346, 532381, 533457, 533490, 533523, 581733, 581773, 581813, 584613, 584653, 584693, 660603, 660636, 660669, 696355, 696392, 696429, 697567, 697602, 697637, 748613, 748655, 748697, 751637, 751679, 751721, 835409, 835449, 835489, 836693, 836735, 836777]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'She')","[1030297, 1033785, 1043865, 1045785, 1060953]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=========H:prop(""Liana_Timm"" <hum> <np-close> F S)\tLiana_Timm')","[883391, 896689, 910293, 922535, 938572, 958462, 978352, 998242]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===ADVL:prp(""em"" <left>)\tem')","[889751, 903049, 916151, 928393, 947085, 966975, 986865, 1006755]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testChunks(opennlp.tools.formats.ad.ADChunkSampleStreamTest)')","[4196, 42590, 43210, 85371, 100465, 125029, 125292, 182994, 183694, 231791, 265175, 265420, 319604, 320264, 365393, 400560, 400841, 462061, 462801, 513866, 553288, 553596, 620093, 620893, 676410, 718550, 718876, 788891, 789731, 877173, 877495]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Gerhard')",[1048729]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'delivery')",[1054553]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'ACC:fcl')","[887670, 900968, 914238, 926480, 945004, 964894, 984784, 1004674]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '1.')",[1038937]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===>N:adjp')","[882359, 895657, 909347, 921589, 937540, 957430, 977320, 997210]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'p.m.!')",[1037209]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'resident,')",[1062937]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '33,')","[1112607, 1171353, 1237117]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:n(""profissional"" <np-count> <np-def> <cjt-head> <Hprof> <left> M/F P)\tprofissionais')","[882431, 895729, 909413, 921655, 937612, 957502, 977392, 997282]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'lived')","[1087951, 1090596, 1108007, 1108651, 1137049, 1140729, 1164953, 1165849, 1202813, 1206493, 1230717, 1231613]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====N<:v-pcp(""destruir"" <np-close> M P)\tdestruídos')","[890479, 903777, 916823, 929065, 947813, 967703, 987593, 1007483]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.Conll02NameSampleStreamTest')","[3704, 124116, 264326, 399583, 552215, 717413]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidChunkSampleArray(opennlp.tools.chunker.ChunkSampleTest)')","[61314, 63298, 93147, 102806, 138996, 204134, 206374, 240863, 278184, 339536, 341648, 373817, 415485, 484409, 486777, 523586, 569650, 644253, 646813, 687102, 735870, 814259, 816947, 1077783, 1079953]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '10')","[1091240, 1141625, 1207389]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:n(""dia"" <np-def> <temp> M S)\tdia')","[879444, 892742, 906662, 918904, 932680, 952570, 972460, 992350]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'prefered')","[1090366, 1140409, 1206173]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '""')","[1121600, 1122428, 1122589, 1123394, 1126867, 1127419, 1127557, 1128477, 1130570, 1130823, 1183855, 1185007, 1185231, 1186351, 1191183, 1191951, 1192143, 1193423, 1196335, 1196687]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Driving')","[1113343, 1172377, 1238141]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '25334')","[1118265, 1179225, 1244989]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.treeinsert.ParserTest')","[662, 106034, 247472, 380273, 531063, 695033]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'very')","[1088365, 1092022, 1096116, 1104695, 1112837, 1117230, 1137625, 1142713, 1148409, 1160345, 1171673, 1177785, 1203389, 1208477, 1214173, 1226109, 1237437, 1243549]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Michel')",[1057689]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'heavy')",[1070393]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDifferentCaseLookup(opennlp.tools.dictionary.DictionaryTest)')","[19154, 22130, 77019, 98198, 111438, 156534, 159894, 222047, 252510, 294656, 297824, 356345, 386043, 434089, 437641, 503426, 537382, 589853, 593693, 664926, 701718, 757139, 761171, 845299, 846797]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingGermanSample(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[44326, 45442, 86235, 100734, 126520, 184954, 186214, 232799, 266564, 321452, 322640, 366329, 402153, 464133, 465465, 514946, 555034, 622333, 623773, 677598, 720398, 791243, 792755, 1010879, 1011529]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'job')","[1039289, 1040825]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Alan')",[1029433]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'accident')","[1113159, 1113941, 1172121, 1173209, 1237885, 1238973]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'saw')","[1115781, 1175769, 1241533]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest)')","[4898, 46062, 46558, 86715, 100879, 127531, 127794, 186914, 187474, 233359, 267505, 267750, 323300, 323828, 366849, 403234, 403515, 466205, 466797, 515546, 556220, 556528, 624573, 625213, 678258, 721654, 721980, 793595, 794267, 1012969, 1013291]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'confrontation')","[1121968, 1184367]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""she's"")","[1115160, 1115988, 1174905, 1176057, 1240669, 1241821]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'tip')","[1109318, 1166777, 1232541]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'woman')","[1112147, 1113550, 1114976, 1170713, 1172665, 1174649, 1236477, 1238429, 1240413]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'restaurant')","[1097565, 1150425, 1216189]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hi')","[1090803, 1092068, 1141017, 1142777, 1206781, 1208541]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'restarting')","[1125832, 1189743]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '1912')","[1109502, 1167033, 1232797]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'My')","[1093379, 1102556, 1117368, 1118081, 1144601, 1157369, 1177977, 1178969, 1210365, 1223133, 1243741, 1244733]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Julie')","[1087583, 1136537, 1202301]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'maps.')","[1111526, 1169849, 1235613]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Miller')","[1050297, 1050777, 1051225, 1061657]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'bring')",[1053049]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingGermanSample(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[44357, 44388, 44419, 45473, 45504, 45535, 86259, 86283, 86307, 126550, 126580, 126610, 184989, 185024, 185059, 186249, 186284, 186319, 232827, 232855, 232883, 266592, 266620, 266648, 321485, 321518, 321551, 322673, 322706, 322739, 366355, 366381, 366407, 402185, 402217, 402249, 464170, 464207, 464244, 465502, 465539, 465576, 514976, 515006, 515036, 555069, 555104, 555139, 622373, 622413, 622453, 623813, 623853, 623893, 677631, 677664, 677697, 720435, 720472, 720509, 791285, 791327, 791369, 792797, 792839, 792881, 1010919, 1010959, 1010999, 1011571, 1011613, 1011655]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkerEvaluatorTest')","[1082755, 1082778, 1082802, 1082825]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testForCorrectFeatures(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[25106, 27338, 78747, 98676, 114283, 163254, 165774, 224063, 255161, 300992, 303368, 358217, 389082, 441193, 443857, 505586, 540712, 597533, 600413, 667302, 705242, 765203, 768227, 852345, 853171]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sitting')",[1065593]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======H:n(""festejo"" <np-def> <occ> M P)\tfestejos')","[889439, 902737, 915863, 928105, 946773, 966663, 986553, 1006443]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====H:n(""capela"" <np-def> <cjt-subj> <build> <left> F S)\tcapela')","[888078, 901376, 914612, 926854, 945412, 965302, 985192, 1005082]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParse(opennlp.tools.postag.POSSampleTest)')","[5834, 49162, 50650, 88059, 101333, 130307, 131050, 190414, 192094, 234927, 270089, 270782, 326600, 328184, 368305, 406202, 406995, 469905, 471681, 517226, 559476, 560344, 628573, 630493, 680106, 725102, 726020, 797795, 799811, 1018313, 1019275]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.dictionary.DictionaryTest')","[849177, 849200, 849224, 849247]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'up')","[1036505, 1043801, 1044569]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.StringListTest')","[850583, 850606, 850630, 850653]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'elderly')","[1107777, 1118978, 1164633, 1180217, 1230397, 1245981]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSSampleEventStreamTest')","[6044, 131656, 271346, 407643, 561055, 726773]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==========,')","[886598, 899896, 913250, 925492, 941779, 961669, 981559, 1001449]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidChunkSampleArray(opennlp.tools.chunker.ChunkSampleTest)')","[61345, 61376, 61407, 63329, 63360, 63391, 93171, 93195, 93219, 139026, 139056, 139086, 204169, 204204, 204239, 206409, 206444, 206479, 240891, 240919, 240947, 278212, 278240, 278268, 339569, 339602, 339635, 341681, 341714, 341747, 373843, 373869, 373895, 415517, 415549, 415581, 484446, 484483, 484520, 486814, 486851, 486888, 523616, 523646, 523676, 569685, 569720, 569755, 644293, 644333, 644373, 646853, 646893, 646933, 687135, 687168, 687201, 735907, 735944, 735981, 814301, 814343, 814385, 816989, 817031, 817073, 1077823, 1077863, 1077903, 1079995, 1080037, 1080079]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hamburg.')","[1091700, 1101107, 1101843, 1118288, 1142265, 1155353, 1156377, 1179257, 1208029, 1221117, 1222141, 1245021]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.Conll02NameSampleStreamTest')","[876219, 876242, 876266, 876289]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '=============,')","[887092, 900390, 913706, 925948, 942273, 962163, 982053, 1001943]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=========,')","[883415, 896713, 910315, 922557, 938596, 958486, 978376, 998266]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'love')",[1046489]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNoTypesToString(opennlp.tools.namefind.NameSampleTest)')","[68537, 68568, 68599, 71017, 71048, 71079, 95763, 95787, 95811, 143225, 143255, 143285, 212289, 212324, 212359, 215089, 215124, 215159, 243915, 243943, 243971, 282125, 282153, 282181, 347225, 347258, 347291, 349865, 349898, 349931, 376651, 376677, 376703, 420002, 420034, 420066, 493030, 493067, 493104, 495990, 496027, 496064, 526856, 526886, 526916, 574599, 574634, 574669, 653573, 653613, 653653, 656773, 656813, 656853, 690699, 690732, 690765, 741107, 741144, 741181, 824045, 824087, 824129, 827405, 827447, 827489, 1254653, 1254693, 1254733, 1256425, 1256467, 1256509]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'provocation')","[1122014, 1184431]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'spontaneously.')","[1098623, 1151897, 1217661]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====P<:np')","[879964, 881607, 884570, 893262, 894905, 897868, 907142, 908655, 911378, 919384, 920897, 923620, 933200, 935955, 939751, 953090, 955845, 959641, 972980, 975735, 979531, 992870, 995625, 999421]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'reply.')","[1096714, 1149241, 1215005]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====N<:v-pcp(""destruir"" <np-close> M P)\tdestruídos')","[888486, 901784, 914986, 927228, 945820, 965710, 985600, 1005490]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Leipzig.')","[1050905, 1051449]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'is')","[1033433, 1033721, 1034201, 1034361, 1043385, 1045497, 1048697, 1049049, 1049369, 1050009, 1050233, 1050425, 1059289, 1061529, 1067673]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSentenceModel(opennlp.tools.tokenize.TokenizerModelTest)')","[7004, 55486, 55982, 90363, 102037, 134557, 134700, 197554, 198114, 237615, 274047, 274180, 333332, 333860, 370801, 410744, 410897, 477453, 478045, 520106, 564456, 564624, 636733, 637373, 683274, 730374, 730552, 806363, 807035, 1027125, 1027287]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testZeroMethods(opennlp.tools.cmdline.ArgumentParserTest)')","[13698, 15930, 74523, 97592, 107907, 150374, 152894, 219135, 249217, 288848, 291224, 353641, 382274, 427577, 430241, 500306, 533256, 582813, 585693, 661494, 697354, 749747, 752771, 836489, 837827]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Silberhornstra§e')","[1091838, 1142457]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====H:prop(""Shopping_Total"" <site> M S)\tShopping_Total')","[878795, 892093, 906065, 918307, 932031, 951921, 971811, 991701]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'forces')","[1258489, 1259281]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testScanning(opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest)')","[5039, 5063, 5087, 46465, 46496, 46527, 46961, 46992, 47023, 86931, 86955, 86979, 100961, 127938, 127968, 127998, 128079, 128107, 128135, 187369, 187404, 187439, 187929, 187964, 187999, 233611, 233639, 233667, 267884, 267912, 267940, 268015, 268041, 268067, 323729, 323762, 323795, 324257, 324290, 324323, 367083, 367109, 367135, 403669, 403701, 403733, 403820, 403850, 403880, 466686, 466723, 466760, 467278, 467315, 467352, 515816, 515846, 515876, 556697, 556732, 556767, 556863, 556896, 556929, 625093, 625133, 625173, 625733, 625773, 625813, 678555, 678588, 678621, 722159, 722196, 722233, 722335, 722370, 722405, 794141, 794183, 794225, 794813, 794855, 794897, 1013759, 1013799, 1013839, 1013923, 1013965, 1014007]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'attention.')",[1040377]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:n(""presença"" <np-def> <state> <per> <right> F S)\tpresença')","[885168, 898466, 911930, 924172, 940349, 960239, 980129, 1000019]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Veilchenstraße')","[1039801, 1047993]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleReading(opennlp.tools.util.ParagraphStreamTest)')","[2699, 2723, 2747, 30593, 30624, 30655, 31957, 31988, 32019, 80883, 80907, 80931, 99238, 117638, 117668, 117698, 117779, 117807, 117835, 169449, 169484, 169519, 170989, 171024, 171059, 226555, 226583, 226611, 258288, 258316, 258344, 258419, 258445, 258471, 306833, 306866, 306899, 308285, 308318, 308351, 360531, 360557, 360583, 392665, 392697, 392729, 392816, 392846, 392876, 447742, 447779, 447816, 449370, 449407, 449444, 508256, 508286, 508316, 544637, 544672, 544707, 544803, 544836, 544869, 604613, 604653, 604693, 606373, 606413, 606453, 670239, 670272, 670305, 709395, 709432, 709469, 709571, 709606, 709641, 772637, 772679, 772721, 774485, 774527, 774569, 860575, 860615, 860655, 860739, 860781, 860823]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testMissingType(opennlp.tools.namefind.NameSampleTest)')","[69157, 69188, 69219, 71637, 71668, 71699, 96243, 96267, 96291, 143825, 143855, 143885, 212989, 213024, 213059, 215789, 215824, 215859, 244475, 244503, 244531, 282685, 282713, 282741, 347885, 347918, 347951, 350525, 350558, 350591, 377171, 377197, 377223, 420642, 420674, 420706, 493770, 493807, 493844, 496730, 496767, 496804, 527456, 527486, 527516, 575299, 575334, 575369, 654373, 654413, 654453, 657573, 657613, 657653, 691359, 691392, 691425, 741847, 741884, 741921, 824885, 824927, 824969, 828245, 828287, 828329, 1255453, 1255493, 1255533, 1257265, 1257307, 1257349]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '5.')",[1033209]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""it's"")","[1035737, 1047929]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'lodge')",[1038745]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.parser.lang.en.HeadRulesTest)')","[476, 500, 524, 9389, 9420, 9451, 10629, 10660, 10691, 72531, 72555, 72579, 97031, 104595, 104625, 104655, 104736, 104764, 104792, 145509, 145544, 145579, 146909, 146944, 146979, 216811, 216839, 216867, 246131, 246159, 246187, 246262, 246288, 246314, 284261, 284294, 284327, 285581, 285614, 285647, 351483, 351509, 351535, 378736, 378768, 378800, 378887, 378917, 378947, 422434, 422471, 422508, 423914, 423951, 423988, 497816, 497846, 497876, 529379, 529414, 529449, 529545, 529578, 529611, 577253, 577293, 577333, 578853, 578893, 578933, 658755, 658788, 658821, 693251, 693288, 693325, 693427, 693462, 693497, 743909, 743951, 743993, 745589, 745631, 745673, 830253, 830293, 830333, 830417, 830459, 830501]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'life-threatening,')",[1052889]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Parliamentary')",[1252583]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'to')","[1028793, 1029753, 1031193, 1031289, 1031737, 1031833, 1032377, 1032825, 1032889, 1034489, 1034905, 1035257, 1037017, 1038649, 1039705, 1039961, 1041369, 1041657, 1042681, 1042745, 1043961, 1044505, 1045017, 1048249, 1048345, 1048889, 1049241, 1049433, 1052185, 1052633, 1053017, 1056217, 1057209, 1058553, 1059673, 1059897, 1061177, 1063769, 1065657, 1066041, 1068281, 1069177]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'found')","[1093885, 1100095, 1103982, 1145305, 1153945, 1159353, 1211069, 1219709, 1225117]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'can')","[1116678, 1121830, 1122658, 1177017, 1184175, 1185327, 1242781]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<hum>')","[934932, 944258, 944288, 944319, 944351, 944384, 944418, 944453, 944489, 944526, 944564, 944602, 954822, 964148, 964178, 964209, 964241, 964274, 964308, 964343, 964379, 964416, 964454, 964492, 974712, 984038, 984068, 984099, 984131, 984164, 984198, 984233, 984269, 984306, 984344, 984382, 994602, 1003928, 1003958, 1003989, 1004021, 1004054, 1004088, 1004123, 1004159, 1004196, 1004234, 1004272]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'than')","[1038777, 1058169]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Natalie')","[1115505, 1175385, 1241149]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'came')","[1111250, 1169465, 1235229]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'through')",[1052441]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '=====,')","[885844, 899142, 912554, 924796, 941025, 960915, 980805, 1000695]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Barmerstr.')",[1059385]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.DictionaryDetokenizerTest')","[1024015, 1024038, 1024062, 1024085]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:location>')","[1119691, 1120013, 1120473, 1120818, 1120910, 1121301, 1121623, 1123532, 1124360, 1124498, 1125303, 1127695, 1128201, 1128385, 1128822, 1131076, 1131260, 1181199, 1181647, 1182287, 1182767, 1182895, 1183439, 1183887, 1186543, 1187695, 1187887, 1189007, 1192335, 1193039, 1193295, 1193903, 1197039, 1197295, 1252391, 1252679, 1252775, 1253031, 1253351, 1253543]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hurry')","[1093103, 1144217, 1209981]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<t[^>]*>', '')","[878075, 891373, 905405, 917647, 931311, 951201, 971091, 990981]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<clb-fs>')","[937204, 949458, 957094, 969348, 976984, 989238, 996874, 1009128]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'aren')","[1127212, 1191663]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hospital.')","[1115022, 1174713, 1240477]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:n(""parceria"" <np-def> <com> <HH> F S)\tparceria')","[881503, 894801, 908559, 920801, 935851, 955741, 975631, 995521]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'home')","[1107455, 1117759, 1118127, 1131467, 1164185, 1178521, 1179033, 1197583, 1229949, 1244285, 1244797]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'with')","[1030233, 1031961, 1037977, 1040313, 1053881, 1055033, 1069433]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSSampleTest')","[1021015, 1021038, 1021062, 1021085]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:prop(""Armindo_Trevisan"" <hum> <np-close> M S)\tArmindo_Trevisan')","[885610, 898908, 912338, 924580, 940791, 960681, 980571, 1000461]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'on')","[1031513, 1037689, 1060153]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'made')","[1100739, 1154841, 1220605]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'badly')","[1113297, 1172313, 1238077]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'desk')",[1041753]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sounds')",[1034713]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""didn't"")","[1094391, 1146009, 1211773]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'wedding')",[1037529]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingSample(opennlp.tools.formats.LeipzigDoccatSampleStreamTest)')","[3962, 42094, 42466, 85179, 100383, 124515, 124658, 182434, 182854, 231567, 264697, 264830, 319076, 319472, 365185, 400010, 400163, 461469, 461913, 513626, 552684, 552852, 619453, 619933, 676146, 717910, 718088, 788219, 788723, 876329, 876491]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ambulance.')","[1105914, 1162041, 1227805]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '56,')",[1036601]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:n(""dia"" <np-def> <temp> M S)\tdia')","[878459, 891757, 905757, 917999, 931695, 951585, 971475, 991365]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=======H:n(""festejo"" <np-def> <occ> M P)\tfestejos')","[889465, 902763, 915887, 928129, 946799, 966689, 986579, 1006469]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '17818')","[1095035, 1146905, 1212669]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'human')","[1129213, 1130340, 1194447, 1196015]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'run')","[1128523, 1193487]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWhitespaceTokenization(opennlp.tools.tokenize.SimpleTokenizerTest)')","[7262, 7286, 7310, 56137, 56168, 56199, 57253, 57284, 57315, 90675, 90699, 90723, 102160, 135221, 135251, 135281, 135722, 135750, 135778, 198289, 198324, 198359, 199549, 199584, 199619, 237979, 238007, 238035, 274665, 274693, 274721, 275132, 275158, 275184, 334025, 334058, 334091, 335213, 335246, 335279, 371139, 371165, 371191, 411454, 411486, 411518, 411989, 412019, 412049, 478230, 478267, 478304, 479562, 479599, 479636, 520496, 520526, 520556, 565235, 565270, 565305, 565821, 565854, 565887, 637573, 637613, 637653, 639013, 639053, 639093, 683703, 683736, 683769, 731199, 731236, 731273, 731819, 731854, 731889, 807245, 807287, 807329, 808757, 808799, 808841, 1070673, 1070713, 1070753, 1071317, 1071359, 1071401]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Gauting.')",[1064249]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'smalltown')","[1119300, 1180665, 1246429]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'this')","[1094621, 1146329, 1212093]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '</html>')",[1132483]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Gina')","[1108536, 1165689, 1231453]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.util.StringListTest)')","[21169, 21200, 21231, 23525, 23556, 23587, 77715, 77739, 77763, 112445, 112475, 112505, 158809, 158844, 158879, 161469, 161504, 161539, 222859, 222887, 222915, 253449, 253477, 253505, 296801, 296834, 296867, 299309, 299342, 299375, 357099, 357125, 357151, 387118, 387150, 387182, 436494, 436531, 436568, 439306, 439343, 439380, 504296, 504326, 504356, 538559, 538594, 538629, 592453, 592493, 592533, 595493, 595533, 595573, 665883, 665916, 665949, 702963, 703000, 703037, 759869, 759911, 759953, 763061, 763103, 763145, 848065, 848105, 848145, 849069, 849111, 849153]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'proposed')",[1044985]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Schmidt')","[1090941, 1092252, 1141209, 1143033, 1206973, 1208797]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.PosSampleStreamTest')","[830103, 830126, 830150, 830173]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.StringListTest)')","[20921, 20952, 20983, 23277, 23308, 23339, 77523, 77547, 77571, 112205, 112235, 112265, 158529, 158564, 158599, 161189, 161224, 161259, 222635, 222663, 222691, 253225, 253253, 253281, 296537, 296570, 296603, 299045, 299078, 299111, 356891, 356917, 356943, 386862, 386894, 386926, 436198, 436235, 436272, 439010, 439047, 439084, 504056, 504086, 504116, 538279, 538314, 538349, 592133, 592173, 592213, 595173, 595213, 595253, 665619, 665652, 665685, 702667, 702704, 702741, 759533, 759575, 759617, 762725, 762767, 762809, 847745, 847785, 847825, 848733, 848775, 848817]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'soon')",[1035449]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<np-def>')","[934168, 936399, 936690, 936915, 942778, 943034, 943204, 943326, 943902, 949013, 949252, 949983, 950919, 954058, 956289, 956580, 956805, 962668, 962924, 963094, 963216, 963792, 968903, 969142, 969873, 970809, 973948, 976179, 976470, 976695, 982558, 982814, 982984, 983106, 983682, 988793, 989032, 989763, 990699, 993838, 996069, 996360, 996585, 1002448, 1002704, 1002874, 1002996, 1003572, 1008683, 1008922, 1009653, 1010589]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'shoes')",[1048505]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Myung')","[1124038, 1187247]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Convulsed')",[1053849]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Abercrombie')","[1247027, 1249693]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'North')","[1120496, 1121324, 1121646, 1124705, 1127718, 1129167, 1129673, 1130294, 1131398, 1182319, 1183471, 1183919, 1188175, 1192367, 1194383, 1195087, 1195951, 1197487]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Now')","[1118840, 1180025, 1245789]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLeadingWithContraction(opennlp.tools.formats.ad.ADParagraphStreamTest)')","[4313, 42962, 43954, 85563, 100527, 125406, 125669, 183414, 184534, 232015, 265526, 265771, 320000, 321056, 365601, 400963, 401244, 462505, 463689, 514106, 553730, 554038, 620573, 621853, 676674, 719018, 719344, 789395, 790739, 904519, 904841]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'singer')",[1057593]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEvaluatorNoError(opennlp.tools.chunker.ChunkerEvaluatorTest)')","[61841, 61872, 61903, 64321, 64352, 64383, 93459, 93483, 93507, 139523, 139553, 139583, 204729, 204764, 204799, 207529, 207564, 207599, 241227, 241255, 241283, 278675, 278703, 278731, 340097, 340130, 340163, 342737, 342770, 342803, 374155, 374181, 374207, 416048, 416080, 416112, 485038, 485075, 485112, 487998, 488035, 488072, 523976, 524006, 524036, 570267, 570302, 570337, 644933, 644973, 645013, 648133, 648173, 648213, 687531, 687564, 687597, 736523, 736560, 736597, 814973, 815015, 815057, 818333, 818375, 818417, 1080581, 1080621, 1080661, 1080913, 1080955, 1080997]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '112,')","[1034969, 1051353]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:n(""momento"" <np-def> <f-q> M S)\tmomento')","[884154, 897452, 910994, 923236, 939335, 959225, 979115, 999005]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====>A:adv(""mais_de"" <quant>)\tmais_de')","[882383, 895681, 909369, 921611, 937564, 957454, 977344, 997234]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Heartfield')",[1258863]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====>N:art(""o"" <artd> <-sam> DET M S)\to')","[879990, 893288, 907166, 919408, 933226, 953116, 973006, 992896]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'arrived')","[1043609, 1054041, 1064345]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPOSTagger(opennlp.tools.postag.POSTaggerMETest)')","[5951, 50402, 51518, 88635, 101479, 131164, 131427, 191814, 193074, 235599, 270888, 271133, 327920, 329108, 368929, 407117, 407398, 471385, 472717, 517946, 560478, 560786, 630173, 631613, 680898, 726162, 726488, 799475, 800987, 1020375, 1020697]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""I'm"")","[1035833, 1036633, 1040409, 1040633, 1041273, 1069369]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'go')","[1097749, 1150681, 1216445]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Highfly-Hotel')",[1041881]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'went')","[1096944, 1108421, 1149561, 1165529, 1215325, 1231293]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'injured.')",[1062393]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'enjoy')",[1061881]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Bauer.')",[1040153]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====>N:art(""o"" <artd> <-sam> DET F S)\ta')","[891051, 904349, 917351, 929593, 948385, 968275, 988165, 1008055]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'postcode')","[1090504, 1140601, 1206365]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'N\x9frnberg')","[1092367, 1143193]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'no')","[1088917, 1111365, 1138393, 1169625, 1204157, 1235389]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'start')",[1052217]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '5,')","[1116839, 1177241, 1243005]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'danger.')",[1064953]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Clara')","[1090182, 1140153, 1205917]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====>A:adv(""mais_de"" <quant>)\tmais_de')","[884362, 897660, 911186, 923428, 939543, 959433, 979323, 999213]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""Heidelberg's"")",[1070073]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'away.')","[1106397, 1162713, 1228477]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Scott')","[1126430, 1190575]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====CO:conj-c(""e"" <co-subj>)\te')","[889517, 902815, 915935, 928177, 946851, 966741, 986631, 1006521]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Schubert')",[1063961]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', 'STA:fcl')","[879158, 881295, 883946, 889101, 892456, 894593, 897244, 902399, 906398, 908367, 910802, 915551, 918640, 920609, 923044, 927793, 932394, 935643, 939127, 946435, 952284, 955533, 959017, 966325, 972174, 975423, 978907, 986215, 992064, 995313, 998797, 1006105]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'good.')",[1034745]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'but')","[1125694, 1189551]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'drove')",[1055897]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=======H:n(""cultura"" <np-def> <ac> F S)\tcultura')","[884882, 898180, 911666, 923908, 940063, 959953, 979843, 999733]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'c')",[1131907]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'felt')",[1042073]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSEvaluatorTest')","[6161, 132033, 271697, 408046, 561497, 727241]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'tourist')","[1041529, 1059545]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'bring')","[1105822, 1161913, 1227677]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:prp(""de"" <sam-> <np-close>)\tde')","[884518, 897816, 911330, 923572, 939699, 959589, 979479, 999369]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'personal')","[1106696, 1163129, 1228893]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:n(""profissional"" <np-count> <np-def> <cjt-head> <Hprof> <left> M/F P)\tprofissionais')","[884440, 897738, 911258, 923500, 939621, 959511, 979401, 999291]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseEmptyString(opennlp.tools.postag.POSSampleTest)')","[49441, 49472, 49503, 50929, 50960, 50991, 88275, 88299, 88323, 130577, 130607, 130637, 190729, 190764, 190799, 192409, 192444, 192479, 235179, 235207, 235235, 270341, 270369, 270397, 326897, 326930, 326963, 328481, 328514, 328547, 368539, 368565, 368591, 406490, 406522, 406554, 470238, 470275, 470312, 472014, 472051, 472088, 517496, 517526, 517556, 559791, 559826, 559861, 628933, 628973, 629013, 630853, 630893, 630933, 680403, 680436, 680469, 725435, 725472, 725509, 798173, 798215, 798257, 800189, 800231, 800273, 1018673, 1018713, 1018753, 1019653, 1019695, 1019737]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'October')","[1088825, 1138265, 1204029]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:num(""98"" <card> M/F P)\t98')","[882407, 895705, 909391, 921633, 937588, 957478, 977368, 997258]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====APP:np')","[883151, 896449, 910073, 922315, 938332, 958222, 978112, 998002]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=,')","[884180, 885246, 887170, 889023, 897478, 898544, 900468, 902321, 911018, 912002, 913778, 915479, 923260, 924244, 926020, 927721, 939361, 940427, 942351, 946357, 959251, 960317, 962241, 966247, 979141, 980207, 982131, 986137, 999031, 1000097, 1002021, 1006027]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '""Mondnacht""')",[1036761]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '""Twentytwo"".')",[1047449]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'then,')",[1039577]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'definitely')",[1051097]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', ':')","[881196, 894494, 908276, 920518, 935544, 955434, 975324, 995214]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'parse', '^A\\d+$', 'A1')","[879132, 881269, 883920, 888919, 892430, 894567, 897218, 902217, 906374, 908343, 910778, 915383, 918616, 920585, 923020, 927625, 932368, 935617, 939101, 946253, 952258, 955507, 958991, 966143, 972148, 975397, 978881, 986033, 992038, 995287, 998771, 1005923]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testMainHelpMessage(opennlp.tools.cmdline.CLITest)')","[944, 968, 992, 12117, 12148, 12179, 12613, 12644, 12675, 73587, 73611, 73635, 97342, 106463, 106493, 106523, 106724, 106752, 106780, 148589, 148624, 148659, 149149, 149184, 149219, 218043, 218071, 218099, 247871, 247899, 247927, 248114, 248140, 248166, 287165, 287198, 287231, 287693, 287726, 287759, 352627, 352653, 352679, 380732, 380764, 380796, 381011, 381041, 381071, 425690, 425727, 425764, 426282, 426319, 426356, 499136, 499166, 499196, 531567, 531602, 531637, 531873, 531906, 531939, 580773, 580813, 580853, 581413, 581453, 581493, 660207, 660240, 660273, 695567, 695604, 695641, 695891, 695926, 695961, 747605, 747647, 747689, 748277, 748319, 748361, 834237, 834277, 834317, 834561, 834603, 834645]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingSpanishSample(opennlp.tools.formats.Conll02NameSampleStreamTest)')","[3728, 39242, 41846, 84891, 100280, 123881, 124144, 179214, 182154, 231231, 264107, 264352, 316040, 318812, 364873, 399332, 399613, 458065, 461173, 513266, 551940, 552248, 615773, 619133, 675750, 717122, 717448, 784355, 787883, 875157, 875479]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'managed')","[1105500, 1161465, 1227229]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Akaka')","[1247539, 1250205]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=P:v-fin(""dizer"" <fmc> <mv> PR 3S IND VFIN)\tdiz')","[881867, 895165, 908895, 921137, 936215, 956105, 975995, 995885]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'much')","[1091033, 1104718, 1141337, 1160377, 1207101, 1226141]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==CJT:num(""545"" <cjt-acc> <NER:prednum> <card> <right> M/F P)\t545')","[878915, 892213, 906175, 918417, 932151, 952041, 971931, 991821]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'jacket,')",[1052505]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'injured')","[1105063, 1160857, 1226621]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '11')","[1095380, 1147385, 1213149]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==N<:v-pcp(""confirmar"" <np-close> F S)\tconfirmada')","[885220, 898518, 911978, 924220, 940401, 960291, 980181, 1000071]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'explained')","[1112377, 1171033, 1236797]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Spanish')",[1042425]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'complete')",[1047833]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'too.')",[1046969]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'desk')","[1097036, 1149689, 1215453]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Schubert')","[1114516, 1174009, 1239773]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testRetrievingContent(opennlp.tools.sentdetect.SentenceSampleTest)')","[47457, 47488, 47519, 48077, 48108, 48139, 87315, 87339, 87363, 128829, 128859, 128889, 188489, 188524, 188559, 189189, 189224, 189259, 234059, 234087, 234115, 268713, 268741, 268769, 324785, 324818, 324851, 325445, 325478, 325511, 367499, 367525, 367551, 404622, 404654, 404686, 467870, 467907, 467944, 468610, 468647, 468684, 516296, 516326, 516356, 557743, 557778, 557813, 626373, 626413, 626453, 627173, 627213, 627253, 679083, 679116, 679149, 723267, 723304, 723341, 795485, 795527, 795569, 796325, 796367, 796409, 1015185, 1015225, 1015265, 1015517, 1015559, 1015601]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'A')","[1113734, 1172921, 1238685]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Last')","[1028697, 1031097, 1054425, 1058873]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'small')","[1054649, 1057977]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsWithEqual(opennlp.tools.util.SpanTest)')","[37289, 37320, 37351, 40017, 40048, 40079, 83571, 83595, 83619, 122094, 122124, 122154, 177009, 177044, 177079, 180089, 180124, 180159, 229691, 229719, 229747, 262440, 262468, 262496, 313961, 313994, 314027, 316865, 316898, 316931, 363443, 363469, 363495, 397425, 397457, 397489, 455734, 455771, 455808, 458990, 459027, 459064, 511616, 511646, 511676, 549853, 549888, 549923, 613253, 613293, 613333, 616773, 616813, 616853, 673935, 673968, 674001, 714915, 714952, 714989, 781709, 781751, 781793, 785405, 785447, 785489, 869839, 869879, 869919, 872755, 872797, 872839]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'student,')",[1056249]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '11,')",[1037753]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleCount(opennlp.tools.formats.ad.ADChunkSampleStreamTest)')","[42745, 42776, 42807, 43365, 43396, 43427, 85491, 85515, 85539, 125179, 125209, 125239, 183169, 183204, 183239, 183869, 183904, 183939, 231931, 231959, 231987, 265315, 265343, 265371, 319769, 319802, 319835, 320429, 320462, 320495, 365523, 365549, 365575, 400720, 400752, 400784, 462246, 462283, 462320, 462986, 463023, 463060, 514016, 514046, 514076, 553463, 553498, 553533, 620293, 620333, 620373, 621093, 621133, 621173, 676575, 676608, 676641, 718735, 718772, 718809, 789101, 789143, 789185, 789941, 789983, 790025, 877373, 877413, 877453, 877705, 877747, 877789]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'available.')",[1048601]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==>N:art(""o"" <artd> DET M S)\to')","[881789, 895087, 908823, 921065, 936137, 956027, 975917, 995807]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:n(""momento"" <np-def> <f-q> M S)\tmomento')","[884128, 897426, 910970, 923212, 939309, 959199, 979089, 998979]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'my')","[1088664, 1090274, 1090826, 1092597, 1094851, 1116011, 1117713, 1117805, 1119369, 1138041, 1140281, 1141049, 1143513, 1146649, 1176089, 1178457, 1178585, 1180761, 1203805, 1206045, 1206813, 1209277, 1212413, 1241853, 1244221, 1244349, 1246525]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'addresses')","[1107478, 1164217, 1229981]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'just')","[1086916, 1135609, 1201373]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""I've"")","[1092482, 1101383, 1143353, 1155737, 1209117, 1221501]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'at')","[1035321, 1035929, 1036793, 1037177, 1039769, 1045081, 1061017, 1062777, 1064089, 1065721, 1066841, 1067161, 1070041]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest')","[853489, 853512, 853536, 853559]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'afford')","[1094506, 1146169, 1211933]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'it.')",[1067321]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'shoes')","[1102165, 1156825, 1222589]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Where')",[1046169]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'forcefully')","[1129604, 1194991]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'live')","[1119047, 1180313, 1246077]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'asked')","[1042201, 1060793]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==>N:art(""o"" <artd> DET F S)\ta')","[885090, 898388, 911858, 924100, 940271, 960161, 980051, 999941]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDropOverlappingSpans(opennlp.tools.namefind.NameFinderMETest)')","[66894, 69870, 95067, 103346, 142218, 210434, 213794, 243103, 281186, 345476, 348644, 375897, 418927, 491069, 494621, 525986, 573422, 651453, 655293, 689742, 739862, 821819, 825851, 1132683, 1133813]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.SpanTest')","[875797, 875820, 875844, 875867]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'street')","[1061049, 1063097]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<temp>')","[934196, 954086, 973976, 993866]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'directly')","[1105868, 1161977, 1227741]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'lady,')","[1107800, 1164665, 1230429]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'It')","[1045465, 1059257]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.dictionary.DictionaryTest)')","[18658, 21634, 76635, 98114, 110958, 155974, 159334, 221599, 252062, 294128, 297296, 355929, 385531, 433497, 437049, 502946, 536822, 589213, 593053, 664398, 701126, 756467, 760499, 844659, 846125]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'show')",[1043993]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""hadnt't"")",[1029145]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'driver')","[1091493, 1113251, 1141977, 1172249, 1207741, 1238013]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'living')","[1123164, 1186031]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCrosses(opennlp.tools.util.SpanTest)')","[38002, 40730, 84123, 100112, 122784, 177814, 180894, 230335, 263084, 314720, 317624, 364041, 398161, 456585, 459841, 512306, 550658, 614173, 617693, 674694, 715766, 782675, 786371, 870759, 873721]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Heinrich-Heine-Stra§e')","[1104534, 1160121]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'opened')","[1053401, 1057785]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.eval.MeanTest')","[3002, 119454, 259980, 394605, 546763, 711645]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '12')","[1091861, 1142489, 1208253]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsAllLowerCaseLetter(opennlp.tools.util.featuregen.StringPatternTest)')","[26005, 26036, 26067, 28485, 28516, 28547, 79347, 79371, 79395, 115170, 115200, 115230, 164269, 164304, 164339, 167069, 167104, 167139, 224763, 224791, 224819, 255988, 256016, 256044, 301949, 301982, 302015, 304589, 304622, 304655, 358867, 358893, 358919, 390029, 390061, 390093, 442266, 442303, 442340, 445226, 445263, 445300, 506336, 506366, 506396, 541749, 541784, 541819, 598693, 598733, 598773, 601893, 601933, 601973, 668127, 668160, 668193, 706339, 706376, 706413, 766421, 766463, 766505, 769781, 769823, 769865, 854279, 854319, 854359, 856235, 856277, 856319]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSize(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[4454, 4478, 4502, 43489, 43520, 43551, 44729, 44760, 44791, 85779, 85803, 85827, 100609, 125813, 125843, 125873, 126314, 126342, 126370, 184009, 184044, 184079, 185409, 185444, 185479, 232267, 232295, 232323, 265905, 265933, 265961, 266372, 266398, 266424, 320561, 320594, 320627, 321881, 321914, 321947, 365835, 365861, 365887, 401398, 401430, 401462, 401933, 401963, 401993, 463134, 463171, 463208, 464614, 464651, 464688, 514376, 514406, 514436, 554207, 554242, 554277, 554793, 554826, 554859, 621253, 621293, 621333, 622853, 622893, 622933, 676971, 677004, 677037, 719523, 719560, 719597, 720143, 720178, 720213, 790109, 790151, 790193, 791789, 791831, 791873, 929793, 929833, 929873, 930437, 930479, 930521]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'owner')","[1102096, 1156729, 1222493]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '030/827234.')",[1050489]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'beautiful')","[1090665, 1140825, 1206589]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""I'd"")","[1087169, 1091723, 1102740, 1116310, 1135961, 1142297, 1157625, 1176505, 1201725, 1208061, 1223389, 1242269]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Bauer')","[1095679, 1147801, 1213565]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======>N:art(""o"" <artd> <-sam> DET F S)\ta')","[884804, 898102, 911594, 923836, 939985, 959875, 979765, 999655]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSetEncodingParameter(opennlp.tools.cmdline.ArgumentParserTest)')","[13605, 13636, 13667, 15837, 15868, 15899, 74451, 74475, 74499, 107817, 107847, 107877, 150269, 150304, 150339, 152789, 152824, 152859, 219051, 219079, 219107, 249133, 249161, 249189, 288749, 288782, 288815, 291125, 291158, 291191, 353563, 353589, 353615, 382178, 382210, 382242, 427466, 427503, 427540, 430130, 430167, 430204, 500216, 500246, 500276, 533151, 533186, 533221, 582693, 582733, 582773, 585573, 585613, 585653, 661395, 661428, 661461, 697243, 697280, 697317, 749621, 749663, 749705, 752645, 752687, 752729, 836369, 836409, 836449, 837701, 837743, 837785]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCheckMergedContractions(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[43613, 43644, 43675, 44853, 44884, 44915, 85875, 85899, 85923, 125933, 125963, 125993, 184149, 184184, 184219, 185549, 185584, 185619, 232379, 232407, 232435, 266017, 266045, 266073, 320693, 320726, 320759, 322013, 322046, 322079, 365939, 365965, 365991, 401526, 401558, 401590, 463282, 463319, 463356, 464762, 464799, 464836, 514496, 514526, 514556, 554347, 554382, 554417, 621413, 621453, 621493, 623013, 623053, 623093, 677103, 677136, 677169, 719671, 719708, 719745, 790277, 790319, 790361, 791957, 791999, 792041, 929953, 929993, 930033, 930605, 930647, 930689]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.ParagraphStreamTest')","[2651, 117723, 258367, 392756, 544737, 709501]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'celebrated')","[1093563, 1144857, 1210621]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'test3FoldCV(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[32453, 32484, 32515, 33817, 33848, 33879, 81843, 81867, 81891, 119112, 119142, 119172, 171549, 171584, 171619, 173089, 173124, 173159, 227675, 227703, 227731, 259662, 259690, 259718, 308813, 308846, 308879, 310265, 310298, 310331, 361571, 361597, 361623, 394239, 394271, 394303, 449962, 449999, 450036, 451590, 451627, 451664, 509456, 509486, 509516, 546361, 546396, 546431, 607013, 607053, 607093, 608773, 608813, 608853, 671559, 671592, 671625, 711219, 711256, 711293, 775157, 775199, 775241, 777005, 777047, 777089, 863539, 863579, 863619, 864207, 864249, 864291]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====,')","[885818, 899116, 912530, 924772, 940999, 960889, 980779, 1000669]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '34.')",[1059417]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWithTypesToString(opennlp.tools.namefind.NameSampleTest)')","[68661, 68692, 68723, 71141, 71172, 71203, 95859, 95883, 95907, 143345, 143375, 143405, 212429, 212464, 212499, 215229, 215264, 215299, 244027, 244055, 244083, 282237, 282265, 282293, 347357, 347390, 347423, 349997, 350030, 350063, 376755, 376781, 376807, 420130, 420162, 420194, 493178, 493215, 493252, 496138, 496175, 496212, 526976, 527006, 527036, 574739, 574774, 574809, 653733, 653773, 653813, 656933, 656973, 657013, 690831, 690864, 690897, 741255, 741292, 741329, 824213, 824255, 824297, 827573, 827615, 827657, 1254813, 1254853, 1254893, 1256593, 1256635, 1256677]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'delicious')","[1098117, 1151193, 1216957]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'ancestors.')",[1029945]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest')","[847115, 847138, 847162, 847185]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==========,')","[883487, 896785, 910381, 922623, 938668, 958558, 978448, 998338]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Sure,')",[1047897]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseSimpleSample(opennlp.tools.postag.WordTagSampleStreamTest)')","[5624, 5648, 5672, 48201, 48232, 48263, 49069, 49100, 49131, 87603, 87627, 87651, 101208, 129463, 129493, 129523, 129604, 129632, 129660, 189329, 189364, 189399, 190309, 190344, 190379, 234395, 234423, 234451, 269303, 269331, 269359, 269434, 269460, 269486, 325577, 325610, 325643, 326501, 326534, 326567, 367811, 367837, 367863, 405300, 405332, 405364, 405451, 405481, 405511, 468758, 468795, 468832, 469794, 469831, 469868, 516656, 516686, 516716, 558487, 558522, 558557, 558653, 558686, 558719, 627333, 627373, 627413, 628453, 628493, 628533, 679479, 679512, 679545, 724055, 724092, 724129, 724231, 724266, 724301, 796493, 796535, 796577, 797669, 797711, 797753, 1016525, 1016565, 1016605, 1016689, 1016731, 1016773]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'possible')",[1049401]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseEmptyString(opennlp.tools.postag.POSSampleTest)')","[49410, 50898, 88251, 101395, 130547, 190694, 192374, 235151, 270313, 326864, 328448, 368513, 406458, 470201, 471977, 517466, 559756, 628893, 630813, 680370, 725398, 798131, 800147, 1018633, 1019611]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Sander')","[1102671, 1157529, 1223293]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===========APP:np')","[883583, 896881, 910469, 922711, 938764, 958654, 978544, 998434]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'notable')","[1119461, 1180889, 1246653]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=P:v-fin(""dizer"" <fmc> <mv> PR 3S IND VFIN)\tdiz')","[881893, 895191, 908919, 921161, 936241, 956131, 976021, 995911]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'studies')","[1119392, 1180793, 1246557]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNicePrint(opennlp.tools.chunker.ChunkSampleTest)')","[60446, 62430, 92475, 102659, 138156, 203154, 205394, 240079, 277400, 338612, 340724, 373089, 414589, 483373, 485741, 522746, 568670, 643133, 645693, 686178, 734834, 813083, 815771, 1076663, 1078777]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'out')","[1086548, 1089515, 1115183, 1117667, 1129558, 1135097, 1139225, 1174937, 1178393, 1194927, 1200861, 1204989, 1240701, 1244157]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'line')","[1108927, 1166233, 1231997]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'town')","[1109962, 1167673, 1233437]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'brought')","[1107616, 1114930, 1164409, 1174585, 1230173, 1240349]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '========APP:np')","[883367, 896665, 910271, 922513, 938548, 958438, 978328, 998218]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""Don't"")",[1047129]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Please')",[1036889]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'first')","[1032985, 1038105, 1057849, 1068121]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'country')",[1029849]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'week.')",[1055417]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'read')","[1095748, 1111457, 1147897, 1169753, 1213661, 1235517]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.ChunkSampleStreamTest')","[829681, 829704, 829728, 829751]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenizer(opennlp.tools.tokenize.TokenizerMETest)')","[55858, 56726, 90555, 102119, 134934, 197974, 198954, 237839, 274398, 333728, 334652, 371009, 411147, 477897, 478933, 520346, 564898, 637213, 638333, 683538, 730842, 806867, 808043, 1027899, 1028229]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'trauma,')",[1064793]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'He')","[1109203, 1109755, 1111549, 1114102, 1166617, 1167385, 1169881, 1173433, 1232381, 1233149, 1235645, 1239197]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'against')","[1129627, 1131490, 1195023, 1197615]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'couple,')","[1094345, 1145945, 1211709]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'completely')",[1060121]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'saw')",[1065529]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'ambulance.')",[1053177]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======,')","[886104, 899402, 912794, 925036, 941285, 961175, 981065, 1000955]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'taxi')","[1091102, 1141433, 1207197]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEmtpyEventStream(opennlp.tools.util.AbstractEventStreamTest)')","[36545, 36576, 36607, 39149, 39180, 39211, 83091, 83115, 83139, 121357, 121387, 121417, 176169, 176204, 176239, 179109, 179144, 179179, 229131, 229159, 229187, 261753, 261781, 261809, 313169, 313202, 313235, 315941, 315974, 316007, 362923, 362949, 362975, 396638, 396670, 396702, 454846, 454883, 454920, 457954, 457991, 458028, 511016, 511046, 511076, 548991, 549026, 549061, 612293, 612333, 612373, 615653, 615693, 615733, 673275, 673308, 673341, 714003, 714040, 714077, 780701, 780743, 780785, 784229, 784271, 784313, 868609, 868649, 868689, 868941, 868983, 869025]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 't')","[1127258, 1191727]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.StringPatternTest')","[2183, 116095, 256851, 391016, 542829, 707481]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCompareToEquals(opennlp.tools.util.SpanTest)')","[38374, 41102, 84411, 100175, 123144, 178234, 181314, 230671, 263420, 315116, 318020, 364353, 398545, 457029, 460285, 512666, 551078, 614653, 618173, 675090, 716210, 783179, 786875, 871239, 874225]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'their')",[1055321]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCompareToHigher(opennlp.tools.util.SpanTest)')","[38281, 38312, 38343, 41009, 41040, 41071, 84339, 84363, 84387, 123054, 123084, 123114, 178129, 178164, 178199, 181209, 181244, 181279, 230587, 230615, 230643, 263336, 263364, 263392, 315017, 315050, 315083, 317921, 317954, 317987, 364275, 364301, 364327, 398449, 398481, 398513, 456918, 456955, 456992, 460174, 460211, 460248, 512576, 512606, 512636, 550973, 551008, 551043, 614533, 614573, 614613, 618053, 618093, 618133, 674991, 675024, 675057, 716099, 716136, 716173, 783053, 783095, 783137, 786749, 786791, 786833, 871119, 871159, 871199, 874099, 874141, 874183]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenizerMETest')","[1071929, 1071952, 1071976, 1071999]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'German')",[1060345]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Snyder')","[1126453, 1127465, 1190607, 1192015]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'out')","[1028857, 1032441, 1064857, 1067897]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'SOURCE: ref=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=-6"" source=""SELVA 1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=""')","[880740, 894038, 907858, 920100, 935088, 954978, 974868, 994758]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====P<:n(""outubro"" <np-idf> <NER2> M S)\toutubro')","[878555, 891853, 905845, 918087, 931791, 951681, 971571, 991461]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'happened')","[1114194, 1173561, 1239325]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Ottobrunn.')",[1054937]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEventOutcomes(opennlp.tools.tokenize.TokSpanEventStreamTest)')","[6911, 6935, 6959, 55145, 55176, 55207, 55641, 55672, 55703, 90291, 90315, 90339, 102016, 134330, 134360, 134390, 134471, 134499, 134527, 197169, 197204, 197239, 197729, 197764, 197799, 237531, 237559, 237587, 273836, 273864, 273892, 273967, 273993, 274019, 332969, 333002, 333035, 333497, 333530, 333563, 370723, 370749, 370775, 410501, 410533, 410565, 410652, 410682, 410712, 477046, 477083, 477120, 477638, 477675, 477712, 520016, 520046, 520076, 564189, 564224, 564259, 564355, 564388, 564421, 636293, 636333, 636373, 636933, 636973, 637013, 683175, 683208, 683241, 730091, 730128, 730165, 730267, 730302, 730337, 805901, 805943, 805985, 806573, 806615, 806657, 1026743, 1026783, 1026823, 1026907, 1026949, 1026991]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.ParagraphStreamTest')","[862909, 862932, 862956, 862979]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'delivery')","[1106972, 1163513, 1229277]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'looking')","[1096622, 1149113, 1214877]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Yesterday,')",[1043545]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'be')","[1031769, 1035289, 1037049]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:prp(""com_relação_a"" <sam-> <left>)\tCom_relação_a')","[881347, 894645, 908415, 920657, 935695, 955585, 975475, 995365]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseInvalidVersion2(opennlp.tools.util.VersionTest)')","[22781, 22812, 22843, 24269, 24300, 24331, 78099, 78123, 78147, 113062, 113092, 113122, 160629, 160664, 160699, 162309, 162344, 162379, 223307, 223335, 223363, 254024, 254052, 254080, 298517, 298550, 298583, 300101, 300134, 300167, 357515, 357541, 357567, 387777, 387809, 387841, 438418, 438455, 438492, 440194, 440231, 440268, 504776, 504806, 504836, 539281, 539316, 539351, 594533, 594573, 594613, 596453, 596493, 596533, 666411, 666444, 666477, 703727, 703764, 703801, 762053, 762095, 762137, 764069, 764111, 764153, 849807, 849847, 849887, 850475, 850517, 850559]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:organization>')","[1126614, 1132069, 1132253, 1190831, 1252295, 1252519]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'frequented')","[1110560, 1168505, 1234269]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'flames')","[1105316, 1161209, 1226973]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '15,')","[1106627, 1113067, 1163033, 1171993, 1228797, 1237757]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'care')","[1106765, 1163225, 1228989]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""weren't"")","[1105684, 1161721, 1227485]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ad.ADChunkSampleStreamTest')","[4172, 125264, 265394, 400811, 553563, 718841]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===CJT:n(""telha"" <np-idf> <cjt-head> <cc-stone> <right> F P)\ttelhas')","[888390, 901688, 914898, 927140, 945724, 965614, 985504, 1005394]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'very')","[1030969, 1035609, 1040665, 1051545, 1061721, 1067417]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'am')",[1048825]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'knows')",[1044793]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'metropolis')","[1118495, 1179545, 1245309]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</t>', '<ext id=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[877979, 891277, 905317, 917559, 931215, 951105, 970995, 990885]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'full')","[1122773, 1185487]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<fmc>')","[933954, 937049, 943637, 950123, 953844, 956939, 963527, 970013, 973734, 976829, 983417, 989903, 993624, 996719, 1003307, 1009793]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ending')","[1120611, 1124912, 1182479, 1188463]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'October')",[1031545]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'well-payed')",[1039257]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'need')",[1036985]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'moment')","[1092436, 1143289, 1209053]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'available.')","[1102234, 1156921, 1222685]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:prp(""até"" <left>)\tAté')","[883998, 897296, 910850, 923092, 939179, 959069, 978959, 998849]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'building.')","[1099405, 1152985, 1218749]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sometimes.')","[1109341, 1166809, 1232573]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '12.')","[1088066, 1137209, 1202973]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'delighted.')","[1088434, 1137721, 1203485]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=ACC:cu')","[878579, 891877, 905867, 918109, 931815, 951705, 971595, 991485]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Michel')","[1109663, 1167257, 1233021]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'relaxed')","[1118541, 1179609, 1245373]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'as')","[1090251, 1091884, 1091930, 1106926, 1126315, 1140249, 1142521, 1142585, 1163449, 1190415, 1206013, 1208285, 1208349, 1229213]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'capital.')","[1100348, 1154297, 1220061]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.dictionary.DictionaryTest)')","[19030, 22006, 76923, 98177, 111318, 156394, 159754, 221935, 252398, 294524, 297692, 356241, 385915, 433941, 437493, 503306, 537242, 589693, 593533, 664794, 701570, 756971, 761003, 845139, 846629]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:n(""galpão"" <np-idf> <cjt-head> <build> <left> M S)\tgalpão')","[887814, 901112, 914370, 926612, 945148, 965038, 984928, 1004818]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.WindowFeatureGeneratorTest')","[2066, 114518, 255380, 389333, 540987, 705533]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===N<:num(""2"" <card> <np-close> M/F P)\t2')","[879860, 893158, 907046, 919288, 933096, 952986, 972876, 992766]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCopyConstructor(opennlp.tools.util.SequenceTest)')","[35026, 36266, 82779, 99758, 120693, 174454, 175854, 228767, 261135, 311552, 312872, 362585, 395928, 453033, 454513, 510626, 548212, 610333, 611933, 672846, 713178, 778643, 780323, 867061, 867727]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:prp(""com"" <np-close>)\tcom')","[881555, 894853, 908607, 920849, 935903, 955793, 975683, 995573]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'They')","[1100532, 1127580, 1154553, 1192175, 1220317]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:prp(""de"" <NER2> <np-close>)\tde')","[878531, 891829, 905823, 918065, 931767, 951657, 971547, 991437]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'landed')","[1123463, 1186447]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCheckMergedContractions(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[43582, 44822, 85851, 100630, 125903, 184114, 185514, 232351, 265989, 320660, 321980, 365913, 401494, 463245, 464725, 514466, 554312, 621373, 622973, 677070, 719634, 790235, 791915, 929913, 930563]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Stefan')","[1050265, 1050745, 1051193]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '====,')","[885688, 898986, 912410, 924652, 940869, 960759, 980649, 1000539]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsHyphen(opennlp.tools.util.featuregen.StringPatternTest)')","[26718, 29198, 79899, 98948, 115860, 165074, 167874, 225407, 256632, 302708, 305348, 359465, 390765, 443117, 446077, 507026, 542554, 599613, 602813, 668886, 707190, 767387, 770747, 855199, 857201]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'd')",[1131931]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=============,')","[887040, 900338, 913658, 925900, 942221, 962111, 982001, 1001891]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'small')","[1107064, 1109939, 1163641, 1167641, 1229405, 1233405]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '""Westbad"".')",[1045753]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'not')","[1111917, 1113389, 1170393, 1172441, 1236157, 1238205]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<head/>')",[1131977]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'down')","[1121876, 1184239]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'friday!')",[1067577]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameFinderEventStreamTest')","[8150, 140602, 279680, 417201, 571531, 737861]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'offered')","[1094920, 1146745, 1212509]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==CO:conj-c(""e"" <co-subj>)\te')","[884908, 898206, 911690, 923932, 940089, 959979, 979869, 999759]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'reported')",[1063449]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCompareToIgnoreCase(opennlp.tools.util.StringListTest)')","[20766, 23122, 77403, 98302, 112055, 158354, 161014, 222495, 253085, 296372, 298880, 356761, 386702, 436013, 438825, 503906, 538104, 591933, 594973, 665454, 702482, 759323, 762515, 847545, 848523]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.postag.POSDictionaryTest)')","[5717, 48542, 49906, 87675, 101229, 129690, 130193, 189714, 191254, 234479, 269514, 269983, 325940, 327392, 367889, 405543, 406080, 469165, 470793, 516746, 558754, 559342, 627773, 629533, 679578, 724338, 724960, 796955, 798803, 1016907, 1017549]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLineSegmentation(opennlp.tools.util.PlainTextByLineStreamTest)')","[2465, 2489, 2513, 29477, 29508, 29539, 30469, 30500, 30531, 80403, 80427, 80451, 99093, 116764, 116794, 116824, 116905, 116933, 116961, 168189, 168224, 168259, 169309, 169344, 169379, 225995, 226023, 226051, 257474, 257502, 257530, 257605, 257631, 257657, 305645, 305678, 305711, 306701, 306734, 306767, 360011, 360037, 360063, 391731, 391763, 391795, 391882, 391912, 391942, 446410, 446447, 446484, 447594, 447631, 447668, 507656, 507686, 507716, 543613, 543648, 543683, 543779, 543812, 543845, 603173, 603213, 603253, 604453, 604493, 604533, 669579, 669612, 669645, 708311, 708348, 708385, 708487, 708522, 708557, 771125, 771167, 771209, 772469, 772511, 772553, 858747, 858787, 858827, 858911, 858953, 858995]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenizationOfStringWithoutTokens(opennlp.tools.tokenize.WhitespaceTokenizerTest)')","[57098, 58710, 91227, 102306, 136048, 199374, 201194, 238623, 275436, 335048, 336764, 371737, 412337, 479377, 481301, 521186, 566202, 638813, 640893, 684462, 732222, 808547, 810731, 1072359, 1072857]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""don't"")",[1066489]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Stefan')","[1103591, 1104051, 1104419, 1158809, 1159449, 1159961, 1224573, 1225213, 1225725]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:n(""galpão"" <np-idf> <cjt-head> <build> <left> M S)\tgalpão')","[889205, 902503, 915647, 927889, 946539, 966429, 986319, 1006209]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenProbMinScore(opennlp.tools.chunker.ChunkerMETest)')","[58214, 59454, 91707, 102431, 136785, 200634, 202034, 239183, 276123, 336236, 337556, 372257, 413124, 480709, 482189, 521786, 567064, 640253, 641853, 685122, 733134, 810059, 811739, 1073757, 1074751]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'woman')","[1060857, 1062713, 1064569]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Advanced')",[1132092]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'really')","[1116333, 1119231, 1176537, 1180569, 1242301, 1246333]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'empty')",[1059065]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Miller')","[1103614, 1104074, 1104442, 1111089, 1112768, 1158841, 1159481, 1159993, 1169241, 1171577, 1224605, 1225245, 1225757, 1235005, 1237341]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsEmptyWithNullString(opennlp.tools.util.StringUtilTest)')","[34437, 34468, 34499, 35677, 35708, 35739, 82419, 82443, 82467, 120106, 120136, 120166, 173789, 173824, 173859, 175189, 175224, 175259, 228347, 228375, 228403, 260588, 260616, 260644, 310925, 310958, 310991, 312245, 312278, 312311, 362195, 362221, 362247, 395301, 395333, 395365, 452330, 452367, 452404, 453810, 453847, 453884, 510176, 510206, 510236, 547525, 547560, 547595, 609573, 609613, 609653, 611173, 611213, 611253, 672351, 672384, 672417, 712451, 712488, 712525, 777845, 777887, 777929, 779525, 779567, 779609, 865527, 865567, 865607, 866363, 866405, 866447]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'asked')","[1097358, 1112078, 1150137, 1170617, 1215901, 1236381]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:abc')","[1259437, 1259529]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'routine')","[1126361, 1190479]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=P:v-fin(""celebrar"" <fs-subst> <mv> <right> PR 3P IND VFIN)\tcelebram')","[889959, 903257, 916343, 928585, 947293, 967183, 987073, 1006963]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'police.')","[1114079, 1173401, 1239165]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[2909, 32050, 33414, 81531, 99405, 118722, 119225, 171094, 172634, 227311, 259298, 259767, 308384, 309836, 361233, 393823, 394360, 449481, 451109, 509066, 545906, 546494, 606493, 608253, 671130, 710738, 711360, 774611, 776459, 863019, 863661]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'July')","[1104856, 1160569, 1226333]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Leonardstra§e')","[1091539, 1142041]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""she's"")","[1064825, 1065817]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<np-close>')","[934338, 934678, 936540, 944064, 948770, 950039, 950676, 950827, 954228, 954568, 956430, 963954, 968660, 969929, 970566, 970717, 974118, 974458, 976320, 983844, 988550, 989819, 990456, 990607, 994008, 994348, 996210, 1003734, 1008440, 1009709, 1010346, 1010497]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'appreciated')",[1042969]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hi')","[1034105, 1035673]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'around')","[1098370, 1151545, 1217309]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.SpanTest)')","[3635, 3659, 3683, 36793, 36824, 36855, 39521, 39552, 39583, 83187, 83211, 83235, 99902, 121614, 121644, 121674, 123795, 123823, 123851, 176449, 176484, 176519, 179529, 179564, 179599, 229243, 229271, 229299, 261992, 262020, 262048, 264027, 264053, 264079, 313433, 313466, 313499, 316337, 316370, 316403, 363027, 363053, 363079, 396913, 396945, 396977, 399240, 399270, 399300, 455142, 455179, 455216, 458398, 458435, 458472, 511136, 511166, 511196, 549293, 549328, 549363, 551839, 551872, 551905, 612613, 612653, 612693, 616133, 616173, 616213, 673407, 673440, 673473, 714323, 714360, 714397, 717015, 717050, 717085, 781037, 781079, 781121, 784733, 784775, 784817, 869199, 869239, 869279, 872083, 872125, 872167]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'rose')",[1070233]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'is.')",[1051129]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'envoy')","[1125257, 1188943]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '25.')",[1056633]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '========,')","[883343, 896641, 910249, 922491, 938524, 958414, 978304, 998194]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'punishment')","[1131697, 1197903]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'visit')","[1095495, 1126246, 1147545, 1190319, 1213309]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'going')","[1116126, 1176249, 1242013]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'start')","[1105201, 1161049, 1226813]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'problem')","[1092551, 1143449, 1209213]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====>N:art(""o"" <artd> <-sam> DET M S)\to')","[880016, 893314, 907190, 919432, 933252, 953142, 973032, 992922]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsWithLowerIntersect(opennlp.tools.util.SpanTest)')","[37382, 40110, 83643, 100007, 122184, 177114, 180194, 229775, 262524, 314060, 316964, 363521, 397521, 455845, 459101, 511706, 549958, 613373, 616893, 674034, 715026, 781835, 785531, 869959, 872881]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'money')",[1038617]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'wedding')","[1093632, 1144953, 1210717]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'their')","[1107639, 1131513, 1164441, 1197647, 1230205]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'university.')","[1119484, 1180921, 1246685]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'smaller')",[1069273]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====>N:art(""o"" <artd> <-sam> DET F S)\ta')","[884622, 897920, 911426, 923668, 939803, 959693, 979583, 999473]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.util.StringListTest)')","[21045, 21076, 21107, 23401, 23432, 23463, 77619, 77643, 77667, 112325, 112355, 112385, 158669, 158704, 158739, 161329, 161364, 161399, 222747, 222775, 222803, 253337, 253365, 253393, 296669, 296702, 296735, 299177, 299210, 299243, 356995, 357021, 357047, 386990, 387022, 387054, 436346, 436383, 436420, 439158, 439195, 439232, 504176, 504206, 504236, 538419, 538454, 538489, 592293, 592333, 592373, 595333, 595373, 595413, 665751, 665784, 665817, 702815, 702852, 702889, 759701, 759743, 759785, 762893, 762935, 762977, 847905, 847945, 847985, 848901, 848943, 848985]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Thank')","[1091976, 1104649, 1117184, 1142649, 1160281, 1177721, 1208413, 1226045, 1243485]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '============H:prop(""Oliveira_Silveira"" <hum> <np-close> F S)\tOliveira_Silveira')","[883607, 896905, 910491, 922733, 938788, 958678, 978568, 998458]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'still')","[1087721, 1102211, 1108674, 1136729, 1156889, 1165881, 1202493, 1222653, 1231645]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkerEvaluatorTest')","[7916, 139608, 278754, 416139, 570367, 736629]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'concierge')","[1097657, 1150553, 1216317]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==,')","[880224, 890505, 893522, 903803, 907382, 916847, 919624, 929089, 933460, 947839, 953350, 967729, 973240, 987619, 993130, 1007509]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'evening')","[1123739, 1186831]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sounding')","[1088342, 1137593, 1203357]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.parser.ParseTest)')","[10381, 10412, 10443, 11621, 11652, 11683, 73203, 73227, 73251, 105572, 105602, 105632, 146629, 146664, 146699, 148029, 148064, 148099, 217595, 217623, 217651, 247042, 247070, 247098, 285317, 285350, 285383, 286637, 286670, 286703, 352211, 352237, 352263, 379779, 379811, 379843, 423618, 423655, 423692, 425098, 425135, 425172, 498656, 498686, 498716, 530521, 530556, 530591, 578533, 578573, 578613, 580133, 580173, 580213, 659679, 659712, 659745, 694459, 694496, 694533, 745253, 745295, 745337, 746933, 746975, 747017, 831635, 831675, 831715, 832967, 833009, 833051]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'factory')","[1110767, 1168793, 1234557]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:prp(""em"" <sam-> <right>)\tem')","[878363, 891661, 905669, 917911, 931599, 951489, 971379, 991269]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====H:prop(""Alcy_Cheuiche"" <hum> <np-close> M/F S)\tAlcy_Cheuiche')","[883103, 896401, 910029, 922271, 938284, 958174, 978064, 997954]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'idea')",[1059833]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'moment')",[1035993]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'one')",[1038841]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest)')","[4922, 4946, 4970, 46093, 46124, 46155, 46589, 46620, 46651, 86739, 86763, 86787, 100899, 127561, 127591, 127621, 127822, 127850, 127878, 186949, 186984, 187019, 187509, 187544, 187579, 233387, 233415, 233443, 267533, 267561, 267589, 267776, 267802, 267828, 323333, 323366, 323399, 323861, 323894, 323927, 366875, 366901, 366927, 403266, 403298, 403330, 403545, 403575, 403605, 466242, 466279, 466316, 466834, 466871, 466908, 515576, 515606, 515636, 556255, 556290, 556325, 556561, 556594, 556627, 624613, 624653, 624693, 625253, 625293, 625333, 678291, 678324, 678357, 721691, 721728, 721765, 722015, 722050, 722085, 793637, 793679, 793721, 794309, 794351, 794393, 1013009, 1013049, 1013089, 1013333, 1013375, 1013417]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Lenbachhaus.')",[1060697]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====N<:pp')","[882575, 887862, 895873, 901160, 909545, 914414, 921787, 926656, 937756, 945196, 957646, 965086, 977536, 984976, 997426, 1004866]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'through!')",[1070593]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testRetrievingContent(opennlp.tools.tokenize.TokenSampleTest)')","[53998, 54866, 89883, 101892, 133546, 195874, 196854, 237055, 273106, 331748, 332672, 370281, 409663, 475677, 476713, 519506, 563270, 634813, 635933, 682614, 729118, 804347, 805523, 1025035, 1025525]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'free')","[1128960, 1194095]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:type-1>')",[1258929]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""Heidelberg's"")","[1119438, 1180857, 1246621]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '5,')",[1066937]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkSampleStreamTest')","[1075913, 1075936, 1075960, 1075983]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=P:v-fin(""iniciar"" <fmc> <mv> PR 3S IND VFIN)\tInicia')","[879184, 892482, 906422, 918664, 932420, 952310, 972200, 992090]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'protests')","[1129006, 1194159]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '</s>')","[879107, 881244, 883895, 888894, 892405, 894542, 897193, 902192, 906351, 908320, 910755, 915360, 918593, 920562, 922997, 927602, 932343, 935592, 939076, 946228, 952233, 955482, 958966, 966118, 972123, 975372, 978856, 986008, 992013, 995262, 998746, 1005898]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'area.')",[1058841]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'you:')","[1116724, 1177081, 1242845]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEmptyDataSet(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[32329, 32360, 32391, 33693, 33724, 33755, 81747, 81771, 81795, 118992, 119022, 119052, 171409, 171444, 171479, 172949, 172984, 173019, 227563, 227591, 227619, 259550, 259578, 259606, 308681, 308714, 308747, 310133, 310166, 310199, 361467, 361493, 361519, 394111, 394143, 394175, 449814, 449851, 449888, 451442, 451479, 451516, 509336, 509366, 509396, 546221, 546256, 546291, 606853, 606893, 606933, 608613, 608653, 608693, 671427, 671460, 671493, 711071, 711108, 711145, 774989, 775031, 775073, 776837, 776879, 776921, 863379, 863419, 863459, 864039, 864081, 864123]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCreationWithUnkownElement(opennlp.tools.util.featuregen.GeneratorFactoryTest)')","[27865, 27896, 27927, 29849, 29880, 29911, 80307, 80331, 80355, 116507, 116537, 116567, 166369, 166404, 166439, 168609, 168644, 168679, 225883, 225911, 225939, 257235, 257263, 257291, 303929, 303962, 303995, 306041, 306074, 306107, 359907, 359933, 359959, 391456, 391488, 391520, 444486, 444523, 444560, 446854, 446891, 446928, 507536, 507566, 507596, 543311, 543346, 543381, 601093, 601133, 601173, 603653, 603693, 603733, 669447, 669480, 669513, 707991, 708028, 708065, 768941, 768983, 769025, 771629, 771671, 771713, 857989, 858029, 858069, 858489, 858531, 858573]"
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'person-start')","[1246825, 1246931, 1252095, 1252119, 1252143, 1252167, 1252191, 1252215, 1252239, 1254389]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'wanted')","[1031161, 1031705, 1043897]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'enjoy')","[1112952, 1171833, 1237597]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'on')","[1088802, 1093747, 1111618, 1121485, 1125579, 1127672, 1129305, 1130271, 1130432, 1131237, 1138233, 1145113, 1169977, 1183695, 1189391, 1192303, 1194575, 1195919, 1196143, 1197263, 1203997, 1210877, 1235741]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'not')","[1060569, 1062489]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sounds')","[1091355, 1141785, 1207549]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hauptbahnhof?')","[1091194, 1141561, 1207325]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '""Daily\'s""')",[1045273]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'France')","[1098278, 1151417, 1217181]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Now,')","[1110031, 1167769, 1233533]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Driving')",[1062425]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'send')","[1125211, 1188879]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.parser.ParseTest)')","[10257, 10288, 10319, 11497, 11528, 11559, 73107, 73131, 73155, 105452, 105482, 105512, 146489, 146524, 146559, 147889, 147924, 147959, 217483, 217511, 217539, 246930, 246958, 246986, 285185, 285218, 285251, 286505, 286538, 286571, 352107, 352133, 352159, 379651, 379683, 379715, 423470, 423507, 423544, 424950, 424987, 425024, 498536, 498566, 498596, 530381, 530416, 530451, 578373, 578413, 578453, 579973, 580013, 580053, 659547, 659580, 659613, 694311, 694348, 694385, 745085, 745127, 745169, 746765, 746807, 746849, 831475, 831515, 831555, 832799, 832841, 832883]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'simply')","[1111871, 1170329, 1236093]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'matters')","[1130524, 1196271]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</caixa>', '')","[878171, 891469, 905493, 917735, 931407, 951297, 971187, 991077]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '30202.')","[1090550, 1140665, 1206429]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<KOMP>')","[944656, 964546, 984436, 1004326]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'where')","[1054169, 1063129, 1066585]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToLowerCase(opennlp.tools.util.StringUtilTest)')","[34065, 34096, 34127, 35305, 35336, 35367, 82131, 82155, 82179, 119746, 119776, 119806, 173369, 173404, 173439, 174769, 174804, 174839, 228011, 228039, 228067, 260252, 260280, 260308, 310529, 310562, 310595, 311849, 311882, 311915, 361883, 361909, 361935, 394917, 394949, 394981, 451886, 451923, 451960, 453366, 453403, 453440, 509816, 509846, 509876, 547105, 547140, 547175, 609093, 609133, 609173, 610693, 610733, 610773, 671955, 671988, 672021, 712007, 712044, 712081, 777341, 777383, 777425, 779021, 779063, 779105, 865047, 865087, 865127, 865859, 865901, 865943]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDefaultEncodingParameter(opennlp.tools.cmdline.ArgumentParserTest)')","[13450, 15682, 74331, 97550, 107667, 150094, 152614, 218911, 248993, 288584, 290960, 353433, 382018, 427281, 429945, 500066, 532976, 582493, 585373, 661230, 697058, 749411, 752435, 836169, 837491]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:num(""98"" <card> M/F P)\t98')","[884388, 897686, 911210, 923452, 939569, 959459, 979349, 999239]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'great')","[1095863, 1100256, 1100486, 1148057, 1154169, 1154489, 1213821, 1219933, 1220253]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'realized')","[1118357, 1179353, 1245117]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Elenor')",[1055641]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSetDiffCase(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14938, 18162, 75387, 97801, 109124, 151774, 155414, 220143, 250352, 290168, 293600, 354577, 383573, 429057, 432905, 501386, 534678, 584413, 588573, 662682, 698858, 751427, 755795, 839367, 840873]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.lang.en.HeadRulesTest')","[428, 104680, 246210, 378827, 529479, 693357]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'lady,')",[1055513]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Todd')","[1247635, 1250301]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'necessarily')","[1127281, 1191759]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'M')",[1258643]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'member')","[1122796, 1185519]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=========APP:np')","[883439, 896737, 910337, 922579, 938620, 958510, 978400, 998290]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'well-payed')","[1094966, 1146809, 1212573]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hold')","[1123854, 1186991]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Her')","[1088710, 1138105, 1203869]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'next')","[1115850, 1116218, 1117322, 1175865, 1176377, 1177913, 1241629, 1242141, 1243677]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'made')",[1046649]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'SUB:conj-s(""que"" <clb-fs>)\tque')","[881172, 894470, 908254, 920496, 935520, 955410, 975300, 995190]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEvaluator(opennlp.tools.chunker.ChunkerEvaluatorTest)')","[7940, 61686, 64166, 93339, 102848, 139373, 139636, 204554, 207354, 241087, 278535, 278780, 339932, 342572, 374025, 415888, 416169, 484853, 487813, 523826, 570092, 570400, 644733, 647933, 687366, 736338, 736664, 814763, 818123, 1080381, 1080703]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenReplacement(opennlp.tools.parser.ParseTest)')","[9978, 11218, 72891, 97135, 105182, 146174, 147574, 217231, 246678, 284888, 286208, 351873, 379363, 423137, 424617, 498266, 530066, 578013, 579613, 659250, 693978, 744707, 746387, 831115, 832421]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.namefind.NameSampleTest)')","[8666, 8690, 8714, 68413, 68444, 68475, 70893, 70924, 70955, 95667, 95691, 95715, 103492, 143105, 143135, 143165, 144446, 144474, 144502, 212149, 212184, 212219, 214949, 214984, 215019, 243803, 243831, 243859, 282013, 282041, 282069, 283264, 283290, 283316, 347093, 347126, 347159, 349733, 349766, 349799, 376547, 376573, 376599, 419874, 419906, 419938, 421305, 421335, 421365, 492882, 492919, 492956, 495842, 495879, 495916, 526736, 526766, 526796, 574459, 574494, 574529, 576025, 576058, 576091, 653413, 653453, 653493, 656613, 656653, 656693, 690567, 690600, 690633, 740959, 740996, 741033, 742615, 742650, 742685, 823877, 823919, 823961, 827237, 827279, 827321, 1254493, 1254533, 1254573, 1256257, 1256299, 1256341]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hi,')","[1102395, 1115275, 1157145, 1175065, 1222909, 1240829]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testReadingEvents(opennlp.tools.chunker.ChunkSampleStreamTest)')","[7589, 58834, 59826, 91899, 102473, 137162, 137305, 201334, 202454, 239407, 276474, 276607, 336896, 337952, 372465, 413527, 413680, 481449, 482633, 522026, 567506, 567674, 641053, 642333, 685386, 733602, 733780, 810899, 812243, 1075179, 1075341]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.SpanTest)')","[3611, 36762, 39490, 83163, 99882, 121584, 123767, 176414, 179494, 229215, 261964, 264001, 313400, 316304, 363001, 396881, 399210, 455105, 458361, 511106, 549258, 551806, 612573, 616093, 673374, 714286, 716980, 780995, 784691, 869159, 872041]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'it')","[1089354, 1099037, 1100118, 1101912, 1102855, 1104304, 1105730, 1116586, 1122635, 1139001, 1152473, 1153977, 1156473, 1157785, 1159801, 1161785, 1176889, 1185295, 1204765, 1218237, 1219741, 1222237, 1223549, 1225565, 1227549, 1242653]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:n(""dia"" <np-def> <temp> M S)\tdia')","[879470, 892768, 906686, 918928, 932706, 952596, 972486, 992376]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingEnglishSample(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[4571, 4595, 4619, 44233, 44264, 44295, 45349, 45380, 45411, 86163, 86187, 86211, 100713, 126430, 126460, 126490, 126931, 126959, 126987, 184849, 184884, 184919, 186109, 186144, 186179, 232715, 232743, 232771, 266480, 266508, 266536, 266947, 266973, 266999, 321353, 321386, 321419, 322541, 322574, 322607, 366251, 366277, 366303, 402057, 402089, 402121, 402592, 402622, 402652, 464022, 464059, 464096, 465354, 465391, 465428, 514856, 514886, 514916, 554929, 554964, 554999, 555515, 555548, 555581, 622213, 622253, 622293, 623653, 623693, 623733, 677499, 677532, 677565, 720287, 720324, 720361, 720907, 720942, 720977, 791117, 791159, 791201, 792629, 792671, 792713, 1010759, 1010799, 1010839, 1011403, 1011445, 1011487]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'currently')","[1098324, 1151481, 1217245]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '10th')","[1093609, 1144921, 1210685]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===>N:art(""o"" <-sam> <artd> DET F S)\ta')","[881451, 894749, 908511, 920753, 935799, 955689, 975579, 995469]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""I've"")","[1036057, 1047481]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.chunker.ChunkSampleTest)')","[60105, 60136, 60167, 62089, 62120, 62151, 92211, 92235, 92259, 137826, 137856, 137886, 202769, 202804, 202839, 205009, 205044, 205079, 239771, 239799, 239827, 277092, 277120, 277148, 338249, 338282, 338315, 340361, 340394, 340427, 372803, 372829, 372855, 414237, 414269, 414301, 482966, 483003, 483040, 485334, 485371, 485408, 522416, 522446, 522476, 568285, 568320, 568355, 642693, 642733, 642773, 645253, 645293, 645333, 685815, 685848, 685881, 734427, 734464, 734501, 812621, 812663, 812705, 815309, 815351, 815393, 1076223, 1076263, 1076303, 1078315, 1078357, 1078399]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Blumenweg')",[1038905]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'looking')",[1041305]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'brought')","[1055289, 1064505]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleReading(opennlp.tools.formats.ad.ADParagraphStreamTest)')","[43117, 43148, 43179, 44109, 44140, 44171, 85683, 85707, 85731, 125556, 125586, 125616, 183589, 183624, 183659, 184709, 184744, 184779, 232155, 232183, 232211, 265666, 265694, 265722, 320165, 320198, 320231, 321221, 321254, 321287, 365731, 365757, 365783, 401123, 401155, 401187, 462690, 462727, 462764, 463874, 463911, 463948, 514256, 514286, 514316, 553905, 553940, 553975, 620773, 620813, 620853, 622053, 622093, 622133, 676839, 676872, 676905, 719203, 719240, 719277, 789605, 789647, 789689, 790949, 790991, 791033, 904719, 904759, 904799, 905051, 905093, 905135]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'not')",[1070521]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'soon,')",[1030905]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'right')","[1088204, 1127097, 1137401, 1191503, 1203165]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'away')","[1030777, 1045593]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Reichstag.')","[1098991, 1152409, 1218173]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'business')",[1057337]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testAddMethod(opennlp.tools.util.SequenceTest)')","[34809, 34840, 34871, 36049, 36080, 36111, 82611, 82635, 82659, 120483, 120513, 120543, 174209, 174244, 174279, 175609, 175644, 175679, 228571, 228599, 228627, 260939, 260967, 260995, 311321, 311354, 311387, 312641, 312674, 312707, 362403, 362429, 362455, 395704, 395736, 395768, 452774, 452811, 452848, 454254, 454291, 454328, 510416, 510446, 510476, 547967, 548002, 548037, 610053, 610093, 610133, 611653, 611693, 611733, 672615, 672648, 672681, 712919, 712956, 712993, 778349, 778391, 778433, 780029, 780071, 780113, 866781, 866821, 866861, 867433, 867475, 867517]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'smaller')","[1118794, 1179961, 1245725]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'friday!')","[1117345, 1177945, 1243709]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'competent')","[1096346, 1148729, 1214493]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'man')","[1106512, 1162873, 1228637]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'guests')",[1039641]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.ParseSampleStreamTest')","[830525, 830548, 830572, 830595]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'was')","[1031481, 1033017, 1038233, 1039193, 1052953, 1053497, 1053753, 1055577, 1056793, 1057113, 1057401, 1061689, 1062105, 1067801, 1068537]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hesitant')","[1089032, 1138553, 1204317]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Stefanie')",[1035769]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'she')","[1032569, 1042041, 1042169, 1043577, 1044729, 1050105, 1064697]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'demonstration')","[1129995, 1195535]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'located')","[1110928, 1169017, 1234781]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'indicated')","[1125142, 1188783]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'love')","[1100624, 1154681, 1220445]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ConllXPOSSampleStreamTest')","[3821, 124373, 264565, 399858, 552517, 717733]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '1.')","[1094713, 1146457, 1212221]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'knowledge')","[1096369, 1148761, 1214525]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'than')","[1094598, 1110077, 1146297, 1167833, 1212061, 1233597]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Scotland,')","[1087353, 1136217, 1201981]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Mike')","[1092114, 1102648, 1142841, 1157497, 1208605, 1223261]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'He')","[1057081, 1057753, 1060057, 1063417]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWithNameTypes(opennlp.tools.namefind.NameSampleDataStreamTest)')","[65933, 65964, 65995, 67917, 67948, 67979, 94611, 94635, 94659, 141511, 141541, 141571, 209349, 209384, 209419, 211589, 211624, 211659, 242571, 242599, 242627, 280527, 280555, 280583, 344453, 344486, 344519, 346565, 346598, 346631, 375403, 375429, 375455, 418172, 418204, 418236, 489922, 489959, 489996, 492290, 492327, 492364, 525416, 525446, 525476, 572595, 572630, 572665, 650213, 650253, 650293, 652773, 652813, 652853, 689115, 689148, 689181, 738987, 739024, 739061, 820517, 820559, 820601, 823205, 823247, 823289, 1084725, 1084765, 1084805, 1085705, 1085747, 1085789]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testRegions(opennlp.tools.chunker.ChunkSampleTest)')","[60849, 60880, 60911, 62833, 62864, 62895, 92787, 92811, 92835, 138546, 138576, 138606, 203609, 203644, 203679, 205849, 205884, 205919, 240443, 240471, 240499, 277764, 277792, 277820, 339041, 339074, 339107, 341153, 341186, 341219, 373427, 373453, 373479, 415005, 415037, 415069, 483854, 483891, 483928, 486222, 486259, 486296, 523136, 523166, 523196, 569125, 569160, 569195, 643653, 643693, 643733, 646213, 646253, 646293, 686607, 686640, 686673, 735315, 735352, 735389, 813629, 813671, 813713, 816317, 816359, 816401, 1077183, 1077223, 1077263, 1079323, 1079365, 1079407]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'has')",[1036281]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'help-wanted')",[1040249]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.postag.POSEvaluatorTest)')","[6185, 51766, 52386, 88923, 101582, 131798, 132061, 193354, 194054, 235935, 271478, 271723, 329372, 330032, 369241, 407795, 408076, 473013, 473753, 518306, 561222, 561530, 631933, 632733, 681294, 726950, 727276, 801323, 802163, 1021547, 1021869]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'capital.')",[1046137]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'years.')","[1086870, 1135545, 1201309]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSingleTokeNameAtSentenceStart(opennlp.tools.namefind.DictionaryNameFinderTest)')","[8081, 8105, 8129, 63577, 63608, 63639, 64569, 64600, 64631, 93555, 93579, 93603, 102930, 139780, 139810, 139840, 140401, 140429, 140457, 206689, 206724, 206759, 207809, 207844, 207879, 241339, 241367, 241395, 278914, 278942, 278970, 279493, 279519, 279545, 341945, 341978, 342011, 343001, 343034, 343067, 374259, 374285, 374311, 416323, 416355, 416387, 416986, 417016, 417046, 487110, 487147, 487184, 488294, 488331, 488368, 524096, 524126, 524156, 570569, 570604, 570639, 571295, 571328, 571361, 647173, 647213, 647253, 648453, 648493, 648533, 687663, 687696, 687729, 736843, 736880, 736917, 737611, 737646, 737681, 817325, 817367, 817409, 818669, 818711, 818753, 1081171, 1081211, 1081251, 1081975, 1082017, 1082059]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseClone(opennlp.tools.parser.ParseTest)')","[10474, 11714, 73275, 97219, 105662, 146734, 148134, 217679, 247126, 285416, 286736, 352289, 379875, 423729, 425209, 498746, 530626, 578653, 580253, 659778, 694570, 745379, 747059, 831755, 833093]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCachingOfSentence(opennlp.tools.util.featuregen.CachedFeatureGeneratorTest)')","[23773, 23804, 23835, 24641, 24672, 24703, 78291, 78315, 78339, 113439, 113469, 113499, 161749, 161784, 161819, 162729, 162764, 162799, 223531, 223559, 223587, 254375, 254403, 254431, 299573, 299606, 299639, 300497, 300530, 300563, 357723, 357749, 357775, 388180, 388212, 388244, 439602, 439639, 439676, 440638, 440675, 440712, 505016, 505046, 505076, 539723, 539758, 539793, 595813, 595853, 595893, 596933, 596973, 597013, 666675, 666708, 666741, 704195, 704232, 704269, 763397, 763439, 763481, 764573, 764615, 764657, 850893, 850933, 850973, 851225, 851267, 851309]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:type_2>')",[1259083]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.namefind.TokenNameFinderEvaluatorTest)')","[70769, 70800, 70831, 96819, 96843, 96867, 144682, 144712, 144742, 214809, 214844, 214879, 245147, 245175, 245203, 283484, 283512, 283540, 349601, 349634, 349667, 377795, 377821, 377847, 421557, 421589, 421621, 495694, 495731, 495768, 528176, 528206, 528236, 576301, 576336, 576371, 656453, 656493, 656533, 692151, 692184, 692217, 742907, 742944, 742981, 827069, 827111, 827153, 1259976, 1260016, 1260056, 1260308, 1260350, 1260392]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hardly')","[1099290, 1152825, 1218589]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest')","[7682, 137534, 276820, 413925, 567943, 734065]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===>N:art(""o"" <artd> DET M S)\to')","[879756, 884102, 893054, 897400, 906950, 910946, 919192, 923188, 932992, 939283, 952882, 959173, 972772, 979063, 992662, 998953]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.WordTagSampleStreamTest')","[5576, 129548, 269382, 405391, 558587, 724161]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'coordinate')","[1127649, 1192271]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.RegexNameFinderTest')","[8267, 141099, 280143, 417732, 572113, 738477]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '12')",[1035385]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===>N:art(""o"" <artd> DET M S)\to')","[878627, 882239, 891925, 895537, 905911, 909237, 918153, 921479, 931863, 937420, 951753, 957310, 971643, 977200, 991533, 997090]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'nation')","[1124820, 1188335]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Could')","[1036345, 1047673]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:abc>a>')",[1259690]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Peters')","[1129834, 1130869, 1195311, 1196751]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<left>')","[936969, 942638, 943118, 943557, 948683, 949102, 949342, 949431, 956859, 962528, 963008, 963447, 968573, 968992, 969232, 969321, 976749, 982418, 982898, 983337, 988463, 988882, 989122, 989211, 996639, 1002308, 1002788, 1003227, 1008353, 1008772, 1009012, 1009101]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hospital')","[1106006, 1162169, 1227933]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'ad')",[1040281]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'enough')","[1038585, 1057177, 1069017]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'apartments')","[1089676, 1139449, 1205213]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.doccat.DocumentCategorizerMETest')","[1013609, 1013632, 1013656, 1013679]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Last')","[1086410, 1088457, 1106834, 1110606, 1134905, 1137753, 1163321, 1168569, 1200669, 1203517, 1229085, 1234333]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'costumers')",[1055225]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'in')","[1030169, 1030489, 1031897, 1032697, 1033049, 1033145, 1033593, 1033881, 1034041, 1035097, 1035865, 1036665, 1037113, 1038265, 1038873, 1039321, 1040729, 1041913, 1042489, 1042841, 1043641, 1044601, 1045305, 1046073, 1047321, 1047961, 1048057, 1050617, 1050873, 1051289, 1051385, 1053625, 1054073, 1054777, 1055737, 1056441, 1056569, 1056729, 1056985, 1057465, 1057913, 1058681, 1059161, 1059353, 1061401, 1061561, 1064185, 1066425, 1066969, 1068217, 1068345, 1068569, 1068633, 1068889, 1069625, 1069689, 1070361]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'On')","[1051737, 1061977]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenSampleTest')","[6629, 133781, 273325, 409914, 563545, 729409]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPrecision(opennlp.tools.util.eval.FMeasureTest)')","[31306, 32670, 81051, 99300, 117985, 170254, 171794, 226751, 258611, 307592, 309044, 360713, 393036, 448593, 450221, 508466, 545044, 605533, 607293, 670470, 709826, 773603, 775451, 861117, 862087]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'to')","[1086502, 1087330, 1088549, 1088641, 1088986, 1089055, 1089469, 1089814, 1089860, 1091171, 1091516, 1091769, 1093195, 1094483, 1095288, 1095472, 1096668, 1096967, 1097726, 1097772, 1098715, 1099106, 1099497, 1101958, 1102050, 1102487, 1102786, 1102924, 1105178, 1105523, 1105799, 1108444, 1109295, 1110353, 1111273, 1111434, 1112400, 1114355, 1115873, 1116149, 1117943, 1118702, 1120220, 1121255, 1121393, 1122106, 1122704, 1123072, 1123210, 1123831, 1124636, 1124751, 1125280, 1128362, 1128592, 1129512, 1131329, 1135033, 1136185, 1137881, 1138009, 1138489, 1138585, 1139161, 1139641, 1139705, 1141529, 1142009, 1142361, 1144345, 1146137, 1147257, 1147513, 1149177, 1149593, 1150649, 1150713, 1152025, 1152569, 1153113, 1156537, 1156665, 1157273, 1157689, 1157881, 1161017, 1161497, 1161881, 1165561, 1166745, 1168217, 1169497, 1169721, 1171065, 1173785, 1175897, 1176281, 1178777, 1179833, 1181935, 1183375, 1183567, 1184559, 1185391, 1185903, 1186095, 1186959, 1188079, 1188239, 1188975, 1193263, 1193583, 1194863, 1197391, 1200797, 1201949, 1203645, 1203773, 1204253, 1204349, 1204925, 1205405, 1205469, 1207293, 1207773, 1208125, 1210109, 1211901, 1213021, 1213277, 1214941, 1215357, 1216413, 1216477, 1217789, 1218333, 1218877, 1222301, 1222429, 1223037, 1223453, 1223645, 1226781, 1227261, 1227645, 1231325, 1232509, 1233981, 1235261, 1235485, 1236829, 1239549, 1241661, 1242045, 1244541, 1245597, 1258511, 1259303]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'offered')",[1039225]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<html>')",[1131954]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===CO:conj-c(""e"" <co-acc>)\te')","[890349, 903647, 916703, 928945, 947683, 967573, 987463, 1007353]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'could')","[1111894, 1112906, 1170361, 1171769, 1236125, 1237533]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest')","[1014453, 1014476, 1014500, 1014523]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====,')","[883055, 896353, 909985, 922227, 938236, 958126, 978016, 997906]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParameterValidation(opennlp.tools.chunker.ChunkSampleTest)')","[60353, 60384, 60415, 62337, 62368, 62399, 92403, 92427, 92451, 138066, 138096, 138126, 203049, 203084, 203119, 205289, 205324, 205359, 239995, 240023, 240051, 277316, 277344, 277372, 338513, 338546, 338579, 340625, 340658, 340691, 373011, 373037, 373063, 414493, 414525, 414557, 483262, 483299, 483336, 485630, 485667, 485704, 522656, 522686, 522716, 568565, 568600, 568635, 643013, 643053, 643093, 645573, 645613, 645653, 686079, 686112, 686145, 734723, 734760, 734797, 812957, 812999, 813041, 815645, 815687, 815729, 1076543, 1076583, 1076623, 1078651, 1078693, 1078735]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'merely')","[1103108, 1158137, 1223901]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hospital.')",[1064633]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==P<:pron-det(""outro"" <KOMP> <diff> DET M P)\toutros')","[887352, 900650, 913946, 926188, 942533, 962423, 982313, 1002203]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'of')","[1028953, 1029881, 1038041, 1040473, 1040985, 1041785, 1046681, 1047577, 1049913, 1051897, 1054361, 1054873, 1055161, 1058265, 1060313, 1064889, 1065209]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsInitialCapitalLetter(opennlp.tools.util.featuregen.StringPatternTest)')","[25757, 25788, 25819, 28237, 28268, 28299, 79155, 79179, 79203, 114930, 114960, 114990, 163989, 164024, 164059, 166789, 166824, 166859, 224539, 224567, 224595, 255764, 255792, 255820, 301685, 301718, 301751, 304325, 304358, 304391, 358659, 358685, 358711, 389773, 389805, 389837, 441970, 442007, 442044, 444930, 444967, 445004, 506096, 506126, 506156, 541469, 541504, 541539, 598373, 598413, 598453, 601573, 601613, 601653, 667863, 667896, 667929, 706043, 706080, 706117, 766085, 766127, 766169, 769445, 769487, 769529, 853959, 853999, 854039, 855899, 855941, 855983]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWindowSizeOne(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[2090, 24734, 26966, 78459, 98593, 113923, 114546, 162834, 165354, 223727, 254825, 255406, 300596, 302972, 357905, 388698, 389363, 440749, 443413, 505226, 540292, 541020, 597053, 599933, 666906, 704798, 705568, 764699, 767723, 851865, 852667]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidChunkSampleList(opennlp.tools.chunker.ChunkSampleTest)')","[61438, 63422, 93243, 102827, 139116, 204274, 206514, 240975, 278296, 339668, 341780, 373921, 415613, 484557, 486925, 523706, 569790, 644413, 646973, 687234, 736018, 814427, 817115, 1077943, 1080121]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTypeWithInvalidChar1(opennlp.tools.namefind.NameSampleTest)')","[69529, 69560, 69591, 72009, 72040, 72071, 96531, 96555, 96579, 144185, 144215, 144245, 213409, 213444, 213479, 216209, 216244, 216279, 244811, 244839, 244867, 283021, 283049, 283077, 348281, 348314, 348347, 350921, 350954, 350987, 377483, 377509, 377535, 421026, 421058, 421090, 494214, 494251, 494288, 497174, 497211, 497248, 527816, 527846, 527876, 575719, 575754, 575789, 654853, 654893, 654933, 658053, 658093, 658133, 691755, 691788, 691821, 742291, 742328, 742365, 825389, 825431, 825473, 828749, 828791, 828833, 1255933, 1255973, 1256013, 1257769, 1257811, 1257853]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testRetrievingContent(opennlp.tools.chunker.ChunkSampleTest)')","[60229, 60260, 60291, 62213, 62244, 62275, 92307, 92331, 92355, 137946, 137976, 138006, 202909, 202944, 202979, 205149, 205184, 205219, 239883, 239911, 239939, 277204, 277232, 277260, 338381, 338414, 338447, 340493, 340526, 340559, 372907, 372933, 372959, 414365, 414397, 414429, 483114, 483151, 483188, 485482, 485519, 485556, 522536, 522566, 522596, 568425, 568460, 568495, 642853, 642893, 642933, 645413, 645453, 645493, 685947, 685980, 686013, 734575, 734612, 734649, 812789, 812831, 812873, 815477, 815519, 815561, 1076383, 1076423, 1076463, 1078483, 1078525, 1078567]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'abuses')","[1129742, 1195183]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSet(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[1271, 13946, 17170, 74619, 97613, 108164, 109267, 150654, 154294, 219247, 249456, 250485, 289112, 292544, 353745, 382549, 383726, 427873, 431721, 500426, 533558, 534846, 583133, 587293, 661626, 697674, 699036, 750083, 754451, 838087, 839529]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsEmpty(opennlp.tools.util.StringUtilTest)')","[34282, 35522, 82299, 99633, 119956, 173614, 175014, 228207, 260448, 310760, 312080, 362065, 395141, 452145, 453625, 510026, 547350, 609373, 610973, 672186, 712266, 777635, 779315, 865327, 866153]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====H:prop(""Shopping_Total"" <site> M S)\tShopping_Total')","[880042, 893340, 907214, 919456, 933278, 953168, 973058, 992948]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'soon,')","[1088319, 1137561, 1203325]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'alliance')","[1128017, 1192783]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:prp(""em"" <sam-> <right>)\tem')","[890635, 890973, 903933, 904271, 916967, 917279, 929209, 929521, 947969, 948307, 967859, 968197, 987749, 988087, 1007639, 1007977]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Heinrich-Heine-StraÃ\x9fe')",[1225885]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:prp(""em"" <sam-> <right>)\tem')","[888558, 888750, 901856, 902048, 915052, 915228, 927294, 927470, 945892, 946084, 965782, 965974, 985672, 985864, 1005562, 1005754]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'computer.')",[1050681]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testOneToken(opennlp.tools.tokenize.WhitespaceTokenizerTest)')","[57005, 57036, 57067, 58617, 58648, 58679, 91155, 91179, 91203, 135958, 135988, 136018, 199269, 199304, 199339, 201089, 201124, 201159, 238539, 238567, 238595, 275352, 275380, 275408, 334949, 334982, 335015, 336665, 336698, 336731, 371659, 371685, 371711, 412241, 412273, 412305, 479266, 479303, 479340, 481190, 481227, 481264, 521096, 521126, 521156, 566097, 566132, 566167, 638693, 638733, 638773, 640773, 640813, 640853, 684363, 684396, 684429, 732111, 732148, 732185, 808421, 808463, 808505, 810605, 810647, 810689, 1072239, 1072279, 1072319, 1072731, 1072773, 1072815]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:n(""vidro"" <np-idf> <cjt-acc> <con> <right> M P)\tvidros')","[890401, 903699, 916751, 928993, 947735, 967625, 987515, 1007405]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'As')","[1032537, 1038361, 1042009]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Rodney')","[1247891, 1250557]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testOnlyWithNames(opennlp.tools.namefind.NameFinderMETest)')","[67297, 67328, 67359, 70273, 70304, 70335, 95379, 95403, 95427, 142608, 142638, 142668, 210889, 210924, 210959, 214249, 214284, 214319, 243467, 243495, 243523, 281550, 281578, 281606, 345905, 345938, 345971, 349073, 349106, 349139, 376235, 376261, 376287, 419343, 419375, 419407, 491550, 491587, 491624, 495102, 495139, 495176, 526376, 526406, 526436, 573877, 573912, 573947, 651973, 652013, 652053, 655813, 655853, 655893, 690171, 690204, 690237, 740343, 740380, 740417, 822365, 822407, 822449, 826397, 826439, 826481, 1133203, 1133243, 1133283, 1134359, 1134401, 1134443]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'some')","[1098784, 1152121, 1217885]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'multiple')",[1064761]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.dictionary.DictionaryTest)')","[18813, 18844, 18875, 21789, 21820, 21851, 76755, 76779, 76803, 111108, 111138, 111168, 156149, 156184, 156219, 159509, 159544, 159579, 221739, 221767, 221795, 252202, 252230, 252258, 294293, 294326, 294359, 297461, 297494, 297527, 356059, 356085, 356111, 385691, 385723, 385755, 433682, 433719, 433756, 437234, 437271, 437308, 503096, 503126, 503156, 536997, 537032, 537067, 589413, 589453, 589493, 593253, 593293, 593333, 664563, 664596, 664629, 701311, 701348, 701385, 756677, 756719, 756761, 760709, 760751, 760793, 844859, 844899, 844939, 846335, 846377, 846419]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'no')","[1031641, 1059801]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testRecall(opennlp.tools.util.eval.FMeasureTest)')","[31461, 31492, 31523, 32825, 32856, 32887, 81171, 81195, 81219, 118135, 118165, 118195, 170429, 170464, 170499, 171969, 172004, 172039, 226891, 226919, 226947, 258751, 258779, 258807, 307757, 307790, 307823, 309209, 309242, 309275, 360843, 360869, 360895, 393196, 393228, 393260, 448778, 448815, 448852, 450406, 450443, 450480, 508616, 508646, 508676, 545219, 545254, 545289, 605733, 605773, 605813, 607493, 607533, 607573, 670635, 670668, 670701, 710011, 710048, 710085, 773813, 773855, 773897, 775661, 775703, 775745, 861317, 861357, 861397, 862297, 862339, 862381]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Schulz')","[1109088, 1166457, 1232221]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'later')","[1114884, 1174521, 1240285]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'it,')","[1027603, 1028545]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'day')",[1046041]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHelpMessageOfTools(opennlp.tools.cmdline.CLITest)')","[12241, 12272, 12303, 12737, 12768, 12799, 73683, 73707, 73731, 106583, 106613, 106643, 148729, 148764, 148799, 149289, 149324, 149359, 218155, 218183, 218211, 247983, 248011, 248039, 287297, 287330, 287363, 287825, 287858, 287891, 352731, 352757, 352783, 380860, 380892, 380924, 425838, 425875, 425912, 426430, 426467, 426504, 499256, 499286, 499316, 531707, 531742, 531777, 580933, 580973, 581013, 581573, 581613, 581653, 660339, 660372, 660405, 695715, 695752, 695789, 747773, 747815, 747857, 748445, 748487, 748529, 834397, 834437, 834477, 834729, 834771, 834813]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'happened')",[1063545]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=SUB:conj-s(""que"" <clb-fs>)\tque')","[888126, 901424, 914656, 926898, 945460, 965350, 985240, 1005130]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'your')","[1040217, 1040761, 1041401]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'competent')",[1040921]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleArgumentsMissingEncoding(opennlp.tools.cmdline.ArgumentParserTest)')","[13233, 13264, 13295, 15465, 15496, 15527, 74163, 74187, 74211, 107457, 107487, 107517, 149849, 149884, 149919, 152369, 152404, 152439, 218715, 218743, 218771, 248797, 248825, 248853, 288353, 288386, 288419, 290729, 290762, 290795, 353251, 353277, 353303, 381794, 381826, 381858, 427022, 427059, 427096, 429686, 429723, 429760, 499856, 499886, 499916, 532731, 532766, 532801, 582213, 582253, 582293, 585093, 585133, 585173, 660999, 661032, 661065, 696799, 696836, 696873, 749117, 749159, 749201, 752141, 752183, 752225, 835889, 835929, 835969, 837197, 837239, 837281]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'celebrated')",[1037433]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'was')","[1088779, 1089952, 1094161, 1094897, 1105753, 1106144, 1106328, 1107846, 1108950, 1109226, 1109433, 1112814, 1113113, 1117575, 1118150, 1138201, 1139833, 1145689, 1146713, 1161817, 1162361, 1162617, 1164729, 1166265, 1166649, 1166937, 1171641, 1172057, 1178265, 1179065, 1203965, 1205597, 1211453, 1212477, 1227581, 1228125, 1228381, 1230493, 1232029, 1232413, 1232701, 1237405, 1237821, 1244029, 1244829]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'So')","[1029977, 1034777, 1044953, 1051161, 1060729, 1069113]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===,')","[882983, 896281, 909919, 922161, 938164, 958054, 977944, 997834]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'he')","[1030425, 1030841, 1050041, 1052089, 1052569, 1059737, 1060473, 1060761, 1064025]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==CJT:n(""poeta"" <np-idf> <cjt-subj> <Hprof> <left> M P)\tpoetas')","[884960, 898258, 911738, 923980, 940141, 960031, 979921, 999811]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===>N:art(""o"" <artd> DET M S)\to')","[879730, 884076, 893028, 897374, 906926, 910922, 919168, 923164, 932966, 939257, 952856, 959147, 972746, 979037, 992636, 998927]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:prop(""Porto_Poesia"" <cjt-head> <civ> <right> M S)\tPorto_Poesia')","[879808, 893106, 906998, 919240, 933044, 952934, 972824, 992714]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'place,')",[1063257]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:prp(""de"" <NER2> <np-close>)\tde')","[879600, 892898, 906806, 919048, 932836, 952726, 972616, 992506]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'barbecue.')","[1105247, 1161113, 1226877]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<L>')","[943234, 963124, 983014, 1002904]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.BeamSearchTest')","[2534, 117466, 258128, 392481, 544435, 709181]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:n(""momento"" <np-def> <f-q> M S)\tmomento')","[882263, 895561, 909259, 921501, 937444, 957334, 977224, 997114]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '3S>')","[949871, 969761, 989651, 1009541]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=============H:prop(""Jane_Tutikian"" <hum> <np-close> F S)\tJane_Tutikian')","[886988, 900286, 913610, 925852, 942169, 962059, 981949, 1001839]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Sunday')","[1106121, 1162329, 1228093]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'week.')","[1107731, 1164569, 1230333]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.util.StringListTest)')","[21138, 23494, 77691, 98365, 112415, 158774, 161434, 222831, 253421, 296768, 299276, 357073, 387086, 436457, 439269, 504266, 538524, 592413, 595453, 665850, 702926, 759827, 763019, 848025, 849027]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'trauma,')","[1115137, 1174873, 1240637]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""you'll"")",[1067257]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.chunker.ChunkSampleTest)')","[7823, 59950, 61934, 92091, 102555, 137676, 139259, 202594, 204834, 239631, 276952, 278429, 338084, 340196, 372673, 414077, 415766, 482781, 485149, 522266, 568110, 569958, 642493, 645053, 685650, 734242, 736196, 812411, 815099, 1076023, 1078105]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testMerge(opennlp.tools.util.eval.FMeasureTest)')","[31833, 31864, 31895, 33197, 33228, 33259, 81459, 81483, 81507, 118495, 118525, 118555, 170849, 170884, 170919, 172389, 172424, 172459, 227227, 227255, 227283, 259087, 259115, 259143, 308153, 308186, 308219, 309605, 309638, 309671, 361155, 361181, 361207, 393580, 393612, 393644, 449222, 449259, 449296, 450850, 450887, 450924, 508976, 509006, 509036, 545639, 545674, 545709, 606213, 606253, 606293, 607973, 608013, 608053, 671031, 671064, 671097, 710455, 710492, 710529, 774317, 774359, 774401, 776165, 776207, 776249, 861797, 861837, 861877, 862801, 862843, 862885]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sign')",[1061081]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'teacher')","[1109019, 1166361, 1232125]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:pron-pers(""eles"" M 3P NOM/PIV)\teles')","[885454, 898752, 912194, 924436, 940635, 960525, 980415, 1000305]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<caixa[^>]*>', '')","[878147, 891445, 905471, 917713, 931383, 951273, 971163, 991053]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'life-threatening,')","[1105707, 1161753, 1227517]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'A1')","[878267, 880788, 882119, 887646, 891565, 894086, 895417, 900944, 905581, 907902, 909127, 914216, 917823, 920144, 921369, 926458, 931503, 935136, 937300, 944980, 951393, 955026, 957190, 964870, 971283, 974916, 977080, 984760, 991173, 994806, 996970, 1004650]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'five')","[1094782, 1099888, 1146553, 1153657, 1212317, 1219421]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'live')",[1069593]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:prp(""em"" <sam-> <np-long>)\tem')","[879912, 893210, 907094, 919336, 933148, 953038, 972928, 992818]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '15,')","[1054137, 1062041]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=SUBJ:np')","[880432, 881737, 889829, 893730, 895035, 903127, 907574, 908775, 916223, 919816, 921017, 928465, 933668, 936085, 947163, 953558, 955975, 967053, 973448, 975865, 986943, 993338, 995755, 1006833]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.namefind.TokenNameFinderEvaluatorTest)')","[8783, 8807, 8831, 70645, 70676, 70707, 96723, 96747, 96771, 103743, 144562, 144592, 144622, 144823, 144851, 144879, 214669, 214704, 214739, 245035, 245063, 245091, 283372, 283400, 283428, 283615, 283641, 283667, 349469, 349502, 349535, 377691, 377717, 377743, 421429, 421461, 421493, 421708, 421738, 421768, 495546, 495583, 495620, 528056, 528086, 528116, 576161, 576196, 576231, 576467, 576500, 576533, 656293, 656333, 656373, 692019, 692052, 692085, 742759, 742796, 742833, 743083, 743118, 743153, 826901, 826943, 826985, 1259816, 1259856, 1259896, 1260140, 1260182, 1260224]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'refugees')","[1131444, 1197551]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsWithEqual(opennlp.tools.util.SpanTest)')","[37258, 39986, 83547, 99986, 122064, 176974, 180054, 229663, 262412, 313928, 316832, 363417, 397393, 455697, 458953, 511586, 549818, 613213, 616733, 673902, 714878, 781667, 785363, 869799, 872713]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsAllLetters(opennlp.tools.util.featuregen.StringPatternTest)')","[25633, 25664, 25695, 28113, 28144, 28175, 79059, 79083, 79107, 114810, 114840, 114870, 163849, 163884, 163919, 166649, 166684, 166719, 224427, 224455, 224483, 255652, 255680, 255708, 301553, 301586, 301619, 304193, 304226, 304259, 358555, 358581, 358607, 389645, 389677, 389709, 441822, 441859, 441896, 444782, 444819, 444856, 505976, 506006, 506036, 541329, 541364, 541399, 598213, 598253, 598293, 601413, 601453, 601493, 667731, 667764, 667797, 705895, 705932, 705969, 765917, 765959, 766001, 769277, 769319, 769361, 853799, 853839, 853879, 855731, 855773, 855815]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'please')","[1091424, 1092735, 1141881, 1143705, 1207645, 1209469]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==,')","[878891, 888510, 892189, 901808, 906153, 915008, 918395, 927250, 932127, 945844, 952017, 965734, 971907, 985624, 991797, 1005514]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<Hprof>')","[936942, 943090, 943530, 956832, 962980, 963420, 976722, 982870, 983310, 996612, 1002760, 1003200]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'just')",[1029305]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsWithHigherIntersect(opennlp.tools.util.SpanTest)')","[37506, 40234, 83739, 100028, 122304, 177254, 180334, 229887, 262636, 314192, 317096, 363625, 397649, 455993, 459249, 511826, 550098, 613533, 617053, 674166, 715174, 782003, 785699, 870119, 873049]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'opportunity')","[1121232, 1183343]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hi,')","[1048793, 1064985]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:n(""presença"" <np-def> <state> <per> <right> F S)\tpresença')","[882815, 896113, 909765, 922007, 937996, 957886, 977776, 997666]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '============,')","[883631, 896929, 910513, 922755, 938812, 958702, 978592, 998482]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<cc-stone>')","[950350, 970240, 990130, 1010020]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====N<:v-pcp(""utilizar"" <np-close> M S)\tutilizado')","[889257, 902555, 915695, 927937, 946591, 966481, 986371, 1006261]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======H:n(""cultura"" <np-def> <ac> F S)\tcultura')","[884856, 898154, 911642, 923884, 940037, 959927, 979817, 999707]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'end')","[1125418, 1189167]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseInvalidVersion(opennlp.tools.util.VersionTest)')","[22626, 24114, 77979, 98448, 112912, 160454, 162134, 223167, 253884, 298352, 299936, 357385, 387617, 438233, 440009, 504626, 539106, 594333, 596253, 666246, 703542, 761843, 763859, 849607, 850265]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""parent's"")",[1056505]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=============,')","[883703, 897001, 910579, 922821, 938884, 958774, 978664, 998554]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'those')",[1046297]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:n(""profissional"" <np-count> <np-def> <cjt-head> <Hprof> <left> M/F P)\tprofissionais')","[884466, 897764, 911282, 923524, 939647, 959537, 979427, 999317]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'family')","[1104994, 1160761, 1226525]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testChunkAsSpan(opennlp.tools.chunker.ChunkerMETest)')","[7496, 7520, 7544, 57749, 57780, 57811, 58989, 59020, 59051, 91347, 91371, 91395, 102347, 136335, 136365, 136395, 137076, 137104, 137132, 200109, 200144, 200179, 201509, 201544, 201579, 238763, 238791, 238819, 275703, 275731, 275759, 276394, 276420, 276446, 335741, 335774, 335807, 337061, 337094, 337127, 371867, 371893, 371919, 412644, 412676, 412708, 413435, 413465, 413495, 480154, 480191, 480228, 481634, 481671, 481708, 521336, 521366, 521396, 566539, 566574, 566609, 567405, 567438, 567471, 639653, 639693, 639733, 641253, 641293, 641333, 684627, 684660, 684693, 732579, 732616, 732653, 733495, 733530, 733565, 809429, 809471, 809513, 811109, 811151, 811193, 1073157, 1073197, 1073237, 1074121, 1074163, 1074205]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testGetEnd(opennlp.tools.util.SpanTest)')","[38901, 38932, 38963, 41629, 41660, 41691, 84819, 84843, 84867, 123654, 123684, 123714, 178829, 178864, 178899, 181909, 181944, 181979, 231147, 231175, 231203, 263896, 263924, 263952, 315677, 315710, 315743, 318581, 318614, 318647, 364795, 364821, 364847, 399089, 399121, 399153, 457658, 457695, 457732, 460914, 460951, 460988, 513176, 513206, 513236, 551673, 551708, 551743, 615333, 615373, 615413, 618853, 618893, 618933, 675651, 675684, 675717, 716839, 716876, 716913, 783893, 783935, 783977, 787589, 787631, 787673, 871919, 871959, 871999, 874939, 874981, 875023]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsAllDigit(opennlp.tools.util.featuregen.StringPatternTest)')","[26129, 26160, 26191, 28609, 28640, 28671, 79443, 79467, 79491, 115290, 115320, 115350, 164409, 164444, 164479, 167209, 167244, 167279, 224875, 224903, 224931, 256100, 256128, 256156, 302081, 302114, 302147, 304721, 304754, 304787, 358971, 358997, 359023, 390157, 390189, 390221, 442414, 442451, 442488, 445374, 445411, 445448, 506456, 506486, 506516, 541889, 541924, 541959, 598853, 598893, 598933, 602053, 602093, 602133, 668259, 668292, 668325, 706487, 706524, 706561, 766589, 766631, 766673, 769949, 769991, 770033, 854439, 854479, 854519, 856403, 856445, 856487]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCaseSensitiveDictionary(opennlp.tools.postag.POSDictionaryTest)')","[48790, 50154, 87867, 101291, 129930, 189994, 191534, 234703, 269738, 326204, 327656, 368097, 405799, 469461, 471089, 516986, 559034, 628093, 629853, 679842, 724634, 797291, 799139, 1017227, 1017885]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'by')","[1109525, 1123141, 1167065, 1185999, 1232829]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'stop')","[1131352, 1197423]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '1001 Inicia no próximo dia 6 de outubro o Porto Poesia 2 no Shopping Total Av. Cristovão Colombo, 545 -- Porto Alegre -- RS.')","[878243, 891541, 905559, 917801, 931479, 951369, 971259, 991149]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'from')","[1034425, 1036537, 1041561, 1043321, 1045625, 1047065, 1059577, 1062553, 1067929]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===========H:prop(""Mário_Pirata"" <hum> <np-close> M S)\tMário_Pirata')","[886702, 900000, 913346, 925588, 941883, 961773, 981663, 1001553]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingEnglishSample(opennlp.tools.formats.NameFinderCensus90NameStreamTest)')","[4079, 42342, 42838, 85275, 100424, 124772, 124915, 182714, 183274, 231679, 264936, 265069, 319340, 319868, 365289, 400285, 400438, 461765, 462357, 513746, 552986, 553154, 619773, 620413, 676278, 718230, 718408, 788555, 789227, 876751, 876913]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'pain,')",[1053913]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testBestSequenceZeroLengthInput(opennlp.tools.util.BeamSearchTest)')","[2558, 29942, 30686, 80475, 99114, 116991, 117494, 168714, 169554, 226079, 257685, 258154, 306140, 306932, 360089, 391974, 392511, 446965, 447853, 507746, 543880, 544468, 603773, 604733, 669678, 708594, 709216, 771755, 772763, 859129, 859771]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""Arent't"")","[1115367, 1175193, 1240957]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'amazing,')","[1100578, 1154617, 1220381]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testFindTokenizdPattern(opennlp.tools.namefind.RegexNameFinderTest)')","[65437, 65468, 65499, 66677, 66708, 66739, 94323, 94347, 94371, 141014, 141044, 141074, 208789, 208824, 208859, 210189, 210224, 210259, 242235, 242263, 242291, 280064, 280092, 280120, 343925, 343958, 343991, 345245, 345278, 345311, 375091, 375117, 375143, 417641, 417673, 417705, 489330, 489367, 489404, 490810, 490847, 490884, 525056, 525086, 525116, 572013, 572048, 572083, 649573, 649613, 649653, 651173, 651213, 651253, 688719, 688752, 688785, 738371, 738408, 738445, 819845, 819887, 819929, 821525, 821567, 821609, 1083647, 1083687, 1083727, 1084147, 1084189, 1084231]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SDEventStreamTest')","[1014875, 1014898, 1014922, 1014945]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNameFinderWithMultipleTypes(opennlp.tools.namefind.NameFinderMETest)')","[67018, 69994, 95163, 103367, 142338, 210574, 213934, 243215, 281298, 345608, 348776, 376001, 419055, 491217, 494769, 526106, 573562, 651613, 655453, 689874, 740010, 821987, 826019, 1132843, 1133981]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=========H:prop(""Liana_Timm"" <hum> <np-close> F S)\tLiana_Timm')","[886390, 899688, 913058, 925300, 941571, 961461, 981351, 1001241]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:person>')","[1119852, 1121117, 1122474, 1123992, 1125050, 1126131, 1126407, 1127442, 1128086, 1128638, 1129374, 1129788, 1130110, 1130846, 1131835, 1181423, 1183183, 1185071, 1187183, 1188655, 1190159, 1190543, 1191983, 1192879, 1193647, 1194671, 1195247, 1195695, 1196719, 1201533, 1202269, 1205853, 1206909, 1208573, 1208733, 1210429, 1213373, 1213501, 1215037, 1216669, 1222813, 1223229, 1224541, 1225181, 1225693, 1230557, 1231421, 1232157, 1232989, 1234941, 1237309, 1239709, 1241117, 1243837, 1249629, 1249757, 1249885, 1250013, 1250141, 1250269, 1250397, 1250525, 1252871, 1253223, 1253447]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Acevedo-Vila')","[1247155, 1249821]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'possible.')",[1035513]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOnlyWithNamesWithTypes(opennlp.tools.namefind.NameFinderMETest)')","[67390, 70366, 95451, 103430, 142698, 210994, 214354, 243551, 281634, 346004, 349172, 376313, 419439, 491661, 495213, 526466, 573982, 652093, 655933, 690270, 740454, 822491, 826523, 1133323, 1134485]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '12,')",[1048025]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'demanding')","[1120450, 1182255]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'once')",[1055385]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'because')","[1099244, 1108237, 1152761, 1165273, 1218525, 1231037]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'house')",[1056537]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'they')","[1095426, 1097450, 1100716, 1127810, 1131605, 1147449, 1150265, 1154809, 1192495, 1197775, 1213213, 1216029, 1220573]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '63737')",[1069721]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'concierge')",[1042585]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'offer.')","[1096254, 1148601, 1214365]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCountTruePositives(opennlp.tools.util.eval.FMeasureTest)')","[2792, 31182, 32546, 80955, 99259, 117865, 118608, 170114, 171654, 226639, 258499, 259192, 307460, 308912, 360609, 392908, 393701, 448445, 450073, 508346, 544904, 545772, 605373, 607133, 670338, 709678, 710596, 773435, 775283, 860957, 861919]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==P:v-fin(""ter"" <fmc> <mv> PS/MQP 3P IND VFIN)\ttiveram')","[890219, 903517, 916583, 928825, 947553, 967443, 987333, 1007223]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '34.')","[1110997, 1169113, 1234877]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.DictionaryNameFinderTest')","[8033, 140345, 279441, 416926, 571229, 737541]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====>N:art(""o"" <artd> DET F S)\ta')","[888054, 901352, 914590, 926832, 945388, 965278, 985168, 1005058]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '</li>')","[1132207, 1132414]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'March')","[1037721, 1062009]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====N<:v-pcp(""utilizar"" <np-close> M S)\tutilizado')","[889231, 902529, 915671, 927913, 946565, 966455, 986345, 1006235]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==P<:np')","[878387, 880884, 882215, 882935, 891685, 894182, 895513, 896233, 905691, 907990, 909215, 909875, 917933, 920232, 921457, 922117, 931623, 935232, 937396, 938116, 951513, 955122, 957286, 958006, 971403, 975012, 977176, 977896, 991293, 994902, 997066, 997786]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCompareTo(opennlp.tools.util.SequenceTest)')","[34933, 34964, 34995, 36173, 36204, 36235, 82707, 82731, 82755, 120603, 120633, 120663, 174349, 174384, 174419, 175749, 175784, 175819, 228683, 228711, 228739, 261051, 261079, 261107, 311453, 311486, 311519, 312773, 312806, 312839, 362507, 362533, 362559, 395832, 395864, 395896, 452922, 452959, 452996, 454402, 454439, 454476, 510536, 510566, 510596, 548107, 548142, 548177, 610213, 610253, 610293, 611813, 611853, 611893, 672747, 672780, 672813, 713067, 713104, 713141, 778517, 778559, 778601, 780197, 780239, 780281, 866941, 866981, 867021, 867601, 867643, 867685]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'any')","[1099336, 1127304, 1152889, 1191791, 1218653]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '15.')","[1109180, 1166585, 1232349]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'rumour')","[1087238, 1136057, 1201821]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'phone')",[1049849]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'meal.')",[1043193]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'money')","[1094460, 1146105, 1211869]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==>N:art(""o"" <artd> DET F S)\ta')","[885116, 898414, 911882, 924124, 940297, 960187, 980077, 999967]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'and')","[1029497, 1030809, 1031033, 1031609, 1032153, 1036025, 1037337, 1040089, 1040601, 1041049, 1041209, 1043065, 1043705, 1044281, 1045913, 1049145, 1049785, 1050329, 1055833, 1057625, 1058361, 1058777, 1060249, 1061113, 1061785, 1063577, 1063705, 1063993, 1064473, 1069945]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '======H:prop(""Donaldo_Schüller"" <hum> <np-close> M S)\tDonaldo_Schüller')","[885896, 899194, 912602, 924844, 941077, 960967, 980857, 1000747]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '80333')",[1061593]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCreationWithDetokenizer(opennlp.tools.tokenize.TokenSampleTest)')","[54122, 54990, 89979, 101913, 133666, 196014, 196994, 237167, 273218, 331880, 332804, 370385, 409791, 475825, 476861, 519626, 563410, 634973, 636093, 682746, 729266, 804515, 805691, 1025195, 1025693]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<site>')","[934764, 954654, 974544, 994434]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '78181')","[1101820, 1156345, 1222109]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingDutchSample(opennlp.tools.formats.Conll02NameSampleStreamTest)')","[39366, 41970, 84987, 100321, 124001, 179354, 182294, 231343, 264219, 316172, 318944, 364977, 399460, 458213, 461321, 513386, 552080, 615933, 619293, 675882, 717270, 784523, 788051, 875317, 875647]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'going')",[1066009]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<Lh>')","[936720, 956610, 976500, 996390]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '')","[879083, 881220, 883871, 888870, 892381, 894518, 897169, 902168, 906329, 908298, 910733, 915338, 918571, 920540, 922975, 927580, 932319, 935568, 939052, 946204, 952209, 955458, 958942, 966094, 972099, 975348, 978832, 985984, 991989, 995238, 998722, 1005874]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'relaxed')",[1068985]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'broken.')","[1092666, 1143609, 1209373]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingWhitespaceSeparatedTokens(opennlp.tools.tokenize.TokenSampleStreamTest)')","[6419, 52634, 53502, 89307, 101706, 132552, 132935, 194334, 195314, 236383, 272180, 272537, 330296, 331220, 369657, 408601, 409010, 474049, 475085, 518786, 562106, 562554, 633053, 634173, 681822, 727886, 728360, 802499, 803675, 1023047, 1023529]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'agreement')","[1121462, 1183663]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===CJT:np')","[890375, 903673, 916727, 928969, 947709, 967599, 987489, 1007379]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=======H:prop(""José_Eduardo_Degrazia"" <hum> <np-close> M S)\tJosé_Eduardo_Degrazia')","[886078, 899376, 912770, 925012, 941259, 961149, 981039, 1000929]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCountTruePositives(opennlp.tools.util.eval.FMeasureTest)')","[2816, 2840, 2864, 31213, 31244, 31275, 32577, 32608, 32639, 80979, 81003, 81027, 99279, 117895, 117925, 117955, 118636, 118664, 118692, 170149, 170184, 170219, 171689, 171724, 171759, 226667, 226695, 226723, 258527, 258555, 258583, 259218, 259244, 259270, 307493, 307526, 307559, 308945, 308978, 309011, 360635, 360661, 360687, 392940, 392972, 393004, 393731, 393761, 393791, 448482, 448519, 448556, 450110, 450147, 450184, 508376, 508406, 508436, 544939, 544974, 545009, 545805, 545838, 545871, 605413, 605453, 605493, 607173, 607213, 607253, 670371, 670404, 670437, 709715, 709752, 709789, 710631, 710666, 710701, 773477, 773519, 773561, 775325, 775367, 775409, 860997, 861037, 861077, 861961, 862003, 862045]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<mv>')","[933980, 937075, 943663, 949652, 950151, 953870, 956965, 963553, 969542, 970041, 973760, 976855, 983443, 989432, 989931, 993650, 996745, 1003333, 1009322, 1009821]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'how')","[1091010, 1111411, 1115298, 1141305, 1169689, 1175097, 1207069, 1235453, 1240861]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '<s id=""63964"" ref=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=-11"" source=""SELVA 1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[882047, 895345, 909061, 921303, 937228, 957118, 977008, 996898]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'We')","[1037593, 1069561]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'around')",[1043481]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.Conll03NameSampleStreamTest')","[1012437, 1012460, 1012484, 1012507]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'want')",[1039929]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIntersects(opennlp.tools.util.SpanTest)')","[37909, 37940, 37971, 40637, 40668, 40699, 84051, 84075, 84099, 122694, 122724, 122754, 177709, 177744, 177779, 180789, 180824, 180859, 230251, 230279, 230307, 263000, 263028, 263056, 314621, 314654, 314687, 317525, 317558, 317591, 363963, 363989, 364015, 398065, 398097, 398129, 456474, 456511, 456548, 459730, 459767, 459804, 512216, 512246, 512276, 550553, 550588, 550623, 614053, 614093, 614133, 617573, 617613, 617653, 674595, 674628, 674661, 715655, 715692, 715729, 782549, 782591, 782633, 786245, 786287, 786329, 870639, 870679, 870719, 873595, 873637, 873679]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===N<:num(""6"" <NER:date> <card> <np-close> M P)\t6')","[879522, 892820, 906734, 918976, 932758, 952648, 972538, 992428]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ad.ADChunkSampleStreamTest')","[905159, 905182, 905206, 905229]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'up')","[1092804, 1098600, 1099152, 1123187, 1128569, 1143801, 1151865, 1152633, 1186063, 1193551, 1209565, 1217629, 1218397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'friend.')","[1116057, 1176153, 1241917]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'touch')",[1031929]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNameFinderWithMultipleTypes(opennlp.tools.namefind.NameFinderMETest)')","[67049, 67080, 67111, 70025, 70056, 70087, 95187, 95211, 95235, 142368, 142398, 142428, 210609, 210644, 210679, 213969, 214004, 214039, 243243, 243271, 243299, 281326, 281354, 281382, 345641, 345674, 345707, 348809, 348842, 348875, 376027, 376053, 376079, 419087, 419119, 419151, 491254, 491291, 491328, 494806, 494843, 494880, 526136, 526166, 526196, 573597, 573632, 573667, 651653, 651693, 651733, 655493, 655533, 655573, 689907, 689940, 689973, 740047, 740084, 740121, 822029, 822071, 822113, 826061, 826103, 826145, 1132883, 1132923, 1132963, 1134023, 1134065, 1134107]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseEmtpyToken(opennlp.tools.postag.POSSampleTest)')","[49565, 49596, 49627, 51053, 51084, 51115, 88371, 88395, 88419, 130697, 130727, 130757, 190869, 190904, 190939, 192549, 192584, 192619, 235291, 235319, 235347, 270453, 270481, 270509, 327029, 327062, 327095, 328613, 328646, 328679, 368643, 368669, 368695, 406618, 406650, 406682, 470386, 470423, 470460, 472162, 472199, 472236, 517616, 517646, 517676, 559931, 559966, 560001, 629093, 629133, 629173, 631013, 631053, 631093, 680535, 680568, 680601, 725583, 725620, 725657, 798341, 798383, 798425, 800357, 800399, 800441, 1018833, 1018873, 1018913, 1019821, 1019863, 1019905]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'managed')",[1052601]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenizerModelTest')","[6980, 134672, 274154, 410867, 564591, 730517]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'retired')",[1056857]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'be')","[1089009, 1091792, 1093218, 1138521, 1142393, 1144377, 1204285, 1208157, 1210141]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Although')","[1052761, 1064665]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Co.,')",[1132345]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.SimpleTokenizerTest')","[7214, 135666, 275080, 411929, 565755, 731749]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16209, 16240, 16271, 19557, 19588, 19619, 75603, 75627, 75651, 109531, 109561, 109591, 153209, 153244, 153279, 156989, 157024, 157059, 220395, 220423, 220451, 250731, 250759, 250787, 291521, 291554, 291587, 295085, 295118, 295151, 354811, 354837, 354863, 384008, 384040, 384072, 430574, 430611, 430648, 434570, 434607, 434644, 501656, 501686, 501716, 535155, 535190, 535225, 586053, 586093, 586133, 590373, 590413, 590453, 662979, 663012, 663045, 699363, 699400, 699437, 753149, 753191, 753233, 757685, 757727, 757769, 841333, 841373, 841413, 842785, 842827, 842869]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testBestSequenceWithValidator(opennlp.tools.util.BeamSearchTest)')","[30314, 31058, 80763, 99197, 117351, 169134, 169974, 226415, 258021, 306536, 307328, 360401, 392358, 447409, 448297, 508106, 544300, 604253, 605213, 670074, 709038, 772259, 773267, 859609, 860275]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=======,')","[886130, 899428, 912818, 925060, 941311, 961201, 981091, 1000981]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.util.SpanTest)')","[36917, 36948, 36979, 39645, 39676, 39707, 83283, 83307, 83331, 121734, 121764, 121794, 176589, 176624, 176659, 179669, 179704, 179739, 229355, 229383, 229411, 262104, 262132, 262160, 313565, 313598, 313631, 316469, 316502, 316535, 363131, 363157, 363183, 397041, 397073, 397105, 455290, 455327, 455364, 458546, 458583, 458620, 511256, 511286, 511316, 549433, 549468, 549503, 612773, 612813, 612853, 616293, 616333, 616373, 673539, 673572, 673605, 714471, 714508, 714545, 781205, 781247, 781289, 784901, 784943, 784985, 869359, 869399, 869439, 872251, 872293, 872335]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'mortal')",[1064921]
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'like')",[1070473]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<quant>')","[942891, 962781, 982671, 1002561]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'bak')","[1124084, 1187311]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'year')","[1027539, 1028481]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'considering')","[1258401, 1259193]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEvaluator(opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest)')","[7730, 7754, 7778, 59733, 59764, 59795, 61593, 61624, 61655, 92019, 92043, 92067, 102534, 137449, 137479, 137509, 137590, 137618, 137646, 202349, 202384, 202419, 204449, 204484, 204519, 239547, 239575, 239603, 276741, 276769, 276797, 276872, 276898, 276924, 337853, 337886, 337919, 339833, 339866, 339899, 372595, 372621, 372647, 413834, 413866, 413898, 413985, 414015, 414045, 482522, 482559, 482596, 484742, 484779, 484816, 522176, 522206, 522236, 567843, 567878, 567913, 568009, 568042, 568075, 642213, 642253, 642293, 644613, 644653, 644693, 685551, 685584, 685617, 733959, 733996, 734033, 734135, 734170, 734205, 812117, 812159, 812201, 814637, 814679, 814721, 1075641, 1075681, 1075721, 1075805, 1075847, 1075889]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'coax')","[1124659, 1188111]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'quite')","[1097289, 1099589, 1150041, 1153241, 1215805, 1219005]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.LeipzigDoccatSampleStreamTest')","[3938, 124630, 264804, 400133, 552819, 718053]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'only')","[1094759, 1105983, 1125717, 1146521, 1162137, 1189583, 1212285, 1227901]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.cmdline.CLITest')","[896, 106668, 248062, 380951, 531807, 695821]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testMeanCalculation(opennlp.tools.util.eval.MeanTest)')","[3050, 3074, 3098, 33321, 33352, 33383, 34561, 34592, 34623, 81939, 81963, 81987, 99529, 119369, 119399, 119429, 119510, 119538, 119566, 172529, 172564, 172599, 173929, 173964, 173999, 227787, 227815, 227843, 259901, 259929, 259957, 260032, 260058, 260084, 309737, 309770, 309803, 311057, 311090, 311123, 361675, 361701, 361727, 394514, 394546, 394578, 394665, 394695, 394725, 450998, 451035, 451072, 452478, 452515, 452552, 509576, 509606, 509636, 546663, 546698, 546733, 546829, 546862, 546895, 608133, 608173, 608213, 609733, 609773, 609813, 671691, 671724, 671757, 711539, 711576, 711613, 711715, 711750, 711785, 776333, 776375, 776417, 778013, 778055, 778097, 864465, 864505, 864545, 864629, 864671, 864713]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'its')","[1120634, 1121508, 1123095, 1124935, 1128316, 1182511, 1183727, 1185935, 1188495, 1193199]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=P:v-fin(""ter"" <fmc> <mv> PR 3P IND VFIN)\ttêm')","[885038, 898336, 911810, 924052, 940219, 960109, 979999, 999889]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testGetStart(opennlp.tools.util.SpanTest)')","[38746, 41474, 84699, 100238, 123504, 178654, 181734, 231007, 263756, 315512, 318416, 364665, 398929, 457473, 460729, 513026, 551498, 615133, 618653, 675486, 716654, 783683, 787379, 871719, 874729]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Heinrich-Heine-Straße')",[1051321]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'help')",[1060217]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.dictionary.DictionaryTest)')","[18689, 18720, 18751, 21665, 21696, 21727, 76659, 76683, 76707, 110988, 111018, 111048, 156009, 156044, 156079, 159369, 159404, 159439, 221627, 221655, 221683, 252090, 252118, 252146, 294161, 294194, 294227, 297329, 297362, 297395, 355955, 355981, 356007, 385563, 385595, 385627, 433534, 433571, 433608, 437086, 437123, 437160, 502976, 503006, 503036, 536857, 536892, 536927, 589253, 589293, 589333, 593093, 593133, 593173, 664431, 664464, 664497, 701163, 701200, 701237, 756509, 756551, 756593, 760541, 760583, 760625, 844699, 844739, 844779, 846167, 846209, 846251]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDifferentCaseLookup(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16705, 16736, 16767, 20053, 20084, 20115, 75987, 76011, 76035, 110011, 110041, 110071, 153769, 153804, 153839, 157549, 157584, 157619, 220843, 220871, 220899, 251179, 251207, 251235, 292049, 292082, 292115, 295613, 295646, 295679, 355227, 355253, 355279, 384520, 384552, 384584, 431166, 431203, 431240, 435162, 435199, 435236, 502136, 502166, 502196, 535715, 535750, 535785, 586693, 586733, 586773, 591013, 591053, 591093, 663507, 663540, 663573, 699955, 699992, 700029, 753821, 753863, 753905, 758357, 758399, 758441, 841973, 842013, 842053, 843457, 843499, 843541]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'decided')","[1032793, 1058521, 1069145]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'grateful')","[1112860, 1171705, 1237469]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'into')","[1053145, 1059001, 1062873, 1064601, 1068057, 1069241]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<p[^>]*>', '<ext id=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[877931, 891229, 905273, 917515, 931167, 951057, 970947, 990837]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<si>')","[949815, 969705, 989595, 1009485]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '30303')","[1041945, 1059193]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'soon')","[1091907, 1142553, 1208317]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'become')","[1122727, 1185423]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'As')","[1089584, 1094253, 1097220, 1120749, 1139321, 1145817, 1149945, 1182671, 1205085, 1211581, 1215709]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'realized')",[1068761]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'metropolis')",[1068921]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'line')",[1056761]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenizerSimpleModel(opennlp.tools.tokenize.TokenizerMETest)')","[7145, 7169, 7193, 55765, 55796, 55827, 56633, 56664, 56695, 90483, 90507, 90531, 102098, 134844, 134874, 134904, 135105, 135133, 135161, 197869, 197904, 197939, 198849, 198884, 198919, 237755, 237783, 237811, 274314, 274342, 274370, 274557, 274583, 274609, 333629, 333662, 333695, 334553, 334586, 334619, 370931, 370957, 370983, 411051, 411083, 411115, 411330, 411360, 411390, 477786, 477823, 477860, 478822, 478859, 478896, 520256, 520286, 520316, 564793, 564828, 564863, 565099, 565132, 565165, 637093, 637133, 637173, 638213, 638253, 638293, 683439, 683472, 683505, 730731, 730768, 730805, 731055, 731090, 731125, 806741, 806783, 806825, 807917, 807959, 808001, 1027779, 1027819, 1027859, 1028103, 1028145, 1028187]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidPhraseAsSpan2(opennlp.tools.chunker.ChunkSampleTest)')","[61066, 63050, 92955, 102764, 138756, 203854, 206094, 240639, 277960, 339272, 341384, 373609, 415229, 484113, 486481, 523346, 569370, 643933, 646493, 686838, 735574, 813923, 816611, 1077463, 1079617]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'famous')","[1041849, 1044089, 1047257, 1060665]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '13,')",[1033977]
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'test,')",[1028665]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'semester,')",[1040569]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'guests')","[1095242, 1147193, 1212957]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'university.')",[1070137]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====>N:art(""um"" <arti> <-sam> DET M S)\tum')","[890687, 903985, 917015, 929257, 948021, 967911, 987801, 1007691]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<t[^>]*>', '<ext id=""1002.pesquisa da usp mapeia cultura livre em são paulo"">')","[887502, 900800, 914084, 926326, 944836, 964726, 984616, 1004506]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'leather?')","[1100785, 1154905, 1220669]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Sander')",[1049113]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'starts')","[1116977, 1177433, 1243197]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'moved')","[1029721, 1039481, 1058969, 1067865]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'anniversary.')",[1037561]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""I'd"")","[1029529, 1035193, 1049177, 1066265]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'good')","[1097519, 1127051, 1150361, 1191439, 1216125]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'forward')",[1041337]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'me.')",[1069081]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'boy')",[1054585]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.PlainTextByLineStreamTest')","[2417, 116849, 257553, 391822, 543713, 708417]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'cafe')",[1045241]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'much!')",[1035641]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Now,')",[1058105]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidReturnType(opennlp.tools.cmdline.ArgumentParserTest)')","[12985, 13016, 13047, 15217, 15248, 15279, 73971, 73995, 74019, 107217, 107247, 107277, 149569, 149604, 149639, 152089, 152124, 152159, 218491, 218519, 218547, 248573, 248601, 248629, 288089, 288122, 288155, 290465, 290498, 290531, 353043, 353069, 353095, 381538, 381570, 381602, 426726, 426763, 426800, 429390, 429427, 429464, 499616, 499646, 499676, 532451, 532486, 532521, 581893, 581933, 581973, 584773, 584813, 584853, 660735, 660768, 660801, 696503, 696540, 696577, 748781, 748823, 748865, 751805, 751847, 751889, 835569, 835609, 835649, 836861, 836903, 836945]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '1003 Casas, galpão utilizado para os festejos e até mesmo a capela em que os Arturos celebram seus rituais religiosos tiveram telhas e vidros destruídos, num episódio sem precedentes na comunidade.')","[887622, 900920, 914194, 926436, 944956, 964846, 984736, 1004626]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Seoul')","[1128845, 1193935]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'SOURCE: ref=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=-11"" source=""SELVA 1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=""')","[882071, 895369, 909083, 921325, 937252, 957142, 977032, 996922]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'company')","[1109410, 1110422, 1166905, 1168313, 1232669, 1234077]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Anibal')","[1247123, 1249789]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====>N:art(""o"" <artd> DET M S)\to')","[881633, 894931, 908679, 920921, 935981, 955871, 975761, 995651]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '1995.')",[1037785]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEvaluator(opennlp.tools.chunker.ChunkerEvaluatorTest)')","[7964, 7988, 8012, 61717, 61748, 61779, 64197, 64228, 64259, 93363, 93387, 93411, 102868, 139403, 139433, 139463, 139664, 139692, 139720, 204589, 204624, 204659, 207389, 207424, 207459, 241115, 241143, 241171, 278563, 278591, 278619, 278806, 278832, 278858, 339965, 339998, 340031, 342605, 342638, 342671, 374051, 374077, 374103, 415920, 415952, 415984, 416199, 416229, 416259, 484890, 484927, 484964, 487850, 487887, 487924, 523856, 523886, 523916, 570127, 570162, 570197, 570433, 570466, 570499, 644773, 644813, 644853, 647973, 648013, 648053, 687399, 687432, 687465, 736375, 736412, 736449, 736699, 736734, 736769, 814805, 814847, 814889, 818165, 818207, 818249, 1080421, 1080461, 1080501, 1080745, 1080787, 1080829]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:n(""organizador"" <np-def> <Hprof> <left> M S)\torganizador')","[881124, 894422, 908210, 920452, 935472, 955362, 975252, 995142]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'it.')","[1117161, 1177689, 1243453]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'immediately')",[1054265]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====H:n(""área"" <np-def> <L> F S)\tárea')","[884674, 897972, 911474, 923716, 939855, 959745, 979635, 999525]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.sentdetect.SentenceSampleTest)')","[5366, 47302, 47922, 87195, 101064, 128679, 128942, 188314, 189014, 233919, 268573, 268818, 324620, 325280, 367369, 404462, 404743, 467685, 468425, 516146, 557568, 557876, 626173, 626973, 678918, 723082, 723408, 795275, 796115, 1014985, 1015307]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:pron-pers(""eles"" M 3P NOM/PIV)\teles')","[882959, 896257, 909897, 922139, 938140, 958030, 977920, 997810]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'spent')",[1045977]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:Location>')","[1258137, 1258533]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenProbList(opennlp.tools.chunker.ChunkerMETest)')","[57997, 58028, 58059, 59237, 59268, 59299, 91539, 91563, 91587, 136575, 136605, 136635, 200389, 200424, 200459, 201789, 201824, 201859, 238987, 239015, 239043, 275927, 275955, 275983, 336005, 336038, 336071, 337325, 337358, 337391, 372075, 372101, 372127, 412900, 412932, 412964, 480450, 480487, 480524, 481930, 481967, 482004, 521576, 521606, 521636, 566819, 566854, 566889, 639973, 640013, 640053, 641573, 641613, 641653, 684891, 684924, 684957, 732875, 732912, 732949, 809765, 809807, 809849, 811445, 811487, 811529, 1073477, 1073517, 1073557, 1074457, 1074499, 1074541]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====H:prop(""Alcy_Cheuiche"" <hum> <np-close> M/F S)\tAlcy_Cheuiche')","[885740, 899038, 912458, 924700, 940921, 960811, 980701, 1000591]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '90')","[1110100, 1167865, 1233629]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'His')","[1048633, 1050169]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIsAllCapitalLetter(opennlp.tools.util.featuregen.StringPatternTest)')","[25881, 25912, 25943, 28361, 28392, 28423, 79251, 79275, 79299, 115050, 115080, 115110, 164129, 164164, 164199, 166929, 166964, 166999, 224651, 224679, 224707, 255876, 255904, 255932, 301817, 301850, 301883, 304457, 304490, 304523, 358763, 358789, 358815, 389901, 389933, 389965, 442118, 442155, 442192, 445078, 445115, 445152, 506216, 506246, 506276, 541609, 541644, 541679, 598533, 598573, 598613, 601733, 601773, 601813, 667995, 668028, 668061, 706191, 706228, 706265, 766253, 766295, 766337, 769613, 769655, 769697, 854119, 854159, 854199, 856067, 856109, 856151]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLookup(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14845, 14876, 14907, 18069, 18100, 18131, 75315, 75339, 75363, 109034, 109064, 109094, 151669, 151704, 151739, 155309, 155344, 155379, 220059, 220087, 220115, 250268, 250296, 250324, 290069, 290102, 290135, 293501, 293534, 293567, 354499, 354525, 354551, 383477, 383509, 383541, 428946, 428983, 429020, 432794, 432831, 432868, 501296, 501326, 501356, 534573, 534608, 534643, 584293, 584333, 584373, 588453, 588493, 588533, 662583, 662616, 662649, 698747, 698784, 698821, 751301, 751343, 751385, 755669, 755711, 755753, 839247, 839287, 839327, 840747, 840789, 840831]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<diff>')","[944683, 964573, 984463, 1004353]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseSnapshot(opennlp.tools.util.VersionTest)')","[22502, 23990, 77883, 98427, 112792, 160314, 161994, 223055, 253772, 298220, 299804, 357281, 387489, 438085, 439861, 504506, 538966, 594173, 596093, 666114, 703394, 761675, 763691, 849447, 850097]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCachingOfSentence(opennlp.tools.util.featuregen.CachedFeatureGeneratorTest)')","[23742, 24610, 78267, 98531, 113409, 161714, 162694, 223503, 254347, 299540, 300464, 357697, 388148, 439565, 440601, 504986, 539688, 595773, 596893, 666642, 704158, 763355, 764531, 850853, 851183]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'China')","[1120841, 1131283, 1182799, 1197327]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseClone(opennlp.tools.parser.ParseTest)')","[10505, 10536, 10567, 11745, 11776, 11807, 73299, 73323, 73347, 105692, 105722, 105752, 146769, 146804, 146839, 148169, 148204, 148239, 217707, 217735, 217763, 247154, 247182, 247210, 285449, 285482, 285515, 286769, 286802, 286835, 352315, 352341, 352367, 379907, 379939, 379971, 423766, 423803, 423840, 425246, 425283, 425320, 498776, 498806, 498836, 530661, 530696, 530731, 578693, 578733, 578773, 580293, 580333, 580373, 659811, 659844, 659877, 694607, 694644, 694681, 745421, 745463, 745505, 747101, 747143, 747185, 831795, 831835, 831875, 833135, 833177, 833219]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===N<:num(""6"" <NER:date> <card> <np-close> M P)\t6')","[878483, 891781, 905779, 918021, 931719, 951609, 971499, 991389]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'station')","[1100026, 1153849, 1219613]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'postcode')",[1033689]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDifferentCaseLookupCaseSensitive(opennlp.tools.dictionary.DictionaryTest)')","[18565, 18596, 18627, 21541, 21572, 21603, 76563, 76587, 76611, 110868, 110898, 110928, 155869, 155904, 155939, 159229, 159264, 159299, 221515, 221543, 221571, 251978, 252006, 252034, 294029, 294062, 294095, 297197, 297230, 297263, 355851, 355877, 355903, 385435, 385467, 385499, 433386, 433423, 433460, 436938, 436975, 437012, 502856, 502886, 502916, 536717, 536752, 536787, 589093, 589133, 589173, 592933, 592973, 593013, 664299, 664332, 664365, 701015, 701052, 701089, 756341, 756383, 756425, 760373, 760415, 760457, 844539, 844579, 844619, 845999, 846041, 846083]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'information')","[1102970, 1111710, 1157945, 1170105, 1223709, 1235869]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'got')","[1092505, 1093701, 1101038, 1105017, 1113274, 1143385, 1145049, 1155257, 1160793, 1172281, 1209149, 1210813, 1221021, 1226557, 1238045]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testFindMatchingPatternWithoutMatchingTokenBounds(opennlp.tools.namefind.RegexNameFinderTest)')","[65313, 65344, 65375, 66553, 66584, 66615, 94227, 94251, 94275, 140894, 140924, 140954, 208649, 208684, 208719, 210049, 210084, 210119, 242123, 242151, 242179, 279952, 279980, 280008, 343793, 343826, 343859, 345113, 345146, 345179, 374987, 375013, 375039, 417513, 417545, 417577, 489182, 489219, 489256, 490662, 490699, 490736, 524936, 524966, 524996, 571873, 571908, 571943, 649413, 649453, 649493, 651013, 651053, 651093, 688587, 688620, 688653, 738223, 738260, 738297, 819677, 819719, 819761, 821357, 821399, 821441, 1083487, 1083527, 1083567, 1083979, 1084021, 1084063]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'from')","[1091125, 1092827, 1096898, 1098255, 1099957, 1101084, 1111204, 1113435, 1117690, 1122313, 1125970, 1141465, 1143833, 1149497, 1151385, 1153753, 1155321, 1169401, 1172505, 1178425, 1184847, 1189935, 1207229, 1209597, 1215261, 1217149, 1219517, 1221085, 1235165, 1238269, 1244189]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'barbecue.')",[1052249]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '6,')","[1088848, 1108076, 1138297, 1165049, 1204061, 1230813]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleDict(opennlp.tools.tokenize.DetokenizationDictionaryTest)')","[53409, 53440, 53471, 54401, 54432, 54463, 89715, 89739, 89763, 133199, 133229, 133259, 195209, 195244, 195279, 196329, 196364, 196399, 236859, 236887, 236915, 272783, 272811, 272839, 331121, 331154, 331187, 332177, 332210, 332243, 370099, 370125, 370151, 409292, 409324, 409356, 474974, 475011, 475048, 476158, 476195, 476232, 519296, 519326, 519356, 562863, 562898, 562933, 634053, 634093, 634133, 635333, 635373, 635413, 682383, 682416, 682449, 728687, 728724, 728761, 803549, 803591, 803633, 804893, 804935, 804977, 1024325, 1024365, 1024405, 1024657, 1024699, 1024741]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'yesterday')",[1070329]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===,')","[885506, 898804, 912242, 924484, 940687, 960577, 980467, 1000357]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'When')","[1059449, 1067769]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'speak')","[1129535, 1194895]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsSlash(opennlp.tools.util.featuregen.StringPatternTest)')","[26501, 26532, 26563, 28981, 29012, 29043, 79731, 79755, 79779, 115650, 115680, 115710, 164829, 164864, 164899, 167629, 167664, 167699, 225211, 225239, 225267, 256436, 256464, 256492, 302477, 302510, 302543, 305117, 305150, 305183, 359283, 359309, 359335, 390541, 390573, 390605, 442858, 442895, 442932, 445818, 445855, 445892, 506816, 506846, 506876, 542309, 542344, 542379, 599333, 599373, 599413, 602533, 602573, 602613, 668655, 668688, 668721, 706931, 706968, 707005, 767093, 767135, 767177, 770453, 770495, 770537, 854919, 854959, 854999, 856907, 856949, 856991]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'bigger')","[1038713, 1068377]"
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'location-start')",[1254365]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.cmdline.ArgumentParserTest')","[841023, 841046, 841070, 841093]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hauptbahnhof?')",[1034521]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'England,')","[1111227, 1169433, 1235197]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testConvertParseToPosSample(opennlp.tools.parser.ChunkSampleStreamTest)')","[101, 8986, 72219, 96888, 103794, 103937, 145054, 216447, 245251, 245386, 245519, 283832, 351145, 377879, 378032, 421953, 497426, 528288, 528438, 528606, 576733, 658326, 692254, 692432, 743363, 829041, 829203]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testAddMethod(opennlp.tools.util.SequenceTest)')","[34778, 36018, 82587, 99716, 120453, 174174, 175574, 228543, 260911, 311288, 312608, 362377, 395672, 452737, 454217, 510386, 547932, 610013, 611613, 672582, 712882, 778307, 779987, 866741, 867391]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Edinburgh')",[1252711]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'p.m..')","[1117046, 1177529, 1243293]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPOSTagger(opennlp.tools.postag.POSTaggerMETest)')","[5975, 5999, 6023, 50433, 50464, 50495, 51549, 51580, 51611, 88659, 88683, 88707, 101499, 131194, 131224, 131254, 131455, 131483, 131511, 191849, 191884, 191919, 193109, 193144, 193179, 235627, 235655, 235683, 270916, 270944, 270972, 271159, 271185, 271211, 327953, 327986, 328019, 329141, 329174, 329207, 368955, 368981, 369007, 407149, 407181, 407213, 407428, 407458, 407488, 471422, 471459, 471496, 472754, 472791, 472828, 517976, 518006, 518036, 560513, 560548, 560583, 560819, 560852, 560885, 630213, 630253, 630293, 631653, 631693, 631733, 680931, 680964, 680997, 726199, 726236, 726273, 726523, 726558, 726593, 799517, 799559, 799601, 801029, 801071, 801113, 1020415, 1020455, 1020495, 1020739, 1020781, 1020823]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'path')","[1121922, 1184303]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Management')",[1132161]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'my')","[1031321, 1033369, 1034137, 1036217, 1039129, 1065849, 1067961, 1068089, 1069977]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.SequenceTest')","[868299, 868322, 868346, 868369]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsInt(opennlp.tools.util.SpanTest)')","[37630, 40358, 83835, 100049, 122424, 177394, 180474, 229999, 262748, 314324, 317228, 363729, 397777, 456141, 459397, 511946, 550238, 613693, 617213, 674298, 715322, 782171, 785867, 870279, 873217]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'grateful')",[1061753]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.doccat.DocumentSampleTest')","[1012859, 1012882, 1012906, 1012929]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'knew')","[1086939, 1097473, 1135641, 1150297, 1201405, 1216061]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'But')","[1033241, 1038969, 1044377, 1046841, 1053209, 1066393, 1068729]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'shoes?')","[1100509, 1154521, 1220285]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingEnglishSampleWithGermanAsLanguage(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[44481, 44512, 44543, 45597, 45628, 45659, 86355, 86379, 86403, 126670, 126700, 126730, 185129, 185164, 185199, 186389, 186424, 186459, 232939, 232967, 232995, 266704, 266732, 266760, 321617, 321650, 321683, 322805, 322838, 322871, 366459, 366485, 366511, 402313, 402345, 402377, 464318, 464355, 464392, 465650, 465687, 465724, 515096, 515126, 515156, 555209, 555244, 555279, 622533, 622573, 622613, 623973, 624013, 624053, 677763, 677796, 677829, 720583, 720620, 720657, 791453, 791495, 791537, 792965, 793007, 793049, 1011079, 1011119, 1011159, 1011739, 1011781, 1011823]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====H:n(""área"" <np-def> <L> F S)\tárea')","[882551, 895849, 909523, 921765, 937732, 957622, 977512, 997402]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'our')","[1037465, 1038073, 1039609, 1055193, 1058617]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNames(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[43737, 43768, 43799, 44977, 45008, 45039, 85971, 85995, 86019, 126053, 126083, 126113, 184289, 184324, 184359, 185689, 185724, 185759, 232491, 232519, 232547, 266129, 266157, 266185, 320825, 320858, 320891, 322145, 322178, 322211, 366043, 366069, 366095, 401654, 401686, 401718, 463430, 463467, 463504, 464910, 464947, 464984, 514616, 514646, 514676, 554487, 554522, 554557, 621573, 621613, 621653, 623173, 623213, 623253, 677235, 677268, 677301, 719819, 719856, 719893, 790445, 790487, 790529, 792125, 792167, 792209, 930113, 930153, 930193, 930773, 930815, 930857]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'really')","[1066297, 1069785]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'after')","[1105086, 1160889, 1226653]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'heard')","[1087192, 1101429, 1135993, 1155801, 1201757, 1221565]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'merely')",[1049657]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==N<:adj(""religioso"" <np-close> M P)\treligiosos')","[890167, 903465, 916535, 928777, 947501, 967391, 987281, 1007171]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'get')","[1031865, 1046265, 1049465]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sounding')",[1030937]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=SUB:conj-s(""que"" <clb-fs>)\tque')","[889803, 903101, 916199, 928441, 947137, 967027, 986917, 1006807]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'that')","[1087261, 1087905, 1092574, 1101475, 1104235, 1106029, 1106098, 1112446, 1118403, 1122037, 1136089, 1136985, 1143481, 1155865, 1159705, 1162201, 1162297, 1171129, 1179417, 1184463, 1201853, 1202749, 1209245, 1221629, 1225469, 1227965, 1228061, 1236893, 1245181]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'agency')","[1109847, 1167513, 1233277]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.ChunkSampleStreamTest')","[56, 77, 103909, 245358, 245493, 378002, 528403, 528573, 692397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'seen')","[1086801, 1126292, 1135449, 1190383, 1201213]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '========,')","[886260, 899558, 912938, 925180, 941441, 961331, 981221, 1001111]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'But')","[1090113, 1094736, 1099014, 1100877, 1105937, 1116402, 1118311, 1140057, 1146489, 1152441, 1155033, 1162073, 1176633, 1179289, 1205821, 1212253, 1218205, 1220797, 1227837, 1242397, 1245053]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'pedestrians.')",[1060377]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '86th')",[1031417]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'anniversary.')","[1093655, 1144985, 1210749]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pressure')","[1131214, 1197231]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'other')","[1127925, 1192655]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==CJT:np')","[878603, 878819, 882335, 887790, 891901, 892117, 895633, 901088, 905889, 906087, 909325, 914348, 918131, 918329, 921567, 926590, 931839, 932055, 937516, 945124, 951729, 951945, 957406, 965014, 971619, 971835, 977296, 984904, 991509, 991725, 997186, 1004794]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '""Westbad"".')","[1100049, 1153881, 1219645]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '============,')","[886910, 900208, 913538, 925780, 942091, 961981, 981871, 1001761]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'colour.')","[1100670, 1154745, 1220509]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'reckon.')","[1091309, 1141721, 1207485]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Rasmussen')","[1252967, 1253479]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======,')","[883271, 896569, 910183, 922425, 938452, 958342, 978232, 998122]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.VersionTest')","[1715, 113147, 254103, 387868, 539381, 703833]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hint')","[1098025, 1151065, 1216829]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<artd>')","[934482, 936570, 936807, 942666, 943794, 948889, 949132, 949486, 954372, 956460, 956697, 962556, 963684, 968779, 969022, 969376, 974262, 976350, 976587, 982446, 983574, 988669, 988912, 989266, 994152, 996240, 996477, 1002336, 1003464, 1008559, 1008802, 1009156]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Euro,')","[1091263, 1141657, 1207421]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'told')","[1030329, 1042617]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'wounds')",[1052825]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Cafe')",[1209789]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'never')",[1047513]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'drove')","[1108168, 1165177, 1230941]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testPerfect(opennlp.tools.util.eval.FMeasureTest)')","[31709, 31740, 31771, 33073, 33104, 33135, 81363, 81387, 81411, 118375, 118405, 118435, 170709, 170744, 170779, 172249, 172284, 172319, 227115, 227143, 227171, 258975, 259003, 259031, 308021, 308054, 308087, 309473, 309506, 309539, 361051, 361077, 361103, 393452, 393484, 393516, 449074, 449111, 449148, 450702, 450739, 450776, 508856, 508886, 508916, 545499, 545534, 545569, 606053, 606093, 606133, 607813, 607853, 607893, 670899, 670932, 670965, 710307, 710344, 710381, 774149, 774191, 774233, 775997, 776039, 776081, 861637, 861677, 861717, 862633, 862675, 862717]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'decided')","[1089791, 1110330, 1118679, 1139609, 1168185, 1179801, 1205373, 1233949, 1245565]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ten')","[1114838, 1174457, 1240221]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Marie')","[1090159, 1140121, 1205885]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Veilchenstra§e')","[1095357, 1101751, 1147353, 1156249]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'own')","[1094092, 1117851, 1145593, 1178649, 1211357, 1244413]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', ':')","[881997, 895295, 909015, 921257, 936345, 956235, 976125, 996015]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Ackerman')","[1247283, 1249949]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'we')","[1037849, 1038489, 1039449, 1043737, 1045945, 1058457, 1058937]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'health')","[1127074, 1191471]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'relationship')","[1126959, 1191311]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'DramenstraÃ\x9fe')",[1232317]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=========,')","[886416, 899714, 913082, 925324, 941597, 961487, 981377, 1001267]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'came')",[1059641]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'discussions')","[1125648, 1189487]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'who')","[1104120, 1107823, 1108628, 1113780, 1159545, 1164697, 1165817, 1172985, 1225309, 1230461, 1231581, 1238749]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'a>')","[1259460, 1259552]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==>N:art(""o"" <artd> DET M S)\to')","[881100, 894398, 908188, 920430, 935448, 955338, 975228, 995118]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.cmdline.ArgumentParserTest')","[1130, 108022, 249324, 382397, 533391, 697497]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'look')","[1100555, 1103867, 1154585, 1159193, 1220349, 1224957]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======H:n(""festejo"" <np-def> <occ> M P)\tfestejos')","[887958, 901256, 914502, 926744, 945292, 965182, 985072, 1004962]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'French')","[1096530, 1148985, 1214749]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Our')",[1057305]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.WhitespaceTokenizerTest')","[1075069, 1075092, 1075116, 1075139]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<t[^>]*>', '<ext id=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[877955, 891253, 905295, 917537, 931191, 951081, 970971, 990861]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'relatively')","[1128937, 1194063]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'quickly')","[1118380, 1179385, 1245149]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Michael')","[1034233, 1067705]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'years')","[1094805, 1110123, 1146585, 1167897, 1212349, 1233661]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:type_3-/;.,&%$>')",[1259325]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testAsSpan(opennlp.tools.chunker.ChunkSampleTest)')","[60601, 60632, 60663, 62585, 62616, 62647, 92595, 92619, 92643, 138306, 138336, 138366, 203329, 203364, 203399, 205569, 205604, 205639, 240219, 240247, 240275, 277540, 277568, 277596, 338777, 338810, 338843, 340889, 340922, 340955, 373219, 373245, 373271, 414749, 414781, 414813, 483558, 483595, 483632, 485926, 485963, 486000, 522896, 522926, 522956, 568845, 568880, 568915, 643333, 643373, 643413, 645893, 645933, 645973, 686343, 686376, 686409, 735019, 735056, 735093, 813293, 813335, 813377, 815981, 816023, 816065, 1076863, 1076903, 1076943, 1078987, 1079029, 1079071]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'prefered')",[1033497]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==CJT:num(""545"" <cjt-acc> <NER:prednum> <card> <right> M/F P)\t545')","[880328, 893626, 907478, 919720, 933564, 953454, 973344, 993234]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'She')","[1087836, 1090573, 1098646, 1100072, 1112216, 1136889, 1140697, 1151929, 1153913, 1170809, 1202653, 1206461, 1217693, 1219677, 1236573]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '==========,')","[886624, 899922, 913274, 925516, 941805, 961695, 981585, 1001475]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest')","[844069, 844092, 844116, 844139]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Our')","[1109364, 1166841, 1232605]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'Sounds')",[1070449]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</t>', '<ext id=""1002.pesquisa da usp mapeia cultura livre em são paulo"">')","[887526, 900824, 914106, 926348, 944860, 964750, 984640, 1004530]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===>N:art(""o"" <-sam> <artd> DET F S)\ta')","[880908, 894206, 908012, 920254, 935256, 955146, 975036, 994926]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'languages,')",[1041113]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '.')","[880692, 887430, 891181, 893990, 900728, 904479, 907814, 914018, 917471, 920056, 926260, 929713, 933928, 942611, 948515, 953818, 962501, 968405, 973708, 982391, 988295, 993598, 1002281, 1008185]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '============APP:np')","[883655, 896953, 910535, 922777, 938836, 958726, 978616, 998506]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testReadTestStream(opennlp.tools.parser.ParseSampleStreamTest)')","[335, 9110, 9482, 72411, 96970, 104308, 104451, 145194, 145614, 216671, 245864, 245997, 283964, 284360, 351353, 378429, 378582, 422101, 422545, 497666, 529042, 529210, 576893, 577373, 658590, 692894, 693072, 743531, 744035, 829791, 829953]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'pointed')",[1060985]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.CachedFeatureGeneratorTest')","[851755, 851778, 851802, 851825]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '========H:prop(""Lau_Siqueira"" <hum> <np-close> M/F S)\tLau_Siqueira')","[883319, 896617, 910227, 922469, 938500, 958390, 978280, 998170]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDetokenizer(opennlp.tools.tokenize.DictionaryDetokenizerTest)')","[6326, 6350, 6374, 52169, 52200, 52231, 53037, 53068, 53099, 89139, 89163, 89187, 101664, 132205, 132235, 132265, 132466, 132494, 132522, 193809, 193844, 193879, 194789, 194824, 194859, 236187, 236215, 236243, 271857, 271885, 271913, 272100, 272126, 272152, 329801, 329834, 329867, 330725, 330758, 330791, 369475, 369501, 369527, 408230, 408262, 408294, 408509, 408539, 408569, 473494, 473531, 473568, 474530, 474567, 474604, 518576, 518606, 518636, 561699, 561734, 561769, 562005, 562038, 562071, 632453, 632493, 632533, 633573, 633613, 633653, 681591, 681624, 681657, 727455, 727492, 727529, 727779, 727814, 727849, 801869, 801911, 801953, 803045, 803087, 803129, 1022337, 1022377, 1022417, 1022661, 1022703, 1022745]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'knew')","[1029337, 1042361]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkSampleStreamTest')","[7565, 137277, 276581, 413650, 567641, 733745]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.parser.chunking.ParserTest')","[834837, 834860, 834884, 834907]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Kaiserstra§e')","[1090688, 1140857]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '83454')",[1054905]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.doccat.DocumentSampleTest)')","[4688, 4712, 4736, 45225, 45256, 45287, 45969, 46000, 46031, 86547, 86571, 86595, 100817, 127047, 127077, 127107, 127188, 127216, 127244, 185969, 186004, 186039, 186809, 186844, 186879, 233163, 233191, 233219, 267055, 267083, 267111, 267186, 267212, 267238, 322409, 322442, 322475, 323201, 323234, 323267, 366667, 366693, 366719, 402716, 402748, 402780, 402867, 402897, 402927, 465206, 465243, 465280, 466094, 466131, 466168, 515336, 515366, 515396, 555651, 555686, 555721, 555817, 555850, 555883, 623493, 623533, 623573, 624453, 624493, 624533, 678027, 678060, 678093, 721051, 721088, 721125, 721227, 721262, 721297, 792461, 792503, 792545, 793469, 793511, 793553, 1012165, 1012205, 1012245, 1012329, 1012371, 1012413]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.LeipzigDoccatSampleStreamTest')","[877063, 877086, 877110, 877133]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'VFIN')","[934084, 937179, 943767, 949787, 950263, 953974, 957069, 963657, 969677, 970153, 973864, 976959, 983547, 989567, 990043, 993754, 996849, 1003437, 1009457, 1009933]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Spain,')","[1096921, 1149529, 1215293]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Unter-den-Linden')","[1099750, 1153465, 1219229]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'friend.')",[1065913]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', 'ACC:fcl')","[888945, 902243, 915407, 927649, 946279, 966169, 986059, 1005949]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Euro,')",[1034617]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==P<:pron-det(""outro"" <KOMP> <diff> DET M P)\toutros')","[883823, 897121, 910689, 922931, 939004, 958894, 978784, 998674]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.Conll03NameSampleStreamTest')","[4523, 126875, 266895, 402532, 555449, 720837]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'finally')","[1054009, 1058489, 1061849]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsEmptyWithNullString(opennlp.tools.util.StringUtilTest)')","[34406, 35646, 82395, 99654, 120076, 173754, 175154, 228319, 260560, 310892, 312212, 362169, 395269, 452293, 453773, 510146, 547490, 609533, 611133, 672318, 712414, 777803, 779483, 865487, 866321]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDifferentCaseLookup(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16674, 20022, 75963, 97947, 109981, 153734, 157514, 220815, 251151, 292016, 295580, 355201, 384488, 431129, 435125, 502106, 535680, 586653, 590973, 663474, 699918, 753779, 758315, 841933, 843415]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===N<:prop(""Cristovão_Colombo"" <hum> <np-close> M S)\tCristovão_Colombo')","[878867, 892165, 906131, 918373, 932103, 951993, 971883, 991773]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSingleTokeNameAtSentenceEnd(opennlp.tools.namefind.DictionaryNameFinderTest)')","[63794, 64786, 93723, 102972, 139990, 206934, 208054, 241535, 279110, 342176, 343232, 374441, 416547, 487369, 488553, 524306, 570814, 647453, 648733, 687894, 737102, 817619, 818963, 1081451, 1082269]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'quickly')",[1068793]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====CO:conj-c(""e"" <co-subj>)\te')","[889491, 902789, 915911, 928153, 946825, 966715, 986605, 1006495]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'turbulent')","[1110169, 1167961, 1233725]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testChunkAsList(opennlp.tools.chunker.ChunkerMETest)')","[57842, 59082, 91419, 102368, 136425, 200214, 201614, 238847, 275787, 335840, 337160, 371945, 412740, 480265, 481745, 521426, 566644, 639773, 641373, 684726, 732690, 809555, 811235, 1073277, 1074247]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""that's"")",[1046777]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNameFinder(opennlp.tools.namefind.NameFinderMETest)')","[8525, 66770, 69746, 94971, 103305, 142098, 142961, 210294, 213654, 242991, 281074, 281879, 345344, 348512, 375793, 418799, 419720, 490921, 494473, 525866, 573282, 574290, 651293, 655133, 689610, 739714, 740780, 821651, 825683, 1132523, 1133645]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'bigger')","[1094552, 1118035, 1146233, 1178905, 1211997, 1244669]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.postag.POSDictionaryTest)')","[5741, 5765, 5789, 48573, 48604, 48635, 49937, 49968, 49999, 87699, 87723, 87747, 101249, 129720, 129750, 129780, 130221, 130249, 130277, 189749, 189784, 189819, 191289, 191324, 191359, 234507, 234535, 234563, 269542, 269570, 269598, 270009, 270035, 270061, 325973, 326006, 326039, 327425, 327458, 327491, 367915, 367941, 367967, 405575, 405607, 405639, 406110, 406140, 406170, 469202, 469239, 469276, 470830, 470867, 470904, 516776, 516806, 516836, 558789, 558824, 558859, 559375, 559408, 559441, 627813, 627853, 627893, 629573, 629613, 629653, 679611, 679644, 679677, 724375, 724412, 724449, 724995, 725030, 725065, 796997, 797039, 797081, 798845, 798887, 798929, 1016947, 1016987, 1017027, 1017591, 1017633, 1017675]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'magazine.')",[1054713]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'give')","[1101567, 1122980, 1155993, 1185775, 1221757]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.cmdline.CLITest')","[835259, 835282, 835306, 835329]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'information.')","[1104787, 1160473, 1226237]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testStandardCase(opennlp.tools.util.AbstractEventStreamTest)')","[3494, 36390, 38994, 82971, 99820, 121207, 121470, 175994, 178934, 228991, 261613, 261858, 313004, 315776, 362793, 396478, 396759, 454661, 457769, 510866, 548816, 549124, 612093, 615453, 673110, 713818, 714144, 780491, 784019, 868409, 868731]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Chesterstr.')",[1042873]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ad.ADNameSampleStreamTest')","[4406, 126258, 266320, 401873, 554727, 720073]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSet(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[1412, 1436, 1460, 16085, 16116, 16147, 19433, 19464, 19495, 75507, 75531, 75555, 97842, 109411, 109441, 109471, 110512, 110540, 110568, 153069, 153104, 153139, 156849, 156884, 156919, 220283, 220311, 220339, 250619, 250647, 250675, 251646, 251672, 251698, 291389, 291422, 291455, 294953, 294986, 295019, 354707, 354733, 354759, 383880, 383912, 383944, 385055, 385085, 385115, 430426, 430463, 430500, 434422, 434459, 434496, 501536, 501566, 501596, 535015, 535050, 535085, 536301, 536334, 536367, 585893, 585933, 585973, 590213, 590253, 590293, 662847, 662880, 662913, 699215, 699252, 699289, 700575, 700610, 700645, 752981, 753023, 753065, 757517, 757559, 757601, 841173, 841213, 841253, 842617, 842659, 842701]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=============H:prop(""Jane_Tutikian"" <hum> <np-close> F S)\tJane_Tutikian')","[883679, 896977, 910557, 922799, 938860, 958750, 978640, 998530]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<p[^>]*>', '')","[878051, 891349, 905383, 917625, 931287, 951177, 971067, 990957]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'which')","[1038201, 1052537, 1053721, 1061497]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Could')","[1092689, 1101521, 1143641, 1155929, 1209405, 1221693]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'us,')",[1040025]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '')","[878027, 891325, 905361, 917603, 931263, 951153, 971043, 990933]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'you')","[1035577, 1036377, 1046233, 1047161, 1047705, 1051513, 1065145, 1065433, 1065561, 1065977, 1067385, 1067513]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'longer')",[1031673]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===>N:art(""o"" <artd> <-sam> DET M S)\to')","[878411, 891709, 905713, 917955, 931647, 951537, 971427, 991317]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParseWithError(opennlp.tools.postag.POSSampleTest)')","[49813, 49844, 49875, 51301, 51332, 51363, 88563, 88587, 88611, 130937, 130967, 130997, 191149, 191184, 191219, 192829, 192864, 192899, 235515, 235543, 235571, 270677, 270705, 270733, 327293, 327326, 327359, 328877, 328910, 328943, 368851, 368877, 368903, 406874, 406906, 406938, 470682, 470719, 470756, 472458, 472495, 472532, 517856, 517886, 517916, 560211, 560246, 560281, 629413, 629453, 629493, 631333, 631373, 631413, 680799, 680832, 680865, 725879, 725916, 725953, 798677, 798719, 798761, 800693, 800735, 800777, 1019153, 1019193, 1019233, 1020157, 1020199, 1020241]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'there')","[1108191, 1113090, 1127189, 1165209, 1172025, 1191631, 1230973, 1237789]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Daniel')","[1247507, 1250173]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'takes')","[1116609, 1176921, 1242685]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testInvalidMethodName(opennlp.tools.cmdline.ArgumentParserTest)')","[1154, 12830, 15062, 73851, 97425, 107067, 108050, 149394, 151914, 218351, 248433, 249350, 287924, 290300, 352913, 381378, 382427, 426541, 429205, 499466, 532276, 533424, 581693, 584573, 660570, 696318, 697532, 748571, 751595, 835369, 836651]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'answered')",[1030873]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'talks')","[1123877, 1124843, 1187023, 1188367]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'delicious')",[1043129]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '12,')","[1101774, 1156281, 1222045]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==N<:v-pcp(""confirmar"" <np-close> F S)\tconfirmada')","[885194, 898492, 911954, 924196, 940375, 960265, 980155, 1000045]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'own')","[1038137, 1068153]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'wrote')",[1030649]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '1001 Até o momento, mais de 98 profissionais da área da cultura e poetas têm a presença confirmada, entre eles, Armindo Trevisan, Alcy Cheuiche, Donaldo Schüller, José Eduardo Degrazia, Lau Siqueira, Liana Timm, Luiz Coronel, Mário Pirata, Oliveira Silveira, Jane Tutikian, Paulo Custódio, entre outros.')","[882095, 895393, 909105, 921347, 937276, 957166, 977056, 996946]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokSpanEventStreamTest')","[1027437, 1027460, 1027484, 1027507]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14349, 14380, 14411, 17573, 17604, 17635, 74931, 74955, 74979, 108554, 108584, 108614, 151109, 151144, 151179, 154749, 154784, 154819, 219611, 219639, 219667, 249820, 249848, 249876, 289541, 289574, 289607, 292973, 293006, 293039, 354083, 354109, 354135, 382965, 382997, 383029, 428354, 428391, 428428, 432202, 432239, 432276, 500816, 500846, 500876, 534013, 534048, 534083, 583653, 583693, 583733, 587813, 587853, 587893, 662055, 662088, 662121, 698155, 698192, 698229, 750629, 750671, 750713, 754997, 755039, 755081, 838607, 838647, 838687, 840075, 840117, 840159]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'party')","[1116195, 1116954, 1176345, 1177401, 1242109, 1243165]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Fritsch.')",[1048761]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'school')","[1086686, 1135289, 1201053]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '6th')",[1040537]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Neil')","[1246995, 1249661]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '======H:prp(""de"" <sam-> <np-close>)\tde')","[884726, 898024, 911522, 923764, 939907, 959797, 979687, 999577]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'accident')","[1062169, 1063193]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest)')","[46186, 46682, 86811, 100920, 127651, 187054, 187614, 233471, 267617, 323432, 323960, 366953, 403362, 466353, 466945, 515666, 556360, 624733, 625373, 678390, 721802, 793763, 794435, 1013129, 1013459]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWithoutNameTypes(opennlp.tools.namefind.NameSampleDataStreamTest)')","[8408, 65654, 67638, 94395, 103159, 141241, 141984, 209034, 211274, 242319, 280275, 280968, 344156, 346268, 375169, 417884, 418677, 489589, 491957, 525146, 572280, 573148, 649853, 652413, 688818, 738654, 739572, 820139, 822827, 1084365, 1085327]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SentenceSampleTest')","[1016375, 1016398, 1016422, 1016445]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'day,')","[1111825, 1170265, 1236029]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTreeInsertParserTraining(opennlp.tools.parser.treeinsert.ParserTest)')","[686, 10722, 11962, 73371, 97240, 105919, 106062, 147014, 148414, 217791, 247365, 247498, 285680, 287000, 352393, 380150, 380303, 424025, 425505, 498866, 530928, 531096, 578973, 580573, 659910, 694890, 695068, 745715, 747395, 833353, 833515]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenizerEvaluatorTest')","[6746, 134158, 273676, 410317, 563987, 729877]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====,')","[883127, 896425, 910051, 922293, 938308, 958198, 978088, 997978]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Luise')",[1040057]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '81234')",[1038297]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsWithLowerIntersect(opennlp.tools.util.SpanTest)')","[37413, 37444, 37475, 40141, 40172, 40203, 83667, 83691, 83715, 122214, 122244, 122274, 177149, 177184, 177219, 180229, 180264, 180299, 229803, 229831, 229859, 262552, 262580, 262608, 314093, 314126, 314159, 316997, 317030, 317063, 363547, 363573, 363599, 397553, 397585, 397617, 455882, 455919, 455956, 459138, 459175, 459212, 511736, 511766, 511796, 549993, 550028, 550063, 613413, 613453, 613493, 616933, 616973, 617013, 674067, 674100, 674133, 715063, 715100, 715137, 781877, 781919, 781961, 785573, 785615, 785657, 869999, 870039, 870079, 872923, 872965, 873007]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLineSegmentation(opennlp.tools.util.PlainTextByLineStreamTest)')","[2441, 29446, 30438, 80379, 99073, 116734, 116877, 168154, 169274, 225967, 257446, 257579, 305612, 306668, 359985, 391699, 391852, 446373, 447557, 507626, 543578, 543746, 603133, 604413, 669546, 708274, 708452, 771083, 772427, 858707, 858869]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'worked')","[1054489, 1054745]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testConvertParseToPosSample(opennlp.tools.parser.PosSampleStreamTest)')","[242, 266, 290, 8893, 8924, 8955, 9265, 9296, 9327, 72339, 72363, 72387, 96949, 104081, 104111, 104141, 104222, 104250, 104278, 144949, 144984, 145019, 145369, 145404, 145439, 216587, 216615, 216643, 245653, 245681, 245709, 245784, 245810, 245836, 283733, 283766, 283799, 284129, 284162, 284195, 351275, 351301, 351327, 378186, 378218, 378250, 378337, 378367, 378397, 421842, 421879, 421916, 422286, 422323, 422360, 497576, 497606, 497636, 528775, 528810, 528845, 528941, 528974, 529007, 576613, 576653, 576693, 577093, 577133, 577173, 658491, 658524, 658557, 692611, 692648, 692685, 692787, 692822, 692857, 743237, 743279, 743321, 743741, 743783, 743825, 829409, 829449, 829489, 829573, 829615, 829657]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sights,')","[1098830, 1152185, 1217949]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.AbstractEventStreamTest')","[3470, 121442, 261832, 396729, 549091, 714109]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDigits(opennlp.tools.util.featuregen.StringPatternTest)')","[2231, 2255, 2279, 25509, 25540, 25571, 27989, 28020, 28051, 78963, 78987, 79011, 98738, 114690, 114720, 114750, 116151, 116179, 116207, 163709, 163744, 163779, 166509, 166544, 166579, 224315, 224343, 224371, 255540, 255568, 255596, 256903, 256929, 256955, 301421, 301454, 301487, 304061, 304094, 304127, 358451, 358477, 358503, 389517, 389549, 389581, 391076, 391106, 391136, 441674, 441711, 441748, 444634, 444671, 444708, 505856, 505886, 505916, 541189, 541224, 541259, 542895, 542928, 542961, 598053, 598093, 598133, 601253, 601293, 601333, 667599, 667632, 667665, 705747, 705784, 705821, 707551, 707586, 707621, 765749, 765791, 765833, 769109, 769151, 769193, 853639, 853679, 853719, 855563, 855605, 855647]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '15')",[1029241]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'South')","[1120036, 1120933, 1123923, 1124268, 1124383, 1128224, 1181679, 1182927, 1187087, 1187567, 1187727, 1193071]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'founded')",[1057433]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Schulz')",[1056953]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===ADVL:prp(""em"" <left>)\tem')","[888102, 901400, 914634, 926876, 945436, 965326, 985216, 1005106]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'met')","[1098577, 1151833, 1217597]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====>N:art(""o"" <artd> DET F S)\ta')","[889647, 902945, 916055, 928297, 946981, 966871, 986761, 1006651]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:n(""ritual"" <np-def> <occ> <right> M P)\trituais')","[890115, 903413, 916487, 928729, 947449, 967339, 987229, 1007119]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'One')","[1111802, 1170233, 1235997]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'England,')",[1059609]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'met')",[1043769]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<li>')","[1132046, 1132230]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOnlyWithEntitiesWithTypes(opennlp.tools.namefind.NameFinderMETest)')","[67514, 70490, 95547, 103451, 142818, 211134, 214494, 243663, 281746, 346136, 349304, 376417, 419567, 491809, 495361, 526586, 574122, 652253, 656093, 690402, 740602, 822659, 826691, 1133483, 1134653]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'happy')",[1031001]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.eval.FMeasureTest')","[864315, 864338, 864362, 864385]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'have')","[1038553, 1039673, 1040889, 1050553]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'restaurant')",[1042457]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '""Twentytwo"".')","[1101360, 1155705, 1221469]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.eval.CrossValidationPartitionerTest')","[864737, 864760, 864784, 864807]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDropOverlappingSpans(opennlp.tools.namefind.NameFinderMETest)')","[66925, 66956, 66987, 69901, 69932, 69963, 95091, 95115, 95139, 142248, 142278, 142308, 210469, 210504, 210539, 213829, 213864, 213899, 243131, 243159, 243187, 281214, 281242, 281270, 345509, 345542, 345575, 348677, 348710, 348743, 375923, 375949, 375975, 418959, 418991, 419023, 491106, 491143, 491180, 494658, 494695, 494732, 526016, 526046, 526076, 573457, 573492, 573527, 651493, 651533, 651573, 655333, 655373, 655413, 689775, 689808, 689841, 739899, 739936, 739973, 821861, 821903, 821945, 825893, 825935, 825977, 1132723, 1132763, 1132803, 1133855, 1133897, 1133939]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====P<:n(""precedente"" <np-idf> <event> M P)\tprecedentes')","[890895, 904193, 917207, 929449, 948229, 968119, 988009, 1007899]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'programming')","[1096415, 1148825, 1214589]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.namefind.TokenNameFinderEvaluatorTest)')","[8759, 70614, 96699, 103723, 144532, 144795, 214634, 245007, 283344, 283589, 349436, 377665, 421397, 421678, 495509, 528026, 576126, 576434, 656253, 691986, 742722, 743048, 826859, 1259776, 1260098]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'GÃ¤rtnerweg')","[1230781, 1231837]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=============APP:prop(""Paulo_Custódio"" <hum> <np-close> M S)\tPaulo_Custódio')","[887118, 900416, 913730, 925972, 942299, 962189, 982079, 1001969]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sure.')",[1065337]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==CJT:n(""poeta"" <np-idf> <cjt-subj> <Hprof> <left> M P)\tpoetas')","[884986, 898284, 911762, 924004, 940167, 960057, 979947, 999837]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTypeWithNewLine(opennlp.tools.namefind.NameSampleTest)')","[69374, 71854, 96411, 103660, 144035, 213234, 216034, 244671, 282881, 348116, 350756, 377353, 420866, 494029, 496989, 527666, 575544, 654653, 657853, 691590, 742106, 825179, 828539, 1255733, 1257559]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Barmerstr.')","[1110974, 1169081, 1234845]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'near')","[1035001, 1058041, 1062201, 1063033]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Veilchenstra§e?')","[1101291, 1155609]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Yes,')","[1104281, 1159769, 1225533]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:prp(""de"" <NER2> <np-close>)\tde')","[879574, 892872, 906782, 919024, 932810, 952700, 972590, 992480]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'tried')","[1028761, 1052153]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHtmlNameSampleParsing(opennlp.tools.namefind.NameSampleDataStreamTest)')","[66305, 66336, 66367, 68289, 68320, 68351, 94899, 94923, 94947, 141871, 141901, 141931, 209769, 209804, 209839, 212009, 212044, 212079, 242907, 242935, 242963, 280863, 280891, 280919, 344849, 344882, 344915, 346961, 346994, 347027, 375715, 375741, 375767, 418556, 418588, 418620, 490366, 490403, 490440, 492734, 492771, 492808, 525776, 525806, 525836, 573015, 573050, 573085, 650693, 650733, 650773, 653253, 653293, 653333, 689511, 689544, 689577, 739431, 739468, 739505, 821021, 821063, 821105, 823709, 823751, 823793, 1085205, 1085245, 1085285, 1086209, 1086251, 1086293]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Integrated')",[1132115]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDigits(opennlp.tools.util.featuregen.StringPatternTest)')","[2207, 25478, 27958, 78939, 98718, 114660, 116123, 163674, 166474, 224287, 255512, 256877, 301388, 304028, 358425, 389485, 391046, 441637, 444597, 505826, 541154, 542862, 598013, 601213, 667566, 705710, 707516, 765707, 769067, 853599, 855521]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=====H:prp(""sem"" <np-close>)\tsem')","[890843, 904141, 917159, 929401, 948177, 968067, 987957, 1007847]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Ulm')",[1037145]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameSampleDataStreamTest')","[8384, 141956, 280942, 418647, 573115, 739537]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'arrival')","[1128753, 1193807]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===CJT:n(""telha"" <np-idf> <cjt-head> <cc-stone> <right> F P)\ttelhas')","[890297, 903595, 916655, 928897, 947631, 967521, 987411, 1007301]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'good')",[1042393]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'burnt')",[1052377]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'us,')","[1095518, 1147577, 1213341]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsWithHigherIntersect(opennlp.tools.util.SpanTest)')","[37537, 37568, 37599, 40265, 40296, 40327, 83763, 83787, 83811, 122334, 122364, 122394, 177289, 177324, 177359, 180369, 180404, 180439, 229915, 229943, 229971, 262664, 262692, 262720, 314225, 314258, 314291, 317129, 317162, 317195, 363651, 363677, 363703, 397681, 397713, 397745, 456030, 456067, 456104, 459286, 459323, 459360, 511856, 511886, 511916, 550133, 550168, 550203, 613573, 613613, 613653, 617093, 617133, 617173, 674199, 674232, 674265, 715211, 715248, 715285, 782045, 782087, 782129, 785741, 785783, 785825, 870159, 870199, 870239, 873091, 873133, 873175]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'called,')",[1033465]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '12424')","[1089998, 1139897, 1205661]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '===,')","[885532, 898830, 912266, 924508, 940713, 960603, 980493, 1000383]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'area')",[1054841]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Edinburgh,')",[1030553]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'multinational')","[1125878, 1189807]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '33,')",[1061465]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'rumour')",[1029625]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testStartsWith(opennlp.tools.util.SpanTest)')","[37754, 40482, 83931, 100070, 122544, 177534, 180614, 230111, 262860, 314456, 317360, 363833, 397905, 456289, 459545, 512066, 550378, 613853, 617373, 674430, 715470, 782339, 786035, 870439, 873385]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'officer.')","[1114401, 1173849, 1239613]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'or')","[1044889, 1050073]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNameFinder(opennlp.tools.namefind.NameFinderMETest)')","[8549, 8573, 8597, 66801, 66832, 66863, 69777, 69808, 69839, 94995, 95019, 95043, 103325, 142128, 142158, 142188, 142989, 143017, 143045, 210329, 210364, 210399, 213689, 213724, 213759, 243019, 243047, 243075, 281102, 281130, 281158, 281905, 281931, 281957, 345377, 345410, 345443, 348545, 348578, 348611, 375819, 375845, 375871, 418831, 418863, 418895, 419750, 419780, 419810, 490958, 490995, 491032, 494510, 494547, 494584, 525896, 525926, 525956, 573317, 573352, 573387, 574323, 574356, 574389, 651333, 651373, 651413, 655173, 655213, 655253, 689643, 689676, 689709, 739751, 739788, 739825, 740815, 740850, 740885, 821693, 821735, 821777, 825725, 825767, 825809, 1132563, 1132603, 1132643, 1133687, 1133729, 1133771]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'moment.')","[1093057, 1144153, 1209917]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'alone')","[1113366, 1172409, 1238173]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.eval.MeanTest')","[866471, 866494, 866518, 866541]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'The')","[1089906, 1097634, 1105270, 1108858, 1113228, 1114769, 1116931, 1123417, 1128500, 1139769, 1150521, 1161145, 1166137, 1172217, 1174361, 1177369, 1186383, 1193455, 1205533, 1216285, 1226909, 1231901, 1237981, 1240125, 1243133]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'better')","[1123026, 1185839]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.tokenize.TokenSampleTest)')","[6653, 53874, 54742, 89787, 101851, 133426, 133809, 195734, 196714, 236943, 272994, 273351, 331616, 332540, 370177, 409535, 409944, 475529, 476565, 519386, 563130, 563578, 634653, 635773, 682482, 728970, 729444, 804179, 805355, 1024875, 1025357]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '13')","[1114677, 1174233, 1239997]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '""Mondnacht""')","[1092988, 1144057, 1209821]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<civ>')","[934622, 935013, 935040, 954512, 954903, 954930, 974402, 974793, 974820, 994292, 994683, 994710]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testOnlyWithNames(opennlp.tools.namefind.NameFinderMETest)')","[67266, 70242, 95355, 103409, 142578, 210854, 214214, 243439, 281522, 345872, 349040, 376209, 419311, 491513, 495065, 526346, 573842, 651933, 655773, 690138, 740306, 822323, 826355, 1133163, 1134317]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'We')","[1093678, 1119024, 1145017, 1180281, 1210781, 1246045]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWithoutWindow(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[25230, 27462, 78843, 98697, 114403, 163394, 165914, 224175, 255273, 301124, 303500, 358321, 389210, 441341, 444005, 505706, 540852, 597693, 600573, 667434, 705390, 765371, 768395, 852505, 853339]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'talk')","[1127879, 1192591]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:n(""ritual"" <np-def> <occ> <right> M P)\trituais')","[890089, 903387, 916463, 928705, 947423, 967313, 987203, 1007093]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testRetrievingContent(opennlp.tools.chunker.ChunkSampleTest)')","[60198, 62182, 92283, 102617, 137916, 202874, 205114, 239855, 277176, 338348, 340460, 372881, 414333, 483077, 485445, 522506, 568390, 642813, 645373, 685914, 734538, 812747, 815435, 1076343, 1078441]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '============H:prop(""Oliveira_Silveira"" <hum> <np-close> F S)\tOliveira_Silveira')","[886858, 900156, 913490, 925732, 942039, 961929, 981819, 1001709]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SentenceSampleTest')","[5342, 128914, 268792, 404713, 557843, 723373]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ad.ADNameSampleStreamTest')","[1012015, 1012038, 1012062, 1012085]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Heidelberg.')",[1069753]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'call')",[1034841]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWordNumericTokeniztation(opennlp.tools.tokenize.SimpleTokenizerTest)')","[56385, 56416, 56447, 57501, 57532, 57563, 90867, 90891, 90915, 135461, 135491, 135521, 198569, 198604, 198639, 199829, 199864, 199899, 238203, 238231, 238259, 274889, 274917, 274945, 334289, 334322, 334355, 335477, 335510, 335543, 371347, 371373, 371399, 411710, 411742, 411774, 478526, 478563, 478600, 479858, 479895, 479932, 520736, 520766, 520796, 565515, 565550, 565585, 637893, 637933, 637973, 639333, 639373, 639413, 683967, 684000, 684033, 731495, 731532, 731569, 807581, 807623, 807665, 809093, 809135, 809177, 1070993, 1071033, 1071073, 1071653, 1071695, 1071737]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingSample(opennlp.tools.formats.ConllXPOSSampleStreamTest)')","[3845, 41722, 42218, 85083, 100342, 124258, 124401, 182014, 182574, 231455, 264458, 264591, 318680, 319208, 365081, 399735, 399888, 461025, 461617, 513506, 552382, 552550, 618973, 619613, 676014, 717590, 717768, 787715, 788387, 875907, 876069]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===CO:conj-c(""e"" <co-acc>)\te')","[888414, 901712, 914920, 927162, 945748, 965638, 985528, 1005418]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', 'thought')",[1070569]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '1')","[1118219, 1179161, 1244925]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'null')","[17, 35, 245223, 528258]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.DefaultEndOfSentenceScannerTest')","[4991, 128023, 267963, 403760, 556797, 722265]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'day,')",[1060441]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=============APP:prop(""Paulo_Custódio"" <hum> <np-close> M S)\tPaulo_Custódio')","[887144, 900442, 913754, 925996, 942325, 962215, 982105, 1001995]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'programs')","[1120703, 1182607]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Obama')","[1119898, 1121140, 1122497, 1125073, 1126154, 1128109, 1128661, 1129397, 1130133, 1181487, 1183215, 1185103, 1188687, 1190191, 1192911, 1193679, 1194703, 1195727, 1253287, 1258335, 1259127]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWithoutNameTypes(opennlp.tools.namefind.NameSampleDataStreamTest)')","[8432, 8456, 8480, 65685, 65716, 65747, 67669, 67700, 67731, 94419, 94443, 94467, 103179, 141271, 141301, 141331, 142012, 142040, 142068, 209069, 209104, 209139, 211309, 211344, 211379, 242347, 242375, 242403, 280303, 280331, 280359, 280994, 281020, 281046, 344189, 344222, 344255, 346301, 346334, 346367, 375195, 375221, 375247, 417916, 417948, 417980, 418707, 418737, 418767, 489626, 489663, 489700, 491994, 492031, 492068, 525176, 525206, 525236, 572315, 572350, 572385, 573181, 573214, 573247, 649893, 649933, 649973, 652453, 652493, 652533, 688851, 688884, 688917, 738691, 738728, 738765, 739607, 739642, 739677, 820181, 820223, 820265, 822869, 822911, 822953, 1084405, 1084445, 1084485, 1085369, 1085411, 1085453]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==H:prp(""até"" <left>)\tAté')","[884024, 897322, 910874, 923116, 939205, 959095, 978985, 998875]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<NER:address>')","[948567, 968457, 988347, 1008237]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testBestSequence(opennlp.tools.util.BeamSearchTest)')","[30221, 30252, 30283, 30965, 30996, 31027, 80691, 80715, 80739, 117261, 117291, 117321, 169029, 169064, 169099, 169869, 169904, 169939, 226331, 226359, 226387, 257937, 257965, 257993, 306437, 306470, 306503, 307229, 307262, 307295, 360323, 360349, 360375, 392262, 392294, 392326, 447298, 447335, 447372, 448186, 448223, 448260, 508016, 508046, 508076, 544195, 544230, 544265, 604133, 604173, 604213, 605093, 605133, 605173, 669975, 670008, 670041, 708927, 708964, 709001, 772133, 772175, 772217, 773141, 773183, 773225, 859489, 859529, 859569, 860149, 860191, 860233]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'know')","[1089239, 1101176, 1102809, 1103131, 1115712, 1116517, 1138841, 1155449, 1157721, 1158169, 1175673, 1176793, 1204605, 1221213, 1223485, 1223933, 1241437, 1242557]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'March')","[1093770, 1113044, 1145145, 1171961, 1210909, 1237725]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'know')","[1032057, 1047193, 1049273, 1049689, 1065465, 1066521]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'touch')","[1089124, 1138681, 1204445]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===N<:num(""2"" <card> <np-close> M/F P)\t2')","[879834, 893132, 907022, 919264, 933070, 952960, 972850, 992740]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenSampleStreamTest')","[6395, 132907, 272511, 408980, 562521, 728325]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'is.')","[1104350, 1159865, 1225629]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Oh')","[1116264, 1176441, 1242205]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Paris')",[1033113]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testDetokenizeToString(opennlp.tools.tokenize.DictionaryDetokenizerTest)')","[52293, 52324, 52355, 53161, 53192, 53223, 89235, 89259, 89283, 132325, 132355, 132385, 193949, 193984, 194019, 194929, 194964, 194999, 236299, 236327, 236355, 271969, 271997, 272025, 329933, 329966, 329999, 330857, 330890, 330923, 369579, 369605, 369631, 408358, 408390, 408422, 473642, 473679, 473716, 474678, 474715, 474752, 518696, 518726, 518756, 561839, 561874, 561909, 632613, 632653, 632693, 633733, 633773, 633813, 681723, 681756, 681789, 727603, 727640, 727677, 802037, 802079, 802121, 803213, 803255, 803297, 1022497, 1022537, 1022577, 1022829, 1022871, 1022913]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'finally')","[1106535, 1110307, 1112929, 1162905, 1168153, 1171801, 1228669, 1233917, 1237565]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'McKennedy')","[1087077, 1135833, 1201597]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<con>')","[950556, 970446, 990336, 1010226]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNames(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[43706, 44946, 85947, 100651, 126023, 184254, 185654, 232463, 266101, 320792, 322112, 366017, 401622, 463393, 464873, 514586, 554452, 621533, 623133, 677202, 719782, 790403, 792083, 930073, 930731]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'town.')","[1118817, 1179993, 1245757]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'streetname')","[1099359, 1152921, 1218685]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.CachedFeatureGeneratorTest')","[1832, 113524, 254454, 388271, 539823, 704301]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'here')","[1124199, 1128776, 1187471, 1193839]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==>N:art(""o"" <artd> DET M P)\tos')","[889855, 903153, 916247, 928489, 947189, 967079, 986969, 1006859]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'broken.')",[1036313]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==CO:conj-c(""e"" <co-subj>)\te')","[884934, 898232, 911714, 923956, 940115, 960005, 979895, 999785]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '14,')",[1051801]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '81737')",[1067001]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '<s id=""115136"" ref=""1003.cultura-ameacada=removeme=-5"" source=""SELVA 1003.cultura-ameacada=removeme="">')","[887574, 900872, 914150, 926392, 944908, 964798, 984688, 1004578]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'there.')",[1039513]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '18,')","[1099773, 1153497, 1219261]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'softly')","[1130248, 1195887]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'birthday')","[1088756, 1138169, 1203933]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=TOP:n(""casa"" <np-idf> <NER:address> <build> F P)\tCasas')","[888997, 902295, 915455, 927697, 946331, 966221, 986111, 1006001]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '17818')",[1039353]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===ADVL:adv(""até_mesmo"" <left>)\taté_mesmo')","[889543, 902841, 915959, 928201, 946877, 966767, 986657, 1006547]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.cmdline.TerminateToolExceptionTest')","[1013, 106925, 248301, 381226, 532109, 696141]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '=========,')","[886468, 899766, 913130, 925372, 941649, 961539, 981429, 1001319]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==>N:art(""o"" <artd> DET M P)\tos')","[888174, 901472, 914700, 926942, 945508, 965398, 985288, 1005178]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'worked')","[1106903, 1107156, 1163417, 1163769, 1229181, 1229533]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Policy')","[1126798, 1191087]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.formats.ConllXPOSSampleStreamTest')","[876641, 876664, 876688, 876711]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ring')","[1095311, 1116747, 1147289, 1177113, 1213053, 1242877]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'contributions')","[1128339, 1193231]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'study')",[1068313]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=======APP:np')","[883295, 896593, 910205, 922447, 938476, 958366, 978256, 998146]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'LilienstraÃ\x9fe')",[1244893]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Natalie?')",[1065241]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.WhitespaceTokenizerTest')","[7331, 136163, 275543, 412460, 566337, 732365]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Miller,')",[1059513]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'issues')","[1127373, 1127948, 1191887, 1192687]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hurry')",[1036921]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCacheClearAfterSentenceChange(opennlp.tools.util.featuregen.CachedFeatureGeneratorTest)')","[1856, 23618, 24486, 78171, 98490, 113289, 113552, 161574, 162554, 223391, 254235, 254480, 299408, 300332, 357593, 388020, 388301, 439417, 440453, 504866, 539548, 539856, 595613, 596733, 666510, 704010, 704336, 763187, 764363, 850693, 851015]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsLetters(opennlp.tools.util.featuregen.StringPatternTest)')","[26873, 26904, 26935, 29353, 29384, 29415, 80019, 80043, 80067, 116010, 116040, 116070, 165249, 165284, 165319, 168049, 168084, 168119, 225547, 225575, 225603, 256772, 256800, 256828, 302873, 302906, 302939, 305513, 305546, 305579, 359595, 359621, 359647, 390925, 390957, 390989, 443302, 443339, 443376, 446262, 446299, 446336, 507176, 507206, 507236, 542729, 542764, 542799, 599813, 599853, 599893, 603013, 603053, 603093, 669051, 669084, 669117, 707375, 707412, 707449, 767597, 767639, 767681, 770957, 770999, 771041, 855399, 855439, 855479, 857411, 857453, 857495]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<np-count>')","[943006, 962896, 982786, 1002676]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'driver')","[1034873, 1062297]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====>N:art(""o"" <artd> DET M S)\to')","[881028, 894326, 908122, 920364, 935376, 955266, 975156, 995046]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===N<:prop(""Cristovão_Colombo"" <hum> <np-close> M S)\tCristovão_Colombo')","[880198, 893496, 907358, 919600, 933434, 953324, 973214, 993104]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'opened')","[1106075, 1109778, 1162265, 1167417, 1228029, 1233181]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '============H:prop(""Oliveira_Silveira"" <hum> <np-close> F S)\tOliveira_Silveira')","[886832, 900130, 913466, 925708, 942013, 961903, 981793, 1001683]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '84630')","[1114723, 1174297, 1240061]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'enjoyed')",[1043097]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'the')","[1028889, 1029593, 1029817, 1035033, 1035961, 1036121, 1036697, 1036825, 1041689, 1041817, 1042233, 1042777, 1043001, 1044185, 1044313, 1044633, 1045209, 1045657, 1046105, 1046521, 1047225, 1047801, 1048377, 1048473, 1048921, 1049721, 1049817, 1050457, 1050649, 1051641, 1051833, 1052793, 1053241, 1053529, 1053945, 1054201, 1054809, 1055065, 1056089, 1056825, 1057561, 1057817, 1059961, 1060185, 1060633, 1061337, 1061913, 1062649, 1063065, 1063161, 1063353, 1063801, 1064537, 1069849]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.doccat.DocumentSampleTest)')","[4664, 45194, 45938, 86523, 100797, 127017, 127160, 185934, 186774, 233135, 267027, 267160, 322376, 323168, 366641, 402684, 402837, 465169, 466057, 515306, 555616, 555784, 623453, 624413, 677994, 721014, 721192, 792419, 793427, 1012125, 1012287]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleArgumentsUsage(opennlp.tools.cmdline.ArgumentParserTest)')","[13357, 13388, 13419, 15589, 15620, 15651, 74259, 74283, 74307, 107577, 107607, 107637, 149989, 150024, 150059, 152509, 152544, 152579, 218827, 218855, 218883, 248909, 248937, 248965, 288485, 288518, 288551, 290861, 290894, 290927, 353355, 353381, 353407, 381922, 381954, 381986, 427170, 427207, 427244, 429834, 429871, 429908, 499976, 500006, 500036, 532871, 532906, 532941, 582373, 582413, 582453, 585253, 585293, 585333, 661131, 661164, 661197, 696947, 696984, 697021, 749285, 749327, 749369, 752309, 752351, 752393, 836049, 836089, 836129, 837365, 837407, 837449]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'trying')","[1124613, 1188047]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLookup(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16922, 20270, 76155, 97989, 110221, 154014, 157794, 221039, 251375, 292280, 295844, 355409, 384744, 431425, 435421, 502346, 535960, 586973, 591293, 663738, 700214, 754115, 758651, 842253, 843751]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===APP:np')","[885558, 898856, 912290, 924532, 940739, 960629, 980519, 1000409]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'street')","[1112308, 1113872, 1170937, 1173113, 1236701, 1238877]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testChunks(opennlp.tools.formats.ad.ADChunkSampleStreamTest)')","[4220, 4244, 4268, 42621, 42652, 42683, 43241, 43272, 43303, 85395, 85419, 85443, 100485, 125059, 125089, 125119, 125320, 125348, 125376, 183029, 183064, 183099, 183729, 183764, 183799, 231819, 231847, 231875, 265203, 265231, 265259, 265446, 265472, 265498, 319637, 319670, 319703, 320297, 320330, 320363, 365419, 365445, 365471, 400592, 400624, 400656, 400871, 400901, 400931, 462098, 462135, 462172, 462838, 462875, 462912, 513896, 513926, 513956, 553323, 553358, 553393, 553629, 553662, 553695, 620133, 620173, 620213, 620933, 620973, 621013, 676443, 676476, 676509, 718587, 718624, 718661, 718911, 718946, 718981, 788933, 788975, 789017, 789773, 789815, 789857, 877213, 877253, 877293, 877537, 877579, 877621]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""you'll"")","[1117115, 1177625, 1243389]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNameAtEnd(opennlp.tools.namefind.NameSampleTest)')","[68785, 68816, 68847, 71265, 71296, 71327, 95955, 95979, 96003, 143465, 143495, 143525, 212569, 212604, 212639, 215369, 215404, 215439, 244139, 244167, 244195, 282349, 282377, 282405, 347489, 347522, 347555, 350129, 350162, 350195, 376859, 376885, 376911, 420258, 420290, 420322, 493326, 493363, 493400, 496286, 496323, 496360, 527096, 527126, 527156, 574879, 574914, 574949, 653893, 653933, 653973, 657093, 657133, 657173, 690963, 690996, 691029, 741403, 741440, 741477, 824381, 824423, 824465, 827741, 827783, 827825, 1254973, 1255013, 1255053, 1256761, 1256803, 1256845]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""Arent't"")",[1065113]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenProbList(opennlp.tools.chunker.ChunkerMETest)')","[57966, 59206, 91515, 102389, 136545, 200354, 201754, 238959, 275899, 335972, 337292, 372049, 412868, 480413, 481893, 521546, 566784, 639933, 641533, 684858, 732838, 809723, 811403, 1073437, 1074415]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'most.')",[1056121]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'lives')","[1104143, 1104488, 1113803, 1114608, 1159577, 1160057, 1173017, 1174137, 1225341, 1225821, 1238781, 1239901]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLookup(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16953, 16984, 17015, 20301, 20332, 20363, 76179, 76203, 76227, 110251, 110281, 110311, 154049, 154084, 154119, 157829, 157864, 157899, 221067, 221095, 221123, 251403, 251431, 251459, 292313, 292346, 292379, 295877, 295910, 295943, 355435, 355461, 355487, 384776, 384808, 384840, 431462, 431499, 431536, 435458, 435495, 435532, 502376, 502406, 502436, 535995, 536030, 536065, 587013, 587053, 587093, 591333, 591373, 591413, 663771, 663804, 663837, 700251, 700288, 700325, 754157, 754199, 754241, 758693, 758735, 758777, 842293, 842333, 842373, 843793, 843835, 843877]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'lodge')","[1094575, 1146265, 1212029]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'faked.')","[1100854, 1155001, 1220765]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Fogh')",[1252935]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWindowAtEndOfSentence(opennlp.tools.util.featuregen.WindowFeatureGeneratorTest)')","[25013, 25044, 25075, 27245, 27276, 27307, 78675, 78699, 78723, 114193, 114223, 114253, 163149, 163184, 163219, 165669, 165704, 165739, 223979, 224007, 224035, 255077, 255105, 255133, 300893, 300926, 300959, 303269, 303302, 303335, 358139, 358165, 358191, 388986, 389018, 389050, 441082, 441119, 441156, 443746, 443783, 443820, 505496, 505526, 505556, 540607, 540642, 540677, 597413, 597453, 597493, 600293, 600333, 600373, 667203, 667236, 667269, 705131, 705168, 705205, 765077, 765119, 765161, 768101, 768143, 768185, 852225, 852265, 852305, 853045, 853087, 853129]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLookupCaseSensitive(opennlp.tools.dictionary.DictionaryTest)')","[1505, 18286, 21262, 76347, 98031, 110598, 111701, 155554, 158914, 221263, 251726, 252755, 293732, 296900, 355617, 385147, 386324, 433053, 436605, 502586, 536402, 537690, 588733, 592573, 664002, 700682, 702044, 755963, 759995, 844179, 845621]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'need')","[1093172, 1144313, 1210077]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'friday?')","[1116241, 1176409, 1242173]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'entertainer')","[1109617, 1167193, 1232957]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==========APP:np')","[883511, 896809, 910403, 922645, 938692, 958582, 978472, 998362]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'homesick,')",[1042137]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'widow.')",[1069529]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hamburg,')",[1039385]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testConvertParseToPosSample(opennlp.tools.parser.ChunkSampleStreamTest)')","[125, 149, 173, 9017, 9048, 9079, 72243, 72267, 72291, 96908, 103824, 103854, 103884, 103965, 103993, 104021, 145089, 145124, 145159, 216475, 216503, 216531, 245279, 245307, 245335, 245414, 245442, 245470, 245545, 245571, 245597, 283865, 283898, 283931, 351171, 351197, 351223, 377911, 377943, 377975, 378062, 378092, 378122, 421990, 422027, 422064, 497456, 497486, 497516, 528318, 528348, 528378, 528473, 528508, 528543, 528639, 528672, 528705, 576773, 576813, 576853, 658359, 658392, 658425, 692291, 692328, 692365, 692467, 692502, 692537, 743405, 743447, 743489, 829081, 829121, 829161, 829245, 829287, 829329]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:prp(""em"" <sam-> <np-long>)\tem')","[879938, 893236, 907118, 919360, 933174, 953064, 972954, 992844]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'resident,')","[1113757, 1172953, 1238717]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '6,')","[1031577, 1055801]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:date>')","[1121002, 1124130, 1129443, 1183023, 1187375, 1194767, 1253639]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==>N:art(""o"" <artd> DET M P)\tos')","[889881, 903179, 916271, 928513, 947215, 967105, 986995, 1006885]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<cjt-subj>')","[943503, 949282, 963393, 969172, 983283, 989062, 1003173, 1008952]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Yeah')","[1065273, 1065785]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testShow(opennlp.tools.parser.ParseTest)')","[9854, 11094, 72795, 97114, 105062, 146034, 147434, 217119, 246566, 284756, 286076, 351769, 379235, 422989, 424469, 498146, 529926, 577853, 579453, 659118, 693830, 744539, 746219, 830955, 832253]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '13,')","[1090711, 1140889, 1206653]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=P:v-fin(""iniciar"" <fmc> <mv> PR 3S IND VFIN)\tInicia')","[879210, 892508, 906446, 918688, 932446, 952336, 972226, 992116]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '============APP:np')","[886962, 900260, 913586, 925828, 942143, 962033, 981923, 1001813]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=ADVL:pp')","[880836, 882167, 882887, 883775, 894134, 895465, 896185, 897073, 907946, 909171, 909831, 910645, 920188, 921413, 922073, 922887, 935184, 937348, 938068, 938956, 955074, 957238, 957958, 958846, 974964, 977128, 977848, 978736, 994854, 997018, 997738, 998626]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleDict(opennlp.tools.tokenize.DetokenizationDictionaryTest)')","[53378, 54370, 89691, 101830, 133169, 195174, 196294, 236831, 272755, 331088, 332144, 370073, 409260, 474937, 476121, 519266, 562828, 634013, 635293, 682350, 728650, 803507, 804851, 1024285, 1024615]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==ACC:cu')","[888366, 901664, 914876, 927118, 945700, 965590, 985480, 1005370]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====APP:np')","[883079, 896377, 910007, 922249, 938260, 958150, 978040, 997930]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.WordTagSampleStreamTest')","[1018203, 1018226, 1018250, 1018273]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '25.')","[1108835, 1166105, 1231869]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'sitting')","[1115827, 1175833, 1241597]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'definitely')","[1104327, 1159833, 1225597]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEventOutcomes(opennlp.tools.sentdetect.SDEventStreamTest)')","[5132, 46806, 47178, 87003, 100982, 128165, 128308, 187754, 188174, 233695, 268095, 268228, 324092, 324488, 367161, 403912, 404065, 467093, 467537, 515906, 556964, 557132, 625533, 626013, 678654, 722442, 722620, 794603, 795107, 1014141, 1014303]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'town.')",[1069305]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'one')","[1094644, 1125533, 1125625, 1146361, 1189327, 1189455, 1212125]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pain,')","[1106466, 1162809, 1228573]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.SequenceTest')","[3236, 120808, 261242, 396051, 548347, 713321]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'him')","[1088135, 1105845, 1112423, 1137305, 1161945, 1171097, 1203069, 1227709, 1236861]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '1912')",[1057497]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWithNameTypes(opennlp.tools.namefind.NameSampleDataStreamTest)')","[65902, 67886, 94587, 103221, 141481, 209314, 211554, 242543, 280499, 344420, 346532, 375377, 418140, 489885, 492253, 525386, 572560, 650173, 652733, 689082, 738950, 820475, 823163, 1084685, 1085663]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.featuregen.GeneratorFactoryTest')","[859019, 859042, 859066, 859089]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Bürgerstraße')",[1069657]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSTaggerMETest')","[1021437, 1021460, 1021484, 1021507]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.sentdetect.SentenceSampleTest)')","[5390, 5414, 5438, 47333, 47364, 47395, 47953, 47984, 48015, 87219, 87243, 87267, 101084, 128709, 128739, 128769, 128970, 128998, 129026, 188349, 188384, 188419, 189049, 189084, 189119, 233947, 233975, 234003, 268601, 268629, 268657, 268844, 268870, 268896, 324653, 324686, 324719, 325313, 325346, 325379, 367395, 367421, 367447, 404494, 404526, 404558, 404773, 404803, 404833, 467722, 467759, 467796, 468462, 468499, 468536, 516176, 516206, 516236, 557603, 557638, 557673, 557909, 557942, 557975, 626213, 626253, 626293, 627013, 627053, 627093, 678951, 678984, 679017, 723119, 723156, 723193, 723443, 723478, 723513, 795317, 795359, 795401, 796157, 796199, 796241, 1015025, 1015065, 1015105, 1015349, 1015391, 1015433]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=========H:prop(""Liana_Timm"" <hum> <np-close> F S)\tLiana_Timm')","[886364, 899662, 913034, 925276, 941545, 961435, 981325, 1001215]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'STA:fcl')","[878291, 880812, 882143, 887742, 891589, 894110, 895441, 901040, 905603, 907924, 909149, 914304, 917845, 920166, 921391, 926546, 931527, 935160, 937324, 945076, 951417, 955050, 957214, 964966, 971307, 974940, 977104, 984856, 991197, 994830, 996994, 1004746]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'I')","[1086456, 1086755, 1086893, 1087514, 1088089, 1088503, 1088894, 1089193, 1089768, 1091286, 1093149, 1095725, 1096277, 1099451, 1100601, 1100923, 1101015, 1101866, 1102441, 1103085, 1103959, 1106880, 1107133, 1107317, 1107593, 1108122, 1108260, 1108398, 1115758, 1116471, 1116655, 1117069, 1117552, 1117621, 1118334, 1118656, 1119208, 1134969, 1135385, 1135577, 1136441, 1137241, 1137817, 1138361, 1138777, 1139577, 1141689, 1144281, 1147865, 1148633, 1153049, 1154649, 1155097, 1155225, 1156409, 1157209, 1158105, 1159321, 1163385, 1163737, 1163993, 1164377, 1165113, 1165305, 1165497, 1175737, 1176729, 1176985, 1177561, 1178233, 1178329, 1179321, 1179769, 1180537, 1200733, 1201149, 1201341, 1202205, 1203005, 1203581, 1204125, 1204541, 1205341, 1207453, 1210045, 1213629, 1214397, 1218813, 1220413, 1220861, 1220989, 1222173, 1222973, 1223869, 1225085, 1229149, 1229501, 1229757, 1230141, 1230877, 1231069, 1231261, 1241501, 1242493, 1242749, 1243325, 1243997, 1244093, 1245085, 1245533, 1246301]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====P<:n(""outubro"" <np-idf> <NER2> M S)\toutubro')","[879652, 892950, 906854, 919096, 932888, 952778, 972668, 992558]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'travelling')","[1098347, 1151513, 1217277]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTypeWithSpace(opennlp.tools.namefind.NameSampleTest)')","[69250, 71730, 96315, 103639, 143915, 213094, 215894, 244559, 282769, 347984, 350624, 377249, 420738, 493881, 496841, 527546, 575404, 654493, 657693, 691458, 741958, 825011, 828371, 1255573, 1257391]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'painfully')",[1051993]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'another')","[1121209, 1183311]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'gave')",[1063609]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'more')","[1058137, 1058713]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====H:n(""episódio"" <np-idf> <event> M S)\tepisódio')","[888630, 901928, 915118, 927360, 945964, 965854, 985744, 1005634]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'whom')","[1029113, 1055257]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'been')","[1128914, 1194031]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '2.')",[1042905]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'p.m.!')","[1093356, 1144569, 1210333]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Hospital')",[1053593]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '86th')","[1088733, 1138137, 1203901]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsPeriod(opennlp.tools.util.featuregen.StringPatternTest)')","[26253, 26284, 26315, 28733, 28764, 28795, 79539, 79563, 79587, 115410, 115440, 115470, 164549, 164584, 164619, 167349, 167384, 167419, 224987, 225015, 225043, 256212, 256240, 256268, 302213, 302246, 302279, 304853, 304886, 304919, 359075, 359101, 359127, 390285, 390317, 390349, 442562, 442599, 442636, 445522, 445559, 445596, 506576, 506606, 506636, 542029, 542064, 542099, 599013, 599053, 599093, 602213, 602253, 602293, 668391, 668424, 668457, 706635, 706672, 706709, 766757, 766799, 766841, 770117, 770159, 770201, 854599, 854639, 854679, 856571, 856613, 856655]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDifferentCaseLookupCaseSensitive(opennlp.tools.dictionary.DictionaryTest)')","[18534, 21510, 76539, 98093, 110838, 155834, 159194, 221487, 251950, 293996, 297164, 355825, 385403, 433349, 436901, 502826, 536682, 589053, 592893, 664266, 700978, 756299, 760331, 844499, 845957]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'for')","[1029209, 1032313, 1051609, 1054617, 1060889, 1065305, 1069049]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '========APP:np')","[886338, 899636, 913010, 925252, 941519, 961409, 981299, 1001189]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingSpanishSample(opennlp.tools.formats.Conll02NameSampleStreamTest)')","[3752, 3776, 3800, 39273, 39304, 39335, 41877, 41908, 41939, 84915, 84939, 84963, 100300, 123911, 123941, 123971, 124172, 124200, 124228, 179249, 179284, 179319, 182189, 182224, 182259, 231259, 231287, 231315, 264135, 264163, 264191, 264378, 264404, 264430, 316073, 316106, 316139, 318845, 318878, 318911, 364899, 364925, 364951, 399364, 399396, 399428, 399643, 399673, 399703, 458102, 458139, 458176, 461210, 461247, 461284, 513296, 513326, 513356, 551975, 552010, 552045, 552281, 552314, 552347, 615813, 615853, 615893, 619173, 619213, 619253, 675783, 675816, 675849, 717159, 717196, 717233, 717483, 717518, 717553, 784397, 784439, 784481, 787925, 787967, 788009, 875197, 875237, 875277, 875521, 875563, 875605]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingEnglishSample(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[4547, 44202, 45318, 86139, 100693, 126400, 126903, 184814, 186074, 232687, 266452, 266921, 321320, 322508, 366225, 402025, 402562, 463985, 465317, 514826, 554894, 555482, 622173, 623613, 677466, 720250, 720872, 791075, 792587, 1010719, 1011361]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===>N:adj(""próximo"" M S)\tpróximo')","[879418, 892716, 906638, 918880, 932654, 952544, 972434, 992324]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====H:n(""shopping"" <np-def> <Lh> M S)\tshopping')","[881685, 894983, 908727, 920969, 936033, 955923, 975813, 995703]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '8')","[1093333, 1144537, 1210301]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==--')","[880380, 880536, 893678, 893834, 907526, 907670, 919768, 919912, 933616, 933772, 953506, 953662, 973396, 973552, 993286, 993442]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testLookup(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14814, 18038, 75291, 97780, 109004, 151634, 155274, 220031, 250240, 290036, 293468, 354473, 383445, 428909, 432757, 501266, 534538, 584253, 588413, 662550, 698710, 751259, 755627, 839207, 840705]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'that')","[1029657, 1030393, 1036185, 1047609, 1050969, 1053337, 1053433, 1061241, 1068825]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenReplacement(opennlp.tools.parser.ParseTest)')","[10009, 10040, 10071, 11249, 11280, 11311, 72915, 72939, 72963, 105212, 105242, 105272, 146209, 146244, 146279, 147609, 147644, 147679, 217259, 217287, 217315, 246706, 246734, 246762, 284921, 284954, 284987, 286241, 286274, 286307, 351899, 351925, 351951, 379395, 379427, 379459, 423174, 423211, 423248, 424654, 424691, 424728, 498296, 498326, 498356, 530101, 530136, 530171, 578053, 578093, 578133, 579653, 579693, 579733, 659283, 659316, 659349, 694015, 694052, 694089, 744749, 744791, 744833, 746429, 746471, 746513, 831155, 831195, 831235, 832463, 832505, 832547]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.PosSampleStreamTest')","[194, 104166, 245732, 378277, 528875, 692717]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'BÃ¼rgerstraÃ\x9fe')",[1246141]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '21,')","[1117598, 1178297, 1244061]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'jacket,')","[1105431, 1161369, 1227133]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseEmtpyToken(opennlp.tools.postag.POSSampleTest)')","[49534, 51022, 88347, 101416, 130667, 190834, 192514, 235263, 270425, 326996, 328580, 368617, 406586, 470349, 472125, 517586, 559896, 629053, 630973, 680502, 725546, 798299, 800315, 1018793, 1019779]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'old')","[1086663, 1098209, 1135257, 1151321, 1201021, 1217085]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '</ul>')",[1132437]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'departed')","[1120795, 1182735]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'how')","[1034297, 1059865, 1065017]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'father')",[1051865]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'recently')","[1093540, 1144825, 1210589]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPositive(opennlp.tools.tokenize.TokenizerEvaluatorTest)')","[6770, 54494, 55238, 90075, 101934, 133923, 134186, 196434, 197274, 237279, 273457, 273702, 332276, 333068, 370489, 410066, 410347, 476269, 477157, 519746, 563712, 564020, 635453, 636413, 682878, 729586, 729912, 805019, 806027, 1025953, 1026275]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Are')","[1046585, 1065945]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<END>')","[1087100, 1087606, 1090205, 1090964, 1092137, 1092275, 1093471, 1095587, 1096806, 1097956, 1102694, 1103637, 1104097, 1104465, 1107961, 1108582, 1109111, 1109709, 1111112, 1112791, 1114539, 1115528, 1119599, 1119622, 1119806, 1119921, 1120082, 1120542, 1120864, 1120979, 1121048, 1121163, 1121370, 1121692, 1122520, 1123647, 1124107, 1124176, 1124429, 1124567, 1125096, 1125349, 1126177, 1126476, 1126821, 1127488, 1127764, 1128132, 1128270, 1128431, 1128684, 1128868, 1129420, 1129489, 1129857, 1130156, 1130892, 1131191, 1131306, 1132184, 1132391, 1135865, 1136569, 1140185, 1141241, 1142873, 1143065, 1144729, 1147673, 1149369, 1150969, 1157561, 1158873, 1159513, 1160025, 1164889, 1165753, 1166489, 1167321, 1169273, 1171609, 1174041, 1175417, 1181359, 1181519, 1181743, 1182383, 1182831, 1182991, 1183087, 1183247, 1183535, 1183983, 1185135, 1186703, 1187343, 1187439, 1187791, 1187983, 1188719, 1189071, 1190223, 1190639, 1191119, 1192047, 1192431, 1192943, 1193135, 1193359, 1193711, 1193967, 1194735, 1194831, 1195343, 1195759, 1196783, 1197199, 1197359, 1201629, 1202333, 1205949, 1207005, 1208637, 1208829, 1210493, 1213437, 1215133, 1216733, 1223325, 1224637, 1225277, 1225789, 1230653, 1231517, 1232253, 1233085, 1235037, 1237373, 1239805, 1241181, 1247059, 1247187, 1247315, 1247443, 1247571, 1247699, 1247827, 1247955, 1249725, 1249853, 1249981, 1250109, 1250237, 1250365, 1250493, 1250621, 1252359, 1252487, 1252647, 1252743, 1252839, 1252999, 1253191, 1253319, 1253415, 1253511, 1253607, 1253703, 1258247, 1258357, 1258577, 1258731, 1258797, 1258885, 1259039, 1259149, 1259369, 1259506, 1259598, 1259667, 1259736]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'fact')",[1066457]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleCount(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[43830, 45070, 86043, 100672, 126143, 184394, 185794, 232575, 266213, 320924, 322244, 366121, 401750, 463541, 465021, 514706, 554592, 621693, 623293, 677334, 719930, 790571, 792251, 930233, 930899]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'called')","[1030009, 1047417, 1055609, 1063289, 1063897]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Gauting.')","[1114746, 1174329, 1240093]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[2933, 2957, 2981, 32081, 32112, 32143, 33445, 33476, 33507, 81555, 81579, 81603, 99425, 118752, 118782, 118812, 119253, 119281, 119309, 171129, 171164, 171199, 172669, 172704, 172739, 227339, 227367, 227395, 259326, 259354, 259382, 259793, 259819, 259845, 308417, 308450, 308483, 309869, 309902, 309935, 361259, 361285, 361311, 393855, 393887, 393919, 394390, 394420, 394450, 449518, 449555, 449592, 451146, 451183, 451220, 509096, 509126, 509156, 545941, 545976, 546011, 546527, 546560, 546593, 606533, 606573, 606613, 608293, 608333, 608373, 671163, 671196, 671229, 710775, 710812, 710849, 711395, 711430, 711465, 774653, 774695, 774737, 776501, 776543, 776585, 863059, 863099, 863139, 863703, 863745, 863787]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'care')",[1054329]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'urgent')","[1105776, 1161849, 1227613]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingGermanSampleWithEnglishAsLanguage(opennlp.tools.formats.Conll03NameSampleStreamTest)')","[44574, 45690, 86427, 100776, 126760, 185234, 186494, 233023, 266788, 321716, 322904, 366537, 402409, 464429, 465761, 515186, 555314, 622653, 624093, 677862, 720694, 791579, 793091, 1011199, 1011865]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'am')","[1102418, 1157177, 1222941]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContains(opennlp.tools.util.SpanTest)')","[37134, 39862, 83451, 99965, 121944, 176834, 179914, 229551, 262300, 313796, 316700, 363313, 397265, 455549, 458805, 511466, 549678, 613053, 616573, 673770, 714730, 781499, 785195, 869639, 872545]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'tree.')",[1062905]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'reckon.')",[1034649]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Weilheim,')","[1106282, 1162553, 1228317]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""who's"")",[1030105]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'about')",[1049529]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Peter')",[1063929]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'me')","[1030361, 1032345, 1036473, 1037369, 1043929, 1047769]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEqualsDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16302, 19650, 75675, 97884, 109621, 153314, 157094, 220479, 250815, 291620, 295184, 354889, 384104, 430685, 434681, 501746, 535260, 586173, 590493, 663078, 699474, 753275, 757811, 841453, 842911]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleReading(opennlp.tools.util.ParagraphStreamTest)')","[2675, 30562, 31926, 80859, 99218, 117608, 117751, 169414, 170954, 226527, 258260, 258393, 306800, 308252, 360505, 392633, 392786, 447705, 449333, 508226, 544602, 544770, 604573, 606333, 670206, 709358, 709536, 772595, 774443, 860535, 860697]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCreationWithDetokenizer(opennlp.tools.tokenize.TokenSampleTest)')","[54153, 54184, 54215, 55021, 55052, 55083, 90003, 90027, 90051, 133696, 133726, 133756, 196049, 196084, 196119, 197029, 197064, 197099, 237195, 237223, 237251, 273246, 273274, 273302, 331913, 331946, 331979, 332837, 332870, 332903, 370411, 370437, 370463, 409823, 409855, 409887, 475862, 475899, 475936, 476898, 476935, 476972, 519656, 519686, 519716, 563445, 563480, 563515, 635013, 635053, 635093, 636133, 636173, 636213, 682779, 682812, 682845, 729303, 729340, 729377, 804557, 804599, 804641, 805733, 805775, 805817, 1025235, 1025275, 1025315, 1025735, 1025777, 1025819]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEvaluator(opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest)')","[7706, 59702, 61562, 91995, 102514, 137419, 137562, 202314, 204414, 239519, 276713, 276846, 337820, 339800, 372569, 413802, 413955, 482485, 484705, 522146, 567808, 567976, 642173, 644573, 685518, 733922, 734100, 812075, 814595, 1075601, 1075763]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEmpty(opennlp.tools.util.eval.FMeasureTest)')","[31585, 31616, 31647, 32949, 32980, 33011, 81267, 81291, 81315, 118255, 118285, 118315, 170569, 170604, 170639, 172109, 172144, 172179, 227003, 227031, 227059, 258863, 258891, 258919, 307889, 307922, 307955, 309341, 309374, 309407, 360947, 360973, 360999, 393324, 393356, 393388, 448926, 448963, 449000, 450554, 450591, 450628, 508736, 508766, 508796, 545359, 545394, 545429, 605893, 605933, 605973, 607653, 607693, 607733, 670767, 670800, 670833, 710159, 710196, 710233, 773981, 774023, 774065, 775829, 775871, 775913, 861477, 861517, 861557, 862465, 862507, 862549]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Korea')","[1120059, 1120519, 1120956, 1121347, 1121669, 1124406, 1126775, 1127741, 1128247, 1181711, 1182351, 1182959, 1183503, 1183951, 1187759, 1191055, 1192399, 1193103]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'help.')",[1060921]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCreationWithUnkownElement(opennlp.tools.util.featuregen.GeneratorFactoryTest)')","[27834, 29818, 80283, 99052, 116477, 166334, 168574, 225855, 257207, 303896, 306008, 359881, 391424, 444449, 446817, 507506, 543276, 601053, 603613, 669414, 707954, 768899, 771587, 857949, 858447]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'her')","[1089262, 1089538, 1090389, 1097703, 1098761, 1108306, 1108720, 1113458, 1115896, 1116172, 1138873, 1139257, 1140441, 1150617, 1152089, 1165369, 1165945, 1172537, 1175929, 1176313, 1204637, 1205021, 1206205, 1216381, 1217853, 1231133, 1231709, 1238301, 1241693, 1242077]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'starts')",[1067129]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'F')","[936483, 943264, 943390, 943848, 944010, 944091, 949192, 949372, 950408, 950979, 956373, 963154, 963280, 963738, 963900, 963981, 969082, 969262, 970298, 970869, 976263, 983044, 983170, 983628, 983790, 983871, 988972, 989152, 990188, 990759, 996153, 1002934, 1003060, 1003518, 1003680, 1003761, 1008862, 1009042, 1010078, 1010649]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'magazine.')","[1107110, 1163705, 1229469]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'seen')",[1029177]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'SilberhornstraÃ\x9fe')",[1208221]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'M/F')","[934706, 942949, 943146, 954596, 962839, 963036, 974486, 982729, 982926, 994376, 1002619, 1002816]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'information')","[1049497, 1060281]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===========APP:np')","[886806, 900104, 913442, 925684, 941987, 961877, 981767, 1001657]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'far')","[1113412, 1172473, 1238237]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""wasn't"")","[1032249, 1044441, 1068953]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testFindSingleTokenPattern(opennlp.tools.namefind.RegexNameFinderTest)')","[8315, 8339, 8363, 65189, 65220, 65251, 66429, 66460, 66491, 94131, 94155, 94179, 103096, 140774, 140804, 140834, 141155, 141183, 141211, 208509, 208544, 208579, 209909, 209944, 209979, 242011, 242039, 242067, 279840, 279868, 279896, 280195, 280221, 280247, 343661, 343694, 343727, 344981, 345014, 345047, 374883, 374909, 374935, 417385, 417417, 417449, 417792, 417822, 417852, 489034, 489071, 489108, 490514, 490551, 490588, 524816, 524846, 524876, 571733, 571768, 571803, 572179, 572212, 572245, 649253, 649293, 649333, 650853, 650893, 650933, 688455, 688488, 688521, 738075, 738112, 738149, 738547, 738582, 738617, 819509, 819551, 819593, 821189, 821231, 821273, 1083327, 1083367, 1083407, 1083811, 1083853, 1083895]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'McKennedy,')",[1029465]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '14,')","[1104879, 1160601, 1226365]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '23213')","[1087997, 1137113, 1202877]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<START:>')","[1131789, 1259414]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'husband')","[1037273, 1039161]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'there.')","[1095150, 1147065, 1212829]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Barack')","[1119875, 1181455, 1253255, 1258313, 1259105]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.dictionary.DictionaryTest)')","[19061, 19092, 19123, 22037, 22068, 22099, 76947, 76971, 76995, 111348, 111378, 111408, 156429, 156464, 156499, 159789, 159824, 159859, 221963, 221991, 222019, 252426, 252454, 252482, 294557, 294590, 294623, 297725, 297758, 297791, 356267, 356293, 356319, 385947, 385979, 386011, 433978, 434015, 434052, 437530, 437567, 437604, 503336, 503366, 503396, 537277, 537312, 537347, 589733, 589773, 589813, 593573, 593613, 593653, 664827, 664860, 664893, 701607, 701644, 701681, 757013, 757055, 757097, 761045, 761087, 761129, 845179, 845219, 845259, 846671, 846713, 846755]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'police')",[1064313]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'party')","[1066105, 1067097]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'interested')",[1040697]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Seidlstraße')",[1036569]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'took')","[1054297, 1063225]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'beautiful')",[1033913]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.tokenize.TokenizerEvaluatorTest)')","[54618, 55362, 90171, 101975, 134043, 196574, 197414, 237391, 273569, 332408, 333200, 370593, 410194, 476417, 477305, 519866, 563852, 635613, 636573, 683010, 729734, 805187, 806195, 1026113, 1026443]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testClearAdaptiveData(opennlp.tools.namefind.NameSampleDataStreamTest)')","[66181, 66212, 66243, 68165, 68196, 68227, 94803, 94827, 94851, 141751, 141781, 141811, 209629, 209664, 209699, 211869, 211904, 211939, 242795, 242823, 242851, 280751, 280779, 280807, 344717, 344750, 344783, 346829, 346862, 346895, 375611, 375637, 375663, 418428, 418460, 418492, 490218, 490255, 490292, 492586, 492623, 492660, 525656, 525686, 525716, 572875, 572910, 572945, 650533, 650573, 650613, 653093, 653133, 653173, 689379, 689412, 689445, 739283, 739320, 739357, 820853, 820895, 820937, 823541, 823583, 823625, 1085045, 1085085, 1085125, 1086041, 1086083, 1086125]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'two')","[1089653, 1139417, 1205181]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'foregoing')","[1123302, 1186223]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SDEventStreamTest')","[5108, 128280, 268202, 404035, 557099, 722585]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'economic')","[1130501, 1196239]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'G\x8artnerweg')","[1108053, 1108812, 1165017, 1166073]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'idea')","[1111388, 1169657, 1235421]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCrosses(opennlp.tools.util.SpanTest)')","[38033, 38064, 38095, 40761, 40792, 40823, 84147, 84171, 84195, 122814, 122844, 122874, 177849, 177884, 177919, 180929, 180964, 180999, 230363, 230391, 230419, 263112, 263140, 263168, 314753, 314786, 314819, 317657, 317690, 317723, 364067, 364093, 364119, 398193, 398225, 398257, 456622, 456659, 456696, 459878, 459915, 459952, 512336, 512366, 512396, 550693, 550728, 550763, 614213, 614253, 614293, 617733, 617773, 617813, 674727, 674760, 674793, 715803, 715840, 715877, 782717, 782759, 782801, 786413, 786455, 786497, 870799, 870839, 870879, 873763, 873805, 873847]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'traditional')",[1043161]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'central')","[1110514, 1168441, 1234205]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'crashed')","[1113573, 1172697, 1238461]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==P<:pron-det(""outro"" <KOMP> <diff> DET M P)\toutros')","[887326, 900624, 913922, 926164, 942507, 962397, 982287, 1002177]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'longer')","[1088940, 1138425, 1204189]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Name')",[1119576]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'sights,')",[1044121]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hours')",[1053785]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingDutchSample(opennlp.tools.formats.Conll02NameSampleStreamTest)')","[39397, 39428, 39459, 42001, 42032, 42063, 85011, 85035, 85059, 124031, 124061, 124091, 179389, 179424, 179459, 182329, 182364, 182399, 231371, 231399, 231427, 264247, 264275, 264303, 316205, 316238, 316271, 318977, 319010, 319043, 365003, 365029, 365055, 399492, 399524, 399556, 458250, 458287, 458324, 461358, 461395, 461432, 513416, 513446, 513476, 552115, 552150, 552185, 615973, 616013, 616053, 619333, 619373, 619413, 675915, 675948, 675981, 717307, 717344, 717381, 784565, 784607, 784649, 788093, 788135, 788177, 875357, 875397, 875437, 875689, 875731, 875773]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'liked')",[1056025]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'now')","[1127120, 1191535]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testParsingSample(opennlp.tools.formats.ConllXPOSSampleStreamTest)')","[3869, 3893, 3917, 41753, 41784, 41815, 42249, 42280, 42311, 85107, 85131, 85155, 100362, 124288, 124318, 124348, 124429, 124457, 124485, 182049, 182084, 182119, 182609, 182644, 182679, 231483, 231511, 231539, 264486, 264514, 264542, 264617, 264643, 264669, 318713, 318746, 318779, 319241, 319274, 319307, 365107, 365133, 365159, 399767, 399799, 399831, 399918, 399948, 399978, 461062, 461099, 461136, 461654, 461691, 461728, 513536, 513566, 513596, 552417, 552452, 552487, 552583, 552616, 552649, 619013, 619053, 619093, 619653, 619693, 619733, 676047, 676080, 676113, 717627, 717664, 717701, 717803, 717838, 717873, 787757, 787799, 787841, 788429, 788471, 788513, 875947, 875987, 876027, 876111, 876153, 876195]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Although')","[1105615, 1115045, 1161625, 1174745, 1227389, 1240509]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.NameSampleDataStreamTest')","[1134803, 1134826, 1134850, 1134873]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Luise')","[1095564, 1147641, 1213405]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.SimpleTokenizerTest')","[1073007, 1073030, 1073054, 1073077]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testInvalidPhraseAsSpan2(opennlp.tools.chunker.ChunkSampleTest)')","[61097, 61128, 61159, 63081, 63112, 63143, 92979, 93003, 93027, 138786, 138816, 138846, 203889, 203924, 203959, 206129, 206164, 206199, 240667, 240695, 240723, 277988, 278016, 278044, 339305, 339338, 339371, 341417, 341450, 341483, 373635, 373661, 373687, 415261, 415293, 415325, 484150, 484187, 484224, 486518, 486555, 486592, 523376, 523406, 523436, 569405, 569440, 569475, 643973, 644013, 644053, 646533, 646573, 646613, 686871, 686904, 686937, 735611, 735648, 735685, 813965, 814007, 814049, 816653, 816695, 816737, 1077503, 1077543, 1077583, 1079659, 1079701, 1079743]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====>N:art(""o"" <artd> <-sam> DET M S)\to')","[878771, 892069, 906043, 918285, 932007, 951897, 971787, 991677]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testRetrievingContent(opennlp.tools.tokenize.TokenSampleTest)')","[54029, 54060, 54091, 54897, 54928, 54959, 89907, 89931, 89955, 133576, 133606, 133636, 195909, 195944, 195979, 196889, 196924, 196959, 237083, 237111, 237139, 273134, 273162, 273190, 331781, 331814, 331847, 332705, 332738, 332771, 370307, 370333, 370359, 409695, 409727, 409759, 475714, 475751, 475788, 476750, 476787, 476824, 519536, 519566, 519596, 563305, 563340, 563375, 634853, 634893, 634933, 635973, 636013, 636053, 682647, 682680, 682713, 729155, 729192, 729229, 804389, 804431, 804473, 805565, 805607, 805649, 1025075, 1025115, 1025155, 1025567, 1025609, 1025651]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'life')",[1068857]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=====>N:art(""o"" <artd> <-sam> DET F S)\ta')","[884596, 897894, 911402, 923644, 939777, 959667, 979557, 999447]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=,')","[884206, 885272, 887196, 889049, 897504, 898570, 900494, 902347, 911042, 912026, 913802, 915503, 923284, 924268, 926044, 927745, 939387, 940453, 942377, 946383, 959277, 960343, 962267, 966273, 979167, 980233, 982157, 986163, 999057, 1000123, 1002047, 1006053]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCompareTo(opennlp.tools.util.SequenceTest)')","[34902, 36142, 82683, 99737, 120573, 174314, 175714, 228655, 261023, 311420, 312740, 362481, 395800, 452885, 454365, 510506, 548072, 610173, 611773, 672714, 713030, 778475, 780155, 866901, 867559]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'instantly')","[1045881, 1052409, 1063321]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'people')","[1123118, 1185967]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'couple,')",[1038457]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16457, 16488, 16519, 19805, 19836, 19867, 75795, 75819, 75843, 109771, 109801, 109831, 153489, 153524, 153559, 157269, 157304, 157339, 220619, 220647, 220675, 250955, 250983, 251011, 291785, 291818, 291851, 295349, 295382, 295415, 355019, 355045, 355071, 384264, 384296, 384328, 430870, 430907, 430944, 434866, 434903, 434940, 501896, 501926, 501956, 535435, 535470, 535505, 586373, 586413, 586453, 590693, 590733, 590773, 663243, 663276, 663309, 699659, 699696, 699733, 753485, 753527, 753569, 758021, 758063, 758105, 841653, 841693, 841733, 843121, 843163, 843205]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'if')","[1095403, 1097427, 1102119, 1102832, 1103062, 1147417, 1150233, 1156761, 1157753, 1158073, 1213181, 1215997, 1222525, 1223517, 1223837]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPerfect(opennlp.tools.util.eval.FMeasureTest)')","[31678, 33042, 81339, 99363, 118345, 170674, 172214, 227087, 258947, 307988, 309440, 361025, 393420, 449037, 450665, 508826, 545464, 606013, 607773, 670866, 710270, 774107, 775955, 861597, 862591]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'can')",[1066713]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'LuisenstraÃ\x9fe')",[1237085]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Lenbachhaus.')","[1112009, 1170521, 1236285]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'father')","[1104925, 1160665, 1226429]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsLetters(opennlp.tools.util.featuregen.StringPatternTest)')","[26842, 29322, 79995, 98969, 115980, 165214, 168014, 225519, 256744, 302840, 305480, 359569, 390893, 443265, 446225, 507146, 542694, 599773, 602973, 669018, 707338, 767555, 770915, 855359, 857369]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'fact')","[1116448, 1176697, 1242461]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Paracelsus')",[1053561]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Are')","[1100693, 1116080, 1154777, 1176185, 1220541, 1241949]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.eval.CrossValidationPartitionerTest')","[2885, 119197, 259741, 394330, 546461, 711325]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCreationWithCustomGenerator(opennlp.tools.util.featuregen.GeneratorFactoryTest)')","[27741, 27772, 27803, 29725, 29756, 29787, 80211, 80235, 80259, 116387, 116417, 116447, 166229, 166264, 166299, 168469, 168504, 168539, 225771, 225799, 225827, 257123, 257151, 257179, 303797, 303830, 303863, 305909, 305942, 305975, 359803, 359829, 359855, 391328, 391360, 391392, 444338, 444375, 444412, 446706, 446743, 446780, 507416, 507446, 507476, 543171, 543206, 543241, 600933, 600973, 601013, 603493, 603533, 603573, 669315, 669348, 669381, 707843, 707880, 707917, 768773, 768815, 768857, 771461, 771503, 771545, 857829, 857869, 857909, 858321, 858363, 858405]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'minutes')","[1045561, 1064409]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'the')","[1086571, 1087215, 1087376, 1091608, 1092413, 1092528, 1092942, 1093034, 1096990, 1097082, 1097381, 1097795, 1098002, 1098876, 1098968, 1099198, 1099658, 1099980, 1100325, 1100647, 1101199, 1101613, 1102073, 1102142, 1102510, 1103154, 1103223, 1103752, 1103913, 1104764, 1104902, 1105638, 1105960, 1106167, 1106489, 1106673, 1107202, 1107432, 1108329, 1108973, 1109548, 1109801, 1111480, 1111641, 1111963, 1112515, 1112975, 1113504, 1113849, 1113918, 1114056, 1114378, 1114953, 1119277, 1120312, 1121899, 1122336, 1122842, 1124245, 1124475, 1124682, 1125395, 1125464, 1125763, 1125855, 1125993, 1126522, 1126591, 1126936, 1127994, 1129650, 1129972, 1135129, 1136025, 1136249, 1142137, 1143257, 1143417, 1143993, 1144121, 1149625, 1149753, 1150169, 1150745, 1151033, 1152249, 1152377, 1152697, 1153337, 1153785, 1154265, 1154713, 1155481, 1156057, 1156697, 1156793, 1157305, 1158201, 1158297, 1159033, 1159257, 1160441, 1160633, 1161657, 1162105, 1162393, 1162841, 1163097, 1163833, 1164153, 1165401, 1166297, 1167097, 1167449, 1169785, 1170009, 1170457, 1171225, 1171865, 1172601, 1173081, 1173177, 1173369, 1173817, 1174617, 1180633, 1182063, 1184271, 1184879, 1185583, 1187535, 1187855, 1188143, 1189135, 1189231, 1189647, 1189775, 1189967, 1190703, 1190799, 1191279, 1192751, 1195055, 1195503, 1200893, 1201789, 1202013, 1207901, 1209021, 1209181, 1209757, 1209885, 1215389, 1215517, 1215933, 1216509, 1216797, 1218013, 1218141, 1218461, 1219101, 1219549, 1220029, 1220477, 1221245, 1221821, 1222461, 1222557, 1223069, 1223965, 1224061, 1224797, 1225021, 1226205, 1226397, 1227421, 1227869, 1228157, 1228605, 1228861, 1229597, 1229917, 1231165, 1232061, 1232861, 1233213, 1235549, 1235773, 1236221, 1236989, 1237629, 1238365, 1238845, 1238941, 1239133, 1239581, 1240381, 1246397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'new')","[1118104, 1179001, 1244765]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '56473')",[1035129]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'police.')",[1063385]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Schmidt.')",[1035801]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'uni.')","[1115942, 1175993, 1241757]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '11')",[1039833]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'studies')",[1070009]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'afford')",[1038681]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testChunkAsArray(opennlp.tools.chunker.ChunkerMETest)')","[58338, 59578, 91803, 102452, 136905, 200774, 202174, 239295, 276235, 336368, 337688, 372361, 413252, 480857, 482337, 521906, 567204, 640413, 642013, 685254, 733282, 810227, 811907, 1073917, 1074919]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '2')","[1106351, 1119116, 1162649, 1180409, 1228413, 1246173]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==>N:art(""o"" <artd> DET M S)\to')","[881763, 895061, 908799, 921041, 936111, 956001, 975891, 995781]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Ottobrunn.')","[1107294, 1163961, 1229725]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'see')","[1117276, 1177849, 1243613]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Berlin')","[1098508, 1151737, 1217501]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '83939')",[1053657]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'married')","[1093724, 1094322, 1145081, 1145913, 1210845, 1211677]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '======APP:np')","[886026, 899324, 912722, 924964, 941207, 961097, 980987, 1000877]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testConvertParseToPosSample(opennlp.tools.parser.PosSampleStreamTest)')","[218, 8862, 9234, 72315, 96929, 104051, 104194, 144914, 145334, 216559, 245625, 245758, 283700, 284096, 351249, 378154, 378307, 421805, 422249, 497546, 528740, 528908, 576573, 577053, 658458, 692574, 692752, 743195, 743699, 829369, 829531]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'never')","[1101406, 1155769, 1221533]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=============H:prop(""Jane_Tutikian"" <hum> <np-close> F S)\tJane_Tutikian')","[887014, 900312, 913634, 925876, 942195, 962085, 981975, 1001865]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'context')","[1125786, 1189679]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'area')","[1107225, 1163865, 1229629]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.postag.POSEvaluatorTest)')","[51921, 51952, 51983, 52541, 52572, 52603, 89043, 89067, 89091, 131948, 131978, 132008, 193529, 193564, 193599, 194229, 194264, 194299, 236075, 236103, 236131, 271618, 271646, 271674, 329537, 329570, 329603, 330197, 330230, 330263, 369371, 369397, 369423, 407955, 407987, 408019, 473198, 473235, 473272, 473938, 473975, 474012, 518456, 518486, 518516, 561397, 561432, 561467, 632133, 632173, 632213, 632933, 632973, 633013, 681459, 681492, 681525, 727135, 727172, 727209, 801533, 801575, 801617, 802373, 802415, 802457, 1021747, 1021787, 1021827, 1022079, 1022121, 1022163]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Hospital')","[1106213, 1162457, 1228221]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'foreign')",[1041081]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseWithAdditionalSpace(opennlp.tools.namefind.NameSampleTest)')","[68878, 71358, 96027, 103576, 143555, 212674, 215474, 244223, 282433, 347588, 350228, 376937, 420354, 493437, 496397, 527186, 574984, 654013, 657213, 691062, 741514, 824507, 827867, 1255093, 1256887]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'her')","[1032089, 1032473, 1033529, 1042649, 1044025, 1056057, 1056473, 1062585, 1065689, 1066073]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWithNameTypeAndInvalidData(opennlp.tools.namefind.NameSampleDataStreamTest)')","[66026, 68010, 94683, 103242, 141601, 209454, 211694, 242655, 280611, 344552, 346664, 375481, 418268, 490033, 492401, 525506, 572700, 650333, 652893, 689214, 739098, 820643, 823331, 1084845, 1085831]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'No,')",[1046745]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'injured')",[1052025]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'album')",[1037945]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====CJT:np')","[889595, 902893, 916007, 928249, 946929, 966819, 986709, 1006599]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'burnt')","[1105339, 1161241, 1227005]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'choice')","[1121761, 1184079]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsDigit(opennlp.tools.util.featuregen.StringPatternTest)')","[26625, 26656, 26687, 29105, 29136, 29167, 79827, 79851, 79875, 115770, 115800, 115830, 164969, 165004, 165039, 167769, 167804, 167839, 225323, 225351, 225379, 256548, 256576, 256604, 302609, 302642, 302675, 305249, 305282, 305315, 359387, 359413, 359439, 390669, 390701, 390733, 443006, 443043, 443080, 445966, 446003, 446040, 506936, 506966, 506996, 542449, 542484, 542519, 599493, 599533, 599573, 602693, 602733, 602773, 668787, 668820, 668853, 707079, 707116, 707153, 767261, 767303, 767345, 770621, 770663, 770705, 855079, 855119, 855159, 857075, 857117, 857159]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'high')",[1062809]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'called,')","[1090343, 1140377, 1206141]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'global')","[1122359, 1184911]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'five')","[1039033, 1045529]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===N<:num(""2"" <card> <np-close> M/F P)\t2')","[878675, 891973, 905955, 918197, 931911, 951801, 971691, 991581]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Tim')","[1129811, 1195279]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===========,')","[886754, 900052, 913394, 925636, 941935, 961825, 981715, 1001605]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'activists')","[1131007, 1196943]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SentenceDetectorMETest')","[1015625, 1015648, 1015672, 1015695]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Yes,')",[1051033]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====>N:art(""um"" <arti> <-sam> DET M S)\tum')","[888606, 901904, 915096, 927338, 945940, 965830, 985720, 1005610]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'apartment,')",[1038169]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsAllLetters(opennlp.tools.util.featuregen.StringPatternTest)')","[25602, 28082, 79035, 98759, 114780, 163814, 166614, 224399, 255624, 301520, 304160, 358529, 389613, 441785, 444745, 505946, 541294, 598173, 601373, 667698, 705858, 765875, 769235, 853759, 855689]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSetDiffCase(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[17077, 17108, 17139, 20425, 20456, 20487, 76275, 76299, 76323, 110371, 110401, 110431, 154189, 154224, 154259, 157969, 158004, 158039, 221179, 221207, 221235, 251515, 251543, 251571, 292445, 292478, 292511, 296009, 296042, 296075, 355539, 355565, 355591, 384904, 384936, 384968, 431610, 431647, 431684, 435606, 435643, 435680, 502496, 502526, 502556, 536135, 536170, 536205, 587173, 587213, 587253, 591493, 591533, 591573, 663903, 663936, 663969, 700399, 700436, 700473, 754325, 754367, 754409, 758861, 758903, 758945, 842453, 842493, 842533, 843961, 844003, 844045]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'voice')","[1130708, 1196527]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'city')","[1044665, 1059993]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest)')","[46217, 46248, 46279, 46713, 46744, 46775, 86835, 86859, 86883, 127681, 127711, 127741, 187089, 187124, 187159, 187649, 187684, 187719, 233499, 233527, 233555, 267645, 267673, 267701, 323465, 323498, 323531, 323993, 324026, 324059, 366979, 367005, 367031, 403394, 403426, 403458, 466390, 466427, 466464, 466982, 467019, 467056, 515696, 515726, 515756, 556395, 556430, 556465, 624773, 624813, 624853, 625413, 625453, 625493, 678423, 678456, 678489, 721839, 721876, 721913, 793805, 793847, 793889, 794477, 794519, 794561, 1013169, 1013209, 1013249, 1013501, 1013543, 1013585]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=======APP:np')","[886182, 899480, 912866, 925108, 941363, 961253, 981143, 1001033]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'ten')",[1064377]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'factory')",[1059097]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testFindTokenizdPattern(opennlp.tools.namefind.RegexNameFinderTest)')","[65406, 66646, 94299, 103138, 140984, 208754, 210154, 242207, 280036, 343892, 345212, 375065, 417609, 489293, 490773, 525026, 571978, 649533, 651133, 688686, 738334, 819803, 821483, 1083607, 1084105]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'reported')","[1114125, 1173465, 1239229]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'after')",[1052057]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'languages,')","[1096484, 1148921, 1214685]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.chunking.ParserTest')","[779, 106291, 247711, 380548, 531365, 695353]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimple(opennlp.tools.util.ListHeapTest)')","[3377, 35770, 36638, 82875, 99779, 120950, 121093, 175294, 176274, 228879, 261374, 261507, 312344, 313268, 362689, 396203, 396356, 453921, 454957, 510746, 548514, 548682, 611293, 612413, 672978, 713498, 713676, 779651, 780827, 867987, 868149]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'pull')",[1052665]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==--')","[878939, 879011, 892237, 892309, 906197, 906263, 918439, 918505, 932175, 932247, 952065, 952137, 971955, 972027, 991845, 991917]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'help-wanted')","[1095794, 1147961, 1213725]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Munich.')","[1094230, 1110008, 1112722, 1113205, 1116908, 1145785, 1167737, 1171513, 1172185, 1177337, 1211549, 1233501, 1237277, 1237949, 1243101]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'a')","[1087652, 1088158, 1088595, 1091079, 1091470, 1093908, 1094276, 1094529, 1094943, 1095932, 1096323, 1096852, 1097496, 1098094, 1099566, 1100233, 1102004, 1103315, 1103844, 1104005, 1104971, 1105224, 1106949, 1107041, 1107363, 1107708, 1108467, 1109916, 1110468, 1111158, 1112101, 1112285, 1113688, 1115413, 1118012, 1118472, 1118771, 1118886, 1121738, 1122750, 1123003, 1123509, 1129098, 1129903, 1131859, 1136633, 1137337, 1137945, 1141401, 1141945, 1145337, 1145849, 1146201, 1146777, 1148153, 1148697, 1149433, 1150329, 1151161, 1153209, 1154137, 1156601, 1158425, 1159161, 1159385, 1160729, 1161081, 1163481, 1163609, 1164057, 1164537, 1165593, 1167609, 1168377, 1169337, 1170649, 1170905, 1172857, 1175257, 1178873, 1179513, 1179929, 1180089, 1184047, 1185455, 1185807, 1186511, 1194287, 1195407, 1202397, 1203101, 1203709, 1207165, 1207709, 1211101, 1211613, 1211965, 1212541, 1213917, 1214461, 1215197, 1216093, 1216925, 1218973, 1219901, 1222365, 1224189, 1224925, 1225149, 1226493, 1226845, 1229245, 1229373, 1229821, 1230301, 1231357, 1233373, 1234141, 1235101, 1236413, 1236669, 1238621, 1241021, 1244637, 1245277, 1245693, 1245853]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.AbstractEventStreamTest')","[875047, 875070, 875094, 875117]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'alone')",[1062457]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'One')",[1060409]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testStandardCase(opennlp.tools.util.AbstractEventStreamTest)')","[3518, 3542, 3566, 36421, 36452, 36483, 39025, 39056, 39087, 82995, 83019, 83043, 99840, 121237, 121267, 121297, 121498, 121526, 121554, 176029, 176064, 176099, 178969, 179004, 179039, 229019, 229047, 229075, 261641, 261669, 261697, 261884, 261910, 261936, 313037, 313070, 313103, 315809, 315842, 315875, 362819, 362845, 362871, 396510, 396542, 396574, 396789, 396819, 396849, 454698, 454735, 454772, 457806, 457843, 457880, 510896, 510926, 510956, 548851, 548886, 548921, 549157, 549190, 549223, 612133, 612173, 612213, 615493, 615533, 615573, 673143, 673176, 673209, 713855, 713892, 713929, 714179, 714214, 714249, 780533, 780575, 780617, 784061, 784103, 784145, 868449, 868489, 868529, 868773, 868815, 868857]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====N<:v-pcp(""utilizar"" <np-close> M S)\tutilizado')","[887838, 901136, 914392, 926634, 945172, 965062, 984952, 1004842]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===H:prop(""Porto_Poesia"" <cjt-head> <civ> <right> M S)\tPorto_Poesia')","[878651, 891949, 905933, 918175, 931887, 951777, 971667, 991557]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.BeamSearchTest')","[860847, 860870, 860894, 860917]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'States')","[1124544, 1187951, 1252455]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'lived')","[1030457, 1033817, 1055705, 1056377]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Meisenstra§e')","[1116816, 1177209]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Stefanie')","[1090918, 1092229, 1141177, 1143001, 1206941, 1208765]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParsingSeparatedString(opennlp.tools.tokenize.TokenSampleStreamTest)')","[52758, 53626, 89403, 101747, 132672, 194474, 195454, 236495, 272292, 330428, 331352, 369761, 408729, 474197, 475233, 518906, 562246, 633213, 634333, 681954, 728034, 802667, 803843, 1023207, 1023697]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenizerEvaluatorTest')","[1027015, 1027038, 1027062, 1027085]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'once')","[1107685, 1164505, 1230269]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'appartment')","[1117874, 1178681, 1244445]"
"('TokenizerME.java', 'opennlp.tools.tokenize.TokenizerME', 'tokenizePos', '^[A-Za-z0-9]+$', ""it's"")",[1070497]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'urge')","[1121278, 1183407]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Dramenstra§e')","[1109157, 1166553]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'list')","[1107386, 1164089, 1229853]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCompareToEquals(opennlp.tools.util.SpanTest)')","[38405, 38436, 38467, 41133, 41164, 41195, 84435, 84459, 84483, 123174, 123204, 123234, 178269, 178304, 178339, 181349, 181384, 181419, 230699, 230727, 230755, 263448, 263476, 263504, 315149, 315182, 315215, 318053, 318086, 318119, 364379, 364405, 364431, 398577, 398609, 398641, 457066, 457103, 457140, 460322, 460359, 460396, 512696, 512726, 512756, 551113, 551148, 551183, 614693, 614733, 614773, 618213, 618253, 618293, 675123, 675156, 675189, 716247, 716284, 716321, 783221, 783263, 783305, 786917, 786959, 787001, 871279, 871319, 871359, 874267, 874309, 874351]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'are')","[1048537, 1065049]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'you?')","[1115344, 1175161, 1240925]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'NATO')","[1252327, 1252551]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', 'SOURCE: ref=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=-2"" source=""SELVA 1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=""')","[878219, 891517, 905537, 917779, 931455, 951345, 971235, 991125]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSimpleArgumentsMissingEncoding(opennlp.tools.cmdline.ArgumentParserTest)')","[13202, 15434, 74139, 97508, 107427, 149814, 152334, 218687, 248769, 288320, 290696, 353225, 381762, 426985, 429649, 499826, 532696, 582173, 585053, 660966, 696762, 749075, 752099, 835849, 837155]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '======H:prp(""de"" <sam-> <np-close>)\tde')","[884752, 898050, 911546, 923788, 939933, 959823, 979713, 999603]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'friday?')",[1066169]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.chunker.ChunkSampleTest)')","[60074, 62058, 92187, 102596, 137796, 202734, 204974, 239743, 277064, 338216, 340328, 372777, 414205, 482929, 485297, 522386, 568250, 642653, 645213, 685782, 734390, 812579, 815267, 1076183, 1078273]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNegative(opennlp.tools.tokenize.TokenizerEvaluatorTest)')","[54649, 54680, 54711, 55393, 55424, 55455, 90195, 90219, 90243, 134073, 134103, 134133, 196609, 196644, 196679, 197449, 197484, 197519, 237419, 237447, 237475, 273597, 273625, 273653, 332441, 332474, 332507, 333233, 333266, 333299, 370619, 370645, 370671, 410226, 410258, 410290, 476454, 476491, 476528, 477342, 477379, 477416, 519896, 519926, 519956, 563887, 563922, 563957, 635653, 635693, 635733, 636613, 636653, 636693, 683043, 683076, 683109, 729771, 729808, 729845, 805229, 805271, 805313, 806237, 806279, 806321, 1026153, 1026193, 1026233, 1026485, 1026527, 1026569]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Thank')","[1035545, 1051481, 1067353]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleCount(opennlp.tools.formats.ad.ADNameSampleStreamTest)')","[43861, 43892, 43923, 45101, 45132, 45163, 86067, 86091, 86115, 126173, 126203, 126233, 184429, 184464, 184499, 185829, 185864, 185899, 232603, 232631, 232659, 266241, 266269, 266297, 320957, 320990, 321023, 322277, 322310, 322343, 366147, 366173, 366199, 401782, 401814, 401846, 463578, 463615, 463652, 465058, 465095, 465132, 514736, 514766, 514796, 554627, 554662, 554697, 621733, 621773, 621813, 623333, 623373, 623413, 677367, 677400, 677433, 719967, 720004, 720041, 790613, 790655, 790697, 792293, 792335, 792377, 930273, 930313, 930353, 930941, 930983, 931025]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'address.')",[1032505]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'last-minute.')","[1105592, 1161593, 1227357]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testMerge(opennlp.tools.util.eval.FMeasureTest)')","[31802, 33166, 81435, 99384, 118465, 170814, 172354, 227199, 259059, 308120, 309572, 361129, 393548, 449185, 450813, 508946, 545604, 606173, 607933, 670998, 710418, 774275, 776123, 861757, 862759]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'amazing,')",[1046457]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.dictionary.DictionaryTest)')","[18782, 21758, 76731, 98135, 111078, 156114, 159474, 221711, 252174, 294260, 297428, 356033, 385659, 433645, 437197, 503066, 536962, 589373, 593213, 664530, 701274, 756635, 760667, 844819, 846293]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCaseInsensitiveDictionary(opennlp.tools.postag.POSDictionaryTest)')","[48914, 50278, 87963, 101312, 130050, 190134, 191674, 234815, 269850, 326336, 327788, 368201, 405927, 469609, 471237, 517106, 559174, 628253, 630013, 679974, 724782, 797459, 799307, 1017387, 1018053]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '===H:n(""av."" <np-idf> <cjt-acc> <right> M S)\tAv.')","[880146, 893444, 907310, 919552, 933382, 953272, 973162, 993052]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'years')","[1039065, 1058233]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testToString(opennlp.tools.util.StringListTest)')","[20890, 23246, 77499, 98323, 112175, 158494, 161154, 222607, 253197, 296504, 299012, 356865, 386830, 436161, 438973, 504026, 538244, 592093, 595133, 665586, 702630, 759491, 762683, 847705, 848691]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'VeilchenstraÃ\x9fe?')",[1221373]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'last-minute.')",[1052729]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'costumers')","[1107547, 1164313, 1230077]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'arrived')","[1098462, 1106558, 1114815, 1119967, 1151673, 1162937, 1174425, 1181583, 1217437, 1228701, 1240189]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'first')","[1089929, 1094069, 1109824, 1117828, 1139801, 1145561, 1167481, 1178617, 1205565, 1211325, 1233245, 1244381]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'downs')",[1058393]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '====P<:np')","[878747, 881004, 882503, 892045, 894302, 895801, 906021, 908100, 909479, 918263, 920342, 921721, 931983, 935352, 937684, 951873, 955242, 957574, 971763, 975132, 977464, 991653, 995022, 997354]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'happy')","[1088388, 1137657, 1203421]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '======APP:np')","[883223, 896521, 910139, 922381, 938404, 958294, 978184, 998074]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'group')","[1129121, 1194319]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'knows')","[1099313, 1152857, 1218621]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'takes')",[1066649]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'enjoyed')","[1098071, 1151129, 1216893]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:n(""ritual"" <np-def> <occ> <right> M P)\trituais')","[888294, 901592, 914810, 927052, 945628, 965518, 985408, 1005298]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'address?')","[1101659, 1156121, 1221885]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'may')","[1131628, 1197807]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'international')","[1122865, 1123233, 1185615, 1186127]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===========H:prop(""Mário_Pirata"" <hum> <np-close> M S)\tMário_Pirata')","[886676, 899974, 913322, 925564, 941857, 961747, 981637, 1001527]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '=,')","[884232, 885298, 887222, 889075, 897530, 898596, 900520, 902373, 911066, 912050, 913826, 915527, 923308, 924292, 926068, 927769, 939413, 940479, 942403, 946409, 959303, 960369, 962293, 966299, 979193, 980259, 982183, 986189, 999083, 1000149, 1002073, 1006079]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=ACC:cu')","[879678, 892976, 906878, 919120, 932914, 952804, 972694, 992584]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'fairly')","[1126338, 1190447]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'man')",[1053977]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testWordWithOtherTokenization(opennlp.tools.tokenize.SimpleTokenizerTest)')","[56509, 56540, 56571, 57625, 57656, 57687, 90963, 90987, 91011, 135581, 135611, 135641, 198709, 198744, 198779, 199969, 200004, 200039, 238315, 238343, 238371, 275001, 275029, 275057, 334421, 334454, 334487, 335609, 335642, 335675, 371451, 371477, 371503, 411838, 411870, 411902, 478674, 478711, 478748, 480006, 480043, 480080, 520856, 520886, 520916, 565655, 565690, 565725, 638053, 638093, 638133, 639493, 639533, 639573, 684099, 684132, 684165, 731643, 731680, 731717, 807749, 807791, 807833, 809261, 809303, 809345, 1071153, 1071193, 1071233, 1071821, 1071863, 1071905]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:prp(""até"" <left>)\tAté')","[882191, 895489, 909193, 921435, 937372, 957262, 977152, 997042]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hesitant')",[1031801]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'obligations')","[1123256, 1186159]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Seile.')",[1057721]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSingleTokeNameAtSentenceEnd(opennlp.tools.namefind.DictionaryNameFinderTest)')","[63825, 63856, 63887, 64817, 64848, 64879, 93747, 93771, 93795, 140020, 140050, 140080, 206969, 207004, 207039, 208089, 208124, 208159, 241563, 241591, 241619, 279138, 279166, 279194, 342209, 342242, 342275, 343265, 343298, 343331, 374467, 374493, 374519, 416579, 416611, 416643, 487406, 487443, 487480, 488590, 488627, 488664, 524336, 524366, 524396, 570849, 570884, 570919, 647493, 647533, 647573, 648773, 648813, 648853, 687927, 687960, 687993, 737139, 737176, 737213, 817661, 817703, 817745, 819005, 819047, 819089, 1081491, 1081531, 1081571, 1082311, 1082353, 1082395]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'business')","[1109387, 1166873, 1232637]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsInt(opennlp.tools.util.SpanTest)')","[37661, 37692, 37723, 40389, 40420, 40451, 83859, 83883, 83907, 122454, 122484, 122514, 177429, 177464, 177499, 180509, 180544, 180579, 230027, 230055, 230083, 262776, 262804, 262832, 314357, 314390, 314423, 317261, 317294, 317327, 363755, 363781, 363807, 397809, 397841, 397873, 456178, 456215, 456252, 459434, 459471, 459508, 511976, 512006, 512036, 550273, 550308, 550343, 613733, 613773, 613813, 617253, 617293, 617333, 674331, 674364, 674397, 715359, 715396, 715433, 782213, 782255, 782297, 785909, 785951, 785993, 870319, 870359, 870399, 873259, 873301, 873343]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'France')",[1043353]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'point:')",[1045177]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'tenant')",[1069401]
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'organization-cont')","[1198115, 1198144, 1198202, 1198231, 1198347, 1198376, 1198434, 1198463, 1198521, 1198753, 1198869, 1199226, 1199255, 1199284, 1199313, 1199342, 1199400, 1199429, 1199458, 1199516, 1199545, 1199574, 1199632, 1199661, 1199690, 1199748, 1199777, 1199893, 1199922, 1199980, 1200009, 1200038, 1200096, 1200125, 1200241, 1200270, 1200299, 1200328, 1200357, 1200386, 1200415, 1200444, 1200473, 1200502, 1200531, 1200560, 1200589, 1200637, 1253732, 1253790, 1253819, 1253848, 1254022, 1254051, 1254080]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'much')","[1034329, 1051577]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'house')","[1108766, 1166009, 1231773]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Thursday')","[1124153, 1187407]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'hardly')",[1044761]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'found')","[1037881, 1045817, 1050713]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'anyway,')",[1046873]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'inquiries?')",[1048953]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTypeWithInvalidChar1(opennlp.tools.namefind.NameSampleTest)')","[69498, 71978, 96507, 103681, 144155, 213374, 216174, 244783, 282993, 348248, 350888, 377457, 420994, 494177, 497137, 527786, 575684, 654813, 658013, 691722, 742254, 825347, 828707, 1255893, 1257727]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'NOM/PIV')","[944229, 964119, 984009, 1003899]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTypeWithInvalidChar2(opennlp.tools.namefind.NameSampleTest)')","[69622, 72102, 96603, 103702, 144275, 213514, 216314, 244895, 283105, 348380, 351020, 377561, 421122, 494325, 497285, 527906, 575824, 654973, 658173, 691854, 742402, 825515, 828875, 1256053, 1257895]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'years.')",[1029273]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIsInitialCapitalLetter(opennlp.tools.util.featuregen.StringPatternTest)')","[25726, 28206, 79131, 98780, 114900, 163954, 166754, 224511, 255736, 301652, 304292, 358633, 389741, 441933, 444893, 506066, 541434, 598333, 601533, 667830, 706006, 766043, 769403, 853919, 855857]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testOutcomesForSingleSentence(opennlp.tools.postag.POSSampleEventStreamTest)')","[6092, 6116, 6140, 51425, 51456, 51487, 52045, 52076, 52107, 88851, 88875, 88899, 101561, 131571, 131601, 131631, 131712, 131740, 131768, 192969, 193004, 193039, 193669, 193704, 193739, 235851, 235879, 235907, 271267, 271295, 271323, 271398, 271424, 271450, 329009, 329042, 329075, 329669, 329702, 329735, 369163, 369189, 369215, 407552, 407584, 407616, 407703, 407733, 407763, 472606, 472643, 472680, 473346, 473383, 473420, 518216, 518246, 518276, 560955, 560990, 561025, 561121, 561154, 561187, 631493, 631533, 631573, 632293, 632333, 632373, 681195, 681228, 681261, 726667, 726704, 726741, 726843, 726878, 726913, 800861, 800903, 800945, 801701, 801743, 801785, 1021165, 1021205, 1021245, 1021329, 1021371, 1021413]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""Don't"")","[1101130, 1155385, 1221149]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '83454')","[1107271, 1163929, 1229693]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'before')","[1125372, 1189103]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'building')","[1110790, 1168825, 1234589]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testChunkingParserTraining(opennlp.tools.parser.chunking.ParserTest)')","[803, 11838, 12334, 73467, 97281, 106176, 106319, 148274, 148834, 217903, 247604, 247737, 286868, 287396, 352497, 380425, 380578, 425357, 425949, 498986, 531230, 531398, 580413, 581053, 660042, 695210, 695388, 747227, 747899, 833775, 833937]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'an')","[1028985, 1049561, 1059033, 1062137, 1069465]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'will')","[1122957, 1125188, 1128155, 1131536, 1185743, 1188847, 1192975, 1197679]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'there,')",[1033849]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'yes,')","[1027699, 1028641, 1066233]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'faked.')",[1046809]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'life')","[1118426, 1123049, 1179449, 1185871, 1245213]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '===========,')","[886780, 900078, 913418, 925660, 941961, 961851, 981741, 1001631]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '==,')","[880276, 890557, 893574, 903855, 907430, 916895, 919672, 929137, 933512, 947891, 953402, 967781, 973292, 987671, 993182, 1007561]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<ext[^>]*>', '')","[878123, 891421, 905449, 917691, 931359, 951249, 971139, 991029]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenSampleTest')","[1026593, 1026616, 1026640, 1026663]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testGetToken(opennlp.tools.util.StringListTest)')","[1646, 1670, 1694, 20549, 20580, 20611, 22905, 22936, 22967, 77235, 77259, 77283, 98260, 111845, 111875, 111905, 112586, 112614, 112642, 158109, 158144, 158179, 160769, 160804, 160839, 222299, 222327, 222355, 252889, 252917, 252945, 253580, 253606, 253632, 296141, 296174, 296207, 298649, 298682, 298715, 356579, 356605, 356631, 386478, 386510, 386542, 387269, 387299, 387329, 435754, 435791, 435828, 438566, 438603, 438640, 503696, 503726, 503756, 537859, 537894, 537929, 538725, 538758, 538791, 591653, 591693, 591733, 594693, 594733, 594773, 665223, 665256, 665289, 702223, 702260, 702297, 703139, 703174, 703209, 759029, 759071, 759113, 762221, 762263, 762305, 847265, 847305, 847345, 848229, 848271, 848313]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'he')","[1087928, 1088273, 1103407, 1105109, 1105477, 1111319, 1111848, 1112055, 1114585, 1120151, 1120772, 1125165, 1137017, 1137497, 1158553, 1160921, 1161433, 1169561, 1170297, 1170585, 1174105, 1181839, 1182703, 1188815, 1202781, 1203261, 1224317, 1226685, 1227197, 1235325, 1236061, 1236349, 1239869]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'home')","[1055097, 1068025, 1068505]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^(=*)(\\W+)$', '============,')","[886936, 900234, 913562, 925804, 942117, 962007, 981897, 1001787]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=PIV:pp')","[879236, 892534, 906470, 918712, 932472, 952362, 972252, 992142]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'papers')","[1107662, 1164473, 1230237]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==N<:v-pcp(""confirmar"" <np-close> F S)\tconfirmada')","[882839, 896137, 909787, 922029, 938020, 957910, 977800, 997690]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIterator(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16829, 16860, 16891, 20177, 20208, 20239, 76083, 76107, 76131, 110131, 110161, 110191, 153909, 153944, 153979, 157689, 157724, 157759, 220955, 220983, 221011, 251291, 251319, 251347, 292181, 292214, 292247, 295745, 295778, 295811, 355331, 355357, 355383, 384648, 384680, 384712, 431314, 431351, 431388, 435310, 435347, 435384, 502256, 502286, 502316, 535855, 535890, 535925, 586853, 586893, 586933, 591173, 591213, 591253, 663639, 663672, 663705, 700103, 700140, 700177, 753989, 754031, 754073, 758525, 758567, 758609, 842133, 842173, 842213, 843625, 843667, 843709]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:prp(""em"" <sam-> <right>)\tem')","[879262, 892560, 906494, 918736, 932498, 952388, 972278, 992168]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'additional')","[1258445, 1259237]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'ring')","[1039737, 1066809]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'different')","[1089722, 1139513, 1205277]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'danger.')","[1115252, 1175033, 1240797]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===>N:art(""o"" <artd> <-sam> DET M S)\to')","[879340, 892638, 906566, 918808, 932576, 952466, 972356, 992246]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'offer.')",[1040857]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSet(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[1295, 1319, 1343, 13977, 14008, 14039, 17201, 17232, 17263, 74643, 74667, 74691, 97633, 108194, 108224, 108254, 109295, 109323, 109351, 150689, 150724, 150759, 154329, 154364, 154399, 219275, 219303, 219331, 249484, 249512, 249540, 250511, 250537, 250563, 289145, 289178, 289211, 292577, 292610, 292643, 353771, 353797, 353823, 382581, 382613, 382645, 383756, 383786, 383816, 427910, 427947, 427984, 431758, 431795, 431832, 500456, 500486, 500516, 533593, 533628, 533663, 534879, 534912, 534945, 583173, 583213, 583253, 587333, 587373, 587413, 661659, 661692, 661725, 697711, 697748, 697785, 699071, 699106, 699141, 750125, 750167, 750209, 754493, 754535, 754577, 838127, 838167, 838207, 839571, 839613, 839655]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '18,')",[1045369]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkerDetailedFMeasureListenerTest')","[1080271, 1080294, 1080318, 1080341]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'has')","[1092643, 1119944, 1121715, 1122060, 1125119, 1128891, 1130179, 1143577, 1181551, 1184015, 1184495, 1188751, 1193999, 1195791, 1209341]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<org>')","[949598, 969488, 989378, 1009268]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'teacher')",[1056889]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.parser.ParseTest')","[545, 105777, 247233, 379998, 530761, 694713]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Bay')",[1132276]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'into')","[1105891, 1110698, 1113665, 1114999, 1117782, 1118748, 1162009, 1168697, 1172825, 1174681, 1178553, 1179897, 1227773, 1234461, 1238589, 1240445, 1244317, 1245661]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTreeInsertParserTraining(opennlp.tools.parser.treeinsert.ParserTest)')","[710, 734, 758, 10753, 10784, 10815, 11993, 12024, 12055, 73395, 73419, 73443, 97260, 105949, 105979, 106009, 106090, 106118, 106146, 147049, 147084, 147119, 148449, 148484, 148519, 217819, 217847, 217875, 247393, 247421, 247449, 247524, 247550, 247576, 285713, 285746, 285779, 287033, 287066, 287099, 352419, 352445, 352471, 380182, 380214, 380246, 380333, 380363, 380393, 424062, 424099, 424136, 425542, 425579, 425616, 498896, 498926, 498956, 530963, 530998, 531033, 531129, 531162, 531195, 579013, 579053, 579093, 580613, 580653, 580693, 659943, 659976, 660009, 694927, 694964, 695001, 695103, 695138, 695173, 745757, 745799, 745841, 747437, 747479, 747521, 833393, 833433, 833473, 833557, 833599, 833641]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '2.')","[1097887, 1150873, 1216637]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'visit')",[1039993]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'young')","[1038393, 1060825]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'move')","[1118725, 1120565, 1179865, 1182415, 1245629]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'place.')","[1116632, 1176953, 1242717]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'friendly')",[1057145]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'is')","[1090320, 1090527, 1090872, 1091056, 1098301, 1099865, 1102303, 1102602, 1102878, 1103384, 1103545, 1103729, 1110905, 1112653, 1117414, 1120174, 1123808, 1126269, 1126499, 1126982, 1130731, 1140345, 1140633, 1141113, 1141369, 1151449, 1153625, 1157017, 1157433, 1157817, 1158521, 1158745, 1159001, 1168985, 1171417, 1178041, 1181871, 1186927, 1190351, 1190671, 1191343, 1196559, 1206109, 1206397, 1206877, 1207133, 1217213, 1219389, 1222781, 1223197, 1223581, 1224285, 1224509, 1224765, 1234749, 1237181, 1243805, 1258379, 1259171]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'An')","[1098186, 1107754, 1151289, 1164601, 1217053, 1230365]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Elenor')","[1107915, 1164825, 1230589]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'what')",[1063481]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Paris')","[1090021, 1139929, 1205693]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""he'd"")","[1087284, 1112469, 1136121, 1171161, 1201885, 1236925]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '23213')",[1030521]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<p[^>]*>', '<ext id=""1002.pesquisa da usp mapeia cultura livre em são paulo"">')","[887478, 900776, 914062, 926304, 944812, 964702, 984592, 1004482]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEqualsDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14194, 17418, 74811, 97675, 108404, 150934, 154574, 219471, 249680, 289376, 292808, 353953, 382805, 428169, 432017, 500666, 533838, 583453, 587613, 661890, 697970, 750419, 754787, 838407, 839865]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIterator(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16798, 20146, 76059, 97968, 110101, 153874, 157654, 220927, 251263, 292148, 295712, 355305, 384616, 431277, 435273, 502226, 535820, 586813, 591133, 663606, 700066, 753947, 758483, 842093, 843583]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Worcesterstreet')",[1030585]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Afterwards,')",[1056153]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'knowledge')",[1040953]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'quite')","[1042105, 1045113]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '78181')",[1048089]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'll')","[1127626, 1127856, 1192239, 1192559]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==========H:prop(""Luiz_Coronel"" <hum> <np-close> M S)\tLuiz_Coronel')","[886520, 899818, 913178, 925420, 941701, 961591, 981481, 1001371]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'moved')","[1087307, 1095127, 1110675, 1117644, 1136153, 1147033, 1168665, 1178361, 1201917, 1212797, 1234429, 1244125]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'That')","[1091332, 1141753, 1207517]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'advocates')","[1129259, 1194511]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ancestors.')","[1087468, 1136377, 1202141]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'did')","[1046201, 1065401]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'base')","[1123693, 1186767]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<card>')","[934650, 942920, 954540, 962810, 974430, 982700, 994320, 1002590]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'address?')",[1047865]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'in')","[1087744, 1087974, 1089101, 1089699, 1089975, 1090044, 1090435, 1090642, 1090757, 1091654, 1092344, 1092919, 1093264, 1094184, 1094667, 1095012, 1096162, 1097151, 1097588, 1097841, 1098485, 1099175, 1099727, 1100302, 1101268, 1101728, 1101797, 1103890, 1104166, 1104511, 1104580, 1106236, 1106581, 1107179, 1108030, 1108697, 1108789, 1108904, 1109134, 1109479, 1109870, 1110445, 1110813, 1110951, 1112561, 1112676, 1114700, 1116425, 1116862, 1117897, 1117989, 1118173, 1118242, 1118449, 1119070, 1119139, 1119990, 1120427, 1124222, 1125740, 1127005, 1127971, 1128799, 1136761, 1137081, 1138649, 1139481, 1139865, 1139961, 1140505, 1140793, 1140953, 1142201, 1143161, 1143961, 1144441, 1145721, 1146393, 1146873, 1148473, 1149849, 1150457, 1150809, 1151705, 1152665, 1153433, 1154233, 1155577, 1156217, 1156313, 1159225, 1159609, 1160089, 1160185, 1162489, 1162969, 1163801, 1164985, 1165913, 1166041, 1166201, 1166521, 1167001, 1167545, 1168345, 1168857, 1169049, 1171289, 1171449, 1174265, 1176665, 1177273, 1178713, 1178841, 1179097, 1179193, 1179481, 1180345, 1180441, 1181615, 1182223, 1187503, 1189615, 1191375, 1192719, 1193871, 1202525, 1202845, 1204413, 1205245, 1205629, 1205725, 1206269, 1206557, 1206717, 1207965, 1208925, 1209725, 1210205, 1211485, 1212157, 1212637, 1214237, 1215613, 1216221, 1216573, 1217469, 1218429, 1219197, 1219997, 1221341, 1221981, 1222077, 1224989, 1225373, 1225853, 1225949, 1228253, 1228733, 1229565, 1230749, 1231677, 1231805, 1231965, 1232285, 1232765, 1233309, 1234109, 1234621, 1234813, 1237053, 1237213, 1240029, 1242429, 1243037, 1244477, 1244605, 1244861, 1244957, 1245245, 1246109, 1246205]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '<s[^>]*>', '<s id=""63955"" ref=""1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme=-2"" source=""SELVA 1001.porto-poesia=removeme=-2 a poesia toma porto-alegre=removeme="">')","[878195, 891493, 905515, 917757, 931431, 951321, 971211, 991101]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'person!')","[1103338, 1158457, 1224221]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'flaring')",[1052313]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'right')",[1030745]
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<poss')","[949843, 969733, 989623, 1009513]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'much,')","[1117253, 1177817, 1243581]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '======H:prp(""para"" <np-long>)\tpara')","[887886, 901184, 914436, 926678, 945220, 965110, 985000, 1004890]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'addresses')",[1055129]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'so')","[1089331, 1095081, 1127166, 1138969, 1146969, 1191599, 1204733, 1212733]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIterator(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14690, 17914, 75195, 97759, 108884, 151494, 155134, 219919, 250128, 289904, 293336, 354369, 383317, 428761, 432609, 501146, 534398, 584093, 588253, 662418, 698562, 751091, 755459, 839047, 840537]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '1001 Com relação à parceria com o shopping o organizador diz que:')","[880764, 894062, 907880, 920122, 935112, 955002, 974892, 994782]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTokenizerSimpleModel(opennlp.tools.tokenize.TokenizerMETest)')","[7121, 55734, 56602, 90459, 102078, 134814, 135077, 197834, 198814, 237727, 274286, 274531, 333596, 334520, 370905, 411019, 411300, 477749, 478785, 520226, 564758, 565066, 637053, 638173, 683406, 730694, 731020, 806699, 807875, 1027739, 1028061]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'particulary')",[1034009]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====H:prop(""Armindo_Trevisan"" <hum> <np-close> M S)\tArmindo_Trevisan')","[885584, 898882, 912314, 924556, 940765, 960655, 980545, 1000435]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSetDiffCase(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14969, 15000, 15031, 18193, 18224, 18255, 75411, 75435, 75459, 109154, 109184, 109214, 151809, 151844, 151879, 155449, 155484, 155519, 220171, 220199, 220227, 250380, 250408, 250436, 290201, 290234, 290267, 293633, 293666, 293699, 354603, 354629, 354655, 383605, 383637, 383669, 429094, 429131, 429168, 432942, 432979, 433016, 501416, 501446, 501476, 534713, 534748, 534783, 584453, 584493, 584533, 588613, 588653, 588693, 662715, 662748, 662781, 698895, 698932, 698969, 751469, 751511, 751553, 755837, 755879, 755921, 839407, 839447, 839487, 840915, 840957, 840999]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'old')","[1029017, 1043257]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'trading.')",[1070425]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLastMatchingTokenNameIsChoosen(opennlp.tools.namefind.DictionaryNameFinderTest)')","[63949, 63980, 64011, 64941, 64972, 65003, 93843, 93867, 93891, 140140, 140170, 140200, 207109, 207144, 207179, 208229, 208264, 208299, 241675, 241703, 241731, 279250, 279278, 279306, 342341, 342374, 342407, 343397, 343430, 343463, 374571, 374597, 374623, 416707, 416739, 416771, 487554, 487591, 487628, 488738, 488775, 488812, 524456, 524486, 524516, 570989, 571024, 571059, 647653, 647693, 647733, 648933, 648973, 649013, 688059, 688092, 688125, 737287, 737324, 737361, 817829, 817871, 817913, 819173, 819215, 819257, 1081651, 1081691, 1081731, 1082479, 1082521, 1082563]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'we')","[1093862, 1094368, 1095104, 1098554, 1100187, 1110284, 1110652, 1145273, 1145977, 1147001, 1151801, 1154073, 1168121, 1168633, 1211037, 1211741, 1212765, 1217565, 1219837, 1233885, 1234397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'nuclear')","[1120657, 1121531, 1123325, 1124958, 1126016, 1182543, 1183759, 1186255, 1188527, 1189999]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'student')","[1095955, 1148185, 1213949]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.VersionTest')","[851333, 851356, 851380, 851403]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'located')",[1059321]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===N<:prop(""Cristovão_Colombo"" <hum> <np-close> M S)\tCristovão_Colombo')","[880172, 893470, 907334, 919576, 933408, 953298, 973188, 993078]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'French')",[1041177]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'write')","[1088572, 1089837, 1101981, 1137913, 1139673, 1156569, 1203677, 1205437, 1222333]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '15')","[1086847, 1135513, 1201277]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=,')","[882287, 882863, 883751, 887718, 895585, 896161, 897049, 901016, 909281, 909809, 910623, 914282, 921523, 922051, 922865, 926524, 937468, 938044, 938932, 945052, 957358, 957934, 958822, 964942, 977248, 977824, 978712, 984832, 997138, 997714, 998602, 1004722]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTypeWithInvalidChar2(opennlp.tools.namefind.NameSampleTest)')","[69653, 69684, 69715, 72133, 72164, 72195, 96627, 96651, 96675, 144305, 144335, 144365, 213549, 213584, 213619, 216349, 216384, 216419, 244923, 244951, 244979, 283133, 283161, 283189, 348413, 348446, 348479, 351053, 351086, 351119, 377587, 377613, 377639, 421154, 421186, 421218, 494362, 494399, 494436, 497322, 497359, 497396, 527936, 527966, 527996, 575859, 575894, 575929, 655013, 655053, 655093, 658213, 658253, 658293, 691887, 691920, 691953, 742439, 742476, 742513, 825557, 825599, 825641, 828917, 828959, 829001, 1256093, 1256133, 1256173, 1257937, 1257979, 1258021]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '=====>N:art(""o"" <artd> <-sam> DET F S)\ta')","[882527, 895825, 909501, 921743, 937708, 957598, 977488, 997378]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsSlash(opennlp.tools.util.featuregen.StringPatternTest)')","[26470, 28950, 79707, 98906, 115620, 164794, 167594, 225183, 256408, 302444, 305084, 359257, 390509, 442821, 445781, 506786, 542274, 599293, 602493, 668622, 706894, 767051, 770411, 854879, 856865]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '3.5%')",[1070297]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'president')","[1120404, 1123440, 1182191, 1186415]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'injured.')","[1113320, 1172345, 1238109]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenizationOfStringWithoutTokens(opennlp.tools.tokenize.WhitespaceTokenizerTest)')","[57129, 57160, 57191, 58741, 58772, 58803, 91251, 91275, 91299, 136078, 136108, 136138, 199409, 199444, 199479, 201229, 201264, 201299, 238651, 238679, 238707, 275464, 275492, 275520, 335081, 335114, 335147, 336797, 336830, 336863, 371763, 371789, 371815, 412369, 412401, 412433, 479414, 479451, 479488, 481338, 481375, 481412, 521216, 521246, 521276, 566237, 566272, 566307, 638853, 638893, 638933, 640933, 640973, 641013, 684495, 684528, 684561, 732259, 732296, 732333, 808589, 808631, 808673, 810773, 810815, 810857, 1072399, 1072439, 1072479, 1072899, 1072941, 1072983]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCompareToIgnoreCase(opennlp.tools.util.StringListTest)')","[20797, 20828, 20859, 23153, 23184, 23215, 77427, 77451, 77475, 112085, 112115, 112145, 158389, 158424, 158459, 161049, 161084, 161119, 222523, 222551, 222579, 253113, 253141, 253169, 296405, 296438, 296471, 298913, 298946, 298979, 356787, 356813, 356839, 386734, 386766, 386798, 436050, 436087, 436124, 438862, 438899, 438936, 503936, 503966, 503996, 538139, 538174, 538209, 591973, 592013, 592053, 595013, 595053, 595093, 665487, 665520, 665553, 702519, 702556, 702593, 759365, 759407, 759449, 762557, 762599, 762641, 847585, 847625, 847665, 848565, 848607, 848649]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ups')","[1110192, 1167993, 1233757]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Apart')","[1125947, 1189903]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '?')","[1115551, 1175449, 1241213, 1258819, 1258907]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testFindMatchingPatternWithoutMatchingTokenBounds(opennlp.tools.namefind.RegexNameFinderTest)')","[65282, 66522, 94203, 103117, 140864, 208614, 210014, 242095, 279924, 343760, 345080, 374961, 417481, 489145, 490625, 524906, 571838, 649373, 650973, 688554, 738186, 819635, 821315, 1083447, 1083937]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'painfully')","[1105040, 1160825, 1226589]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testSerialization(opennlp.tools.tokenize.DetokenizationDictionaryTest)')","[6536, 53254, 54246, 89595, 101789, 133049, 133312, 195034, 196154, 236719, 272643, 272888, 330956, 332012, 369969, 409132, 409413, 474789, 475973, 519146, 562688, 562996, 633853, 635133, 682218, 728502, 728828, 803339, 804683, 1024125, 1024447]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'President')","[1119829, 1121094, 1122451, 1123969, 1125027, 1128063, 1128615, 1130639, 1181391, 1183151, 1185039, 1187151, 1188623, 1192847, 1193615, 1196431, 1258269, 1259061]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'please')","[1034809, 1036409]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTokenProbArray(opennlp.tools.chunker.ChunkerMETest)')","[58121, 58152, 58183, 59361, 59392, 59423, 91635, 91659, 91683, 136695, 136725, 136755, 200529, 200564, 200599, 201929, 201964, 201999, 239099, 239127, 239155, 276039, 276067, 276095, 336137, 336170, 336203, 337457, 337490, 337523, 372179, 372205, 372231, 413028, 413060, 413092, 480598, 480635, 480672, 482078, 482115, 482152, 521696, 521726, 521756, 566959, 566994, 567029, 640133, 640173, 640213, 641733, 641773, 641813, 685023, 685056, 685089, 733023, 733060, 733097, 809933, 809975, 810017, 811613, 811655, 811697, 1073637, 1073677, 1073717, 1074625, 1074667, 1074709]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '84630')",[1064217]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'ad')","[1095817, 1147993, 1213757]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'like')","[1091746, 1096507, 1098853, 1100946, 1102763, 1116356, 1119254, 1142329, 1148953, 1152217, 1155129, 1157657, 1176569, 1180601, 1208093, 1214717, 1217981, 1220893, 1223421, 1242333, 1246365]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.postag.POSTaggerMETest')","[5927, 131399, 271107, 407368, 560753, 726453]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Gerhard')","[1102349, 1157081, 1222845]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '83939')","[1106259, 1162521, 1228285]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'for')","[1086824, 1089423, 1104741, 1107018, 1112170, 1115597, 1118587, 1120887, 1125510, 1126660, 1128293, 1135481, 1139097, 1160409, 1163577, 1170745, 1175513, 1179673, 1182863, 1189295, 1190895, 1193167, 1201245, 1204861, 1226173, 1229341, 1236509, 1241277, 1245437]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '==H:prp(""com_relação_a"" <sam-> <left>)\tCom_relação_a')","[880860, 894158, 907968, 920210, 935208, 955098, 974988, 994878]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'singer')","[1109571, 1167129, 1232893]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'enough')","[1094437, 1109272, 1118564, 1146073, 1166713, 1179641, 1211837, 1232477, 1245405]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'friend')","[1086709, 1087675, 1098232, 1115436, 1135321, 1136665, 1151353, 1175289, 1201085, 1202429, 1217117, 1241053]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', ""he'd"")","[1029689, 1061273]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<occ>')","[949044, 950011, 968934, 969901, 988824, 989791, 1008714, 1009681]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'have')","[1094414, 1095265, 1096300, 1103821, 1146041, 1147225, 1148665, 1159129, 1211805, 1212989, 1214429, 1224893]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '==========H:prop(""Luiz_Coronel"" <hum> <np-close> M S)\tLuiz_Coronel')","[886546, 899844, 913202, 925444, 941727, 961617, 981507, 1001397]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Britain')",[1252807]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Is')","[1104212, 1159673, 1225437]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '<END>.')","[1095702, 1117506, 1147833, 1178169, 1213597, 1243933]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testDetokenizeToString(opennlp.tools.tokenize.DictionaryDetokenizerTest)')","[52262, 53130, 89211, 101685, 132295, 193914, 194894, 236271, 271941, 329900, 330824, 369553, 408326, 473605, 474641, 518666, 561804, 632573, 633693, 681690, 727566, 801995, 803171, 1022457, 1022787]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEmptyDataSet(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[32298, 33662, 81723, 99467, 118962, 171374, 172914, 227535, 259522, 308648, 310100, 361441, 394079, 449777, 451405, 509306, 546186, 606813, 608573, 671394, 711034, 774947, 776795, 863339, 863997]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Her')",[1031385]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'execution')","[1131743, 1197967]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'grandaunt.')","[1088687, 1138073, 1203837]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'order')","[1117920, 1178745, 1244509]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '============,')","[886884, 900182, 913514, 925756, 942065, 961955, 981845, 1001735]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Clara,')",[1033305]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'pick')",[1036441]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.sentdetect.SentenceDetectorEvaluatorTest')","[1014031, 1014054, 1014078, 1014101]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====>A:adv(""mais_de"" <quant>)\tmais_de')","[884336, 897634, 911162, 923404, 939517, 959407, 979297, 999187]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.util.PlainTextByLineStreamTest')","[860425, 860448, 860472, 860495]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'easy')","[1032281, 1044473]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '56,')","[1092873, 1143897, 1209661]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'StifterstraÃ\x9fe')",[1228765]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Ostbahnhof')","[1034457, 1035065]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'George')","[1037305, 1040121, 1059481]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'That')",[1034681]
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===>N:adj(""próximo"" M S)\tpróximo')","[878435, 891733, 905735, 917977, 931671, 951561, 971451, 991341]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testZeroMethods(opennlp.tools.cmdline.ArgumentParserTest)')","[13729, 13760, 13791, 15961, 15992, 16023, 74547, 74571, 74595, 107937, 107967, 107997, 150409, 150444, 150479, 152929, 152964, 152999, 219163, 219191, 219219, 249245, 249273, 249301, 288881, 288914, 288947, 291257, 291290, 291323, 353667, 353693, 353719, 382306, 382338, 382370, 427614, 427651, 427688, 430278, 430315, 430352, 500336, 500366, 500396, 533291, 533326, 533361, 582853, 582893, 582933, 585733, 585773, 585813, 661527, 661560, 661593, 697391, 697428, 697465, 749789, 749831, 749873, 752813, 752855, 752897, 836529, 836569, 836609, 837869, 837911, 837953]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Ostbahnhof')","[1091148, 1091631, 1141497, 1142169, 1207261, 1207933]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'album')","[1093954, 1145401, 1211165]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""I'll"")","[1103798, 1159097, 1224861]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'did')","[1100394, 1115666, 1154361, 1175609, 1220125, 1241373]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'weapons')","[1120680, 1121554, 1123348, 1124981, 1182575, 1183791, 1186287, 1188559]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '====H:n(""vidro"" <np-idf> <cjt-acc> <con> <right> M P)\tvidros')","[890427, 903725, 916775, 929017, 947761, 967651, 987541, 1007431]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseInvalidVersion2(opennlp.tools.util.VersionTest)')","[22750, 24238, 78075, 98469, 113032, 160594, 162274, 223279, 253996, 298484, 300068, 357489, 387745, 438381, 440157, 504746, 539246, 594493, 596413, 666378, 703690, 762011, 764027, 849767, 850433]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'local')","[1099612, 1107087, 1153273, 1163673, 1219037, 1229437]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', '81737')","[1116885, 1177305, 1243069]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'what')","[1114148, 1173497, 1239261]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'said')","[1122543, 1127511, 1130915, 1185167, 1192079, 1196815]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'away')","[1088227, 1099934, 1137433, 1153721, 1203197, 1219485]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testEquals(opennlp.tools.util.SpanTest)')","[36886, 39614, 83259, 99923, 121704, 176554, 179634, 229327, 262076, 313532, 316436, 363105, 397009, 455253, 458509, 511226, 549398, 612733, 616253, 673506, 714434, 781163, 784859, 869319, 872209]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', 'SUB:conj-s(""que"" <clb-fs>)\tque')","[881919, 895217, 908943, 921185, 936267, 956157, 976047, 995937]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testNoTypesToString(opennlp.tools.namefind.NameSampleTest)')","[68506, 70986, 95739, 103513, 143195, 212254, 215054, 243887, 282097, 347192, 349832, 376625, 419970, 492993, 495953, 526826, 574564, 653533, 656733, 690666, 741070, 824003, 827363, 1254613, 1256383]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testBestSequenceWithValidator(opennlp.tools.util.BeamSearchTest)')","[30345, 30376, 30407, 31089, 31120, 31151, 80787, 80811, 80835, 117381, 117411, 117441, 169169, 169204, 169239, 170009, 170044, 170079, 226443, 226471, 226499, 258049, 258077, 258105, 306569, 306602, 306635, 307361, 307394, 307427, 360427, 360453, 360479, 392390, 392422, 392454, 447446, 447483, 447520, 448334, 448371, 448408, 508136, 508166, 508196, 544335, 544370, 544405, 604293, 604333, 604373, 605253, 605293, 605333, 670107, 670140, 670173, 709075, 709112, 709149, 772301, 772343, 772385, 773309, 773351, 773393, 859649, 859689, 859729, 860317, 860359, 860401]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'hours')","[1106374, 1162681, 1228445]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'too')","[1130225, 1195855]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'building.')",[1044921]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWordWithOtherTokenization(opennlp.tools.tokenize.SimpleTokenizerTest)')","[56478, 57594, 90939, 102223, 135551, 198674, 199934, 238287, 274973, 334388, 335576, 371425, 411806, 478637, 479969, 520826, 565620, 638013, 639453, 684066, 731606, 807707, 809219, 1071113, 1071779]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'solidarity')","[1120266, 1181999]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '=========APP:np')","[886494, 899792, 913154, 925396, 941675, 961565, 981455, 1001345]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testBuildNGramDictionary(opennlp.tools.postag.POSTaggerMETest)')","[50557, 50588, 50619, 51673, 51704, 51735, 88755, 88779, 88803, 131314, 131344, 131374, 191989, 192024, 192059, 193249, 193284, 193319, 235739, 235767, 235795, 271028, 271056, 271084, 328085, 328118, 328151, 329273, 329306, 329339, 369059, 369085, 369111, 407277, 407309, 407341, 471570, 471607, 471644, 472902, 472939, 472976, 518096, 518126, 518156, 560653, 560688, 560723, 630373, 630413, 630453, 631813, 631853, 631893, 681063, 681096, 681129, 726347, 726384, 726421, 799685, 799727, 799769, 801197, 801239, 801281, 1020575, 1020615, 1020655, 1020907, 1020949, 1020991]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testLookup(opennlp.tools.dictionary.DictionaryTest)')","[19309, 19340, 19371, 22285, 22316, 22347, 77139, 77163, 77187, 111588, 111618, 111648, 156709, 156744, 156779, 160069, 160104, 160139, 222187, 222215, 222243, 252650, 252678, 252706, 294821, 294854, 294887, 297989, 298022, 298055, 356475, 356501, 356527, 386203, 386235, 386267, 434274, 434311, 434348, 437826, 437863, 437900, 503576, 503606, 503636, 537557, 537592, 537627, 590053, 590093, 590133, 593893, 593933, 593973, 665091, 665124, 665157, 701903, 701940, 701977, 757349, 757391, 757433, 761381, 761423, 761465, 845499, 845539, 845579, 847007, 847049, 847091]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'middle-aged')",[1062681]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'entertainer')",[1057657]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testContainsHyphen(opennlp.tools.util.featuregen.StringPatternTest)')","[26749, 26780, 26811, 29229, 29260, 29291, 79923, 79947, 79971, 115890, 115920, 115950, 165109, 165144, 165179, 167909, 167944, 167979, 225435, 225463, 225491, 256660, 256688, 256716, 302741, 302774, 302807, 305381, 305414, 305447, 359491, 359517, 359543, 390797, 390829, 390861, 443154, 443191, 443228, 446114, 446151, 446188, 507056, 507086, 507116, 542589, 542624, 542659, 599653, 599693, 599733, 602853, 602893, 602933, 668919, 668952, 668985, 707227, 707264, 707301, 767429, 767471, 767513, 770789, 770831, 770873, 855239, 855279, 855319, 857243, 857285, 857327]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'later')",[1064441]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'deem')","[1101889, 1156441, 1222205]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'they')","[1039897, 1042329, 1046617]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'stock')",[1070201]
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testTypeWithNewLine(opennlp.tools.namefind.NameSampleTest)')","[69405, 69436, 69467, 71885, 71916, 71947, 96435, 96459, 96483, 144065, 144095, 144125, 213269, 213304, 213339, 216069, 216104, 216139, 244699, 244727, 244755, 282909, 282937, 282965, 348149, 348182, 348215, 350789, 350822, 350855, 377379, 377405, 377431, 420898, 420930, 420962, 494066, 494103, 494140, 497026, 497063, 497100, 527696, 527726, 527756, 575579, 575614, 575649, 654693, 654733, 654773, 657893, 657933, 657973, 691623, 691656, 691689, 742143, 742180, 742217, 825221, 825263, 825305, 828581, 828623, 828665, 1255773, 1255813, 1255853, 1257601, 1257643, 1257685]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'less')","[1122129, 1122198, 1184591, 1184687]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'tree.')","[1113711, 1172889, 1238653]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Wednesday')","[1121025, 1123716, 1129466, 1183055, 1186799, 1194799]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testIntersects(opennlp.tools.util.SpanTest)')","[37878, 40606, 84027, 100091, 122664, 177674, 180754, 230223, 262972, 314588, 317492, 363937, 398033, 456437, 459693, 512186, 550518, 614013, 617533, 674562, 715618, 782507, 786203, 870599, 873553]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testNameFinderWithTypes(opennlp.tools.namefind.NameFinderMETest)')","[67173, 67204, 67235, 70149, 70180, 70211, 95283, 95307, 95331, 142488, 142518, 142548, 210749, 210784, 210819, 214109, 214144, 214179, 243355, 243383, 243411, 281438, 281466, 281494, 345773, 345806, 345839, 348941, 348974, 349007, 376131, 376157, 376183, 419215, 419247, 419279, 491402, 491439, 491476, 494954, 494991, 495028, 526256, 526286, 526316, 573737, 573772, 573807, 651813, 651853, 651893, 655653, 655693, 655733, 690039, 690072, 690105, 740195, 740232, 740269, 822197, 822239, 822281, 826229, 826271, 826313, 1133043, 1133083, 1133123, 1134191, 1134233, 1134275]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'year,')","[1088480, 1106857, 1110629, 1137785, 1163353, 1168601, 1203549, 1229117, 1234365]"
"('NameFinderME.java', 'opennlp.tools.namefind.NameFinderME', 'extractNameType', '(.+)-\\w+', 'person-cont')","[1198550, 1198608, 1199033, 1199110, 1199168, 1200613, 1246714, 1246743, 1246772, 1246801, 1246849, 1246878, 1246907, 1250650, 1250679, 1250708, 1250737, 1250766, 1250795, 1250824, 1250853, 1250882, 1250911, 1250940, 1250969, 1250998, 1251027, 1251056, 1251085, 1251114, 1251143, 1251172, 1251201, 1251230, 1251259, 1251288, 1251317, 1251346, 1251375, 1251404, 1251433, 1251462, 1251491, 1251520, 1251549, 1251578, 1251607, 1251636, 1251665, 1251694, 1251723, 1251752, 1251781, 1251810, 1251839, 1251868, 1251897, 1251926, 1251955, 1251984, 1252013, 1252042, 1252071, 1252263, 1253877, 1253993, 1254109, 1254225, 1254341, 1254413]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ',')","[1087008, 1087123, 1087629, 1090228, 1090987, 1092160, 1096829, 1107984, 1108605, 1111135, 1120105, 1121071, 1122175, 1122405, 1122911, 1123762, 1125671, 1126062, 1126913, 1127143, 1127396, 1127787, 1129075, 1129880, 1130018, 1130662, 1131559, 1135737, 1135897, 1136601, 1140217, 1141273, 1142905, 1149401, 1164921, 1165785, 1169305, 1181775, 1183119, 1184655, 1184975, 1185679, 1186863, 1189519, 1190063, 1191247, 1191567, 1191919, 1192463, 1194255, 1195375, 1195567, 1196463, 1197711, 1201501, 1201661, 1202365, 1205981, 1207037, 1208669, 1215165, 1230685, 1231549, 1235069]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'director')","[1126545, 1190735]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pretty')","[1127028, 1191407]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testItertor(opennlp.tools.util.StringListTest)')","[20642, 22998, 77307, 98281, 111935, 158214, 160874, 222383, 252973, 296240, 298748, 356657, 386574, 435865, 438677, 503786, 537964, 591773, 594813, 665322, 702334, 759155, 762347, 847385, 848355]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testParseWithError(opennlp.tools.postag.POSSampleTest)')","[49782, 51270, 88539, 101458, 130907, 191114, 192794, 235487, 270649, 327260, 328844, 368825, 406842, 470645, 472421, 517826, 560176, 629373, 631293, 680766, 725842, 798635, 800651, 1019113, 1020115]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testGetStart(opennlp.tools.util.SpanTest)')","[38777, 38808, 38839, 41505, 41536, 41567, 84723, 84747, 84771, 123534, 123564, 123594, 178689, 178724, 178759, 181769, 181804, 181839, 231035, 231063, 231091, 263784, 263812, 263840, 315545, 315578, 315611, 318449, 318482, 318515, 364691, 364717, 364743, 398961, 398993, 399025, 457510, 457547, 457584, 460766, 460803, 460840, 513056, 513086, 513116, 551533, 551568, 551603, 615173, 615213, 615253, 618693, 618733, 618773, 675519, 675552, 675585, 716691, 716728, 716765, 783725, 783767, 783809, 787421, 787463, 787505, 871759, 871799, 871839, 874771, 874813, 874855]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<f-q>')","[942806, 962696, 982586, 1002476]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '====APP:np')","[885714, 899012, 912434, 924676, 940895, 960785, 980675, 1000565]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:prop(""Arturos"" <org> <left> M P)\tArturos')","[889907, 903205, 916295, 928537, 947241, 967131, 987021, 1006911]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testTypeWithSpecialChars(opennlp.tools.namefind.NameSampleTest)')","[69002, 71482, 96123, 103597, 143675, 212814, 215614, 244335, 282545, 347720, 350360, 377041, 420482, 493585, 496545, 527306, 575124, 654173, 657373, 691194, 741662, 824675, 828035, 1255253, 1257055]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'travelling')",[1043449]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""It's"")","[1090481, 1101314, 1140569, 1155641, 1206333, 1221405]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Fernandes,')",[1041497]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Unter-den-Linden')",[1045337]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCreation(opennlp.tools.cmdline.TerminateToolExceptionTest)')","[1037, 12458, 13822, 73755, 97384, 106810, 106953, 148974, 150514, 218239, 248194, 248327, 287528, 288980, 352809, 381103, 381256, 426097, 427725, 499346, 531974, 532142, 581213, 582973, 660438, 695998, 696176, 748067, 749915, 834947, 835109]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<cjt-acc>')","[934820, 934959, 950526, 954710, 954849, 970416, 974600, 974739, 990306, 994490, 994629, 1010196]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===>N:adj(""próximo"" M S)\tpróximo')","[879392, 892690, 906614, 918856, 932628, 952518, 972408, 992298]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream', 'read', '</s>', '===ADVL:adv(""até_mesmo"" <left>)\taté_mesmo')","[888006, 901304, 914546, 926788, 945340, 965230, 985120, 1005010]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', ""it's"")","[1092183, 1101705, 1142937, 1156185, 1208701, 1221949]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimpleTraining(opennlp.tools.doccat.DocumentCategorizerMETest)')","[4805, 4829, 4853, 45845, 45876, 45907, 46341, 46372, 46403, 86643, 86667, 86691, 100858, 127304, 127334, 127364, 127445, 127473, 127501, 186669, 186704, 186739, 187229, 187264, 187299, 233275, 233303, 233331, 267294, 267322, 267350, 267425, 267451, 267477, 323069, 323102, 323135, 323597, 323630, 323663, 366771, 366797, 366823, 402991, 403023, 403055, 403142, 403172, 403202, 465946, 465983, 466020, 466538, 466575, 466612, 515456, 515486, 515516, 555953, 555988, 556023, 556119, 556152, 556185, 624293, 624333, 624373, 624933, 624973, 625013, 678159, 678192, 678225, 721371, 721408, 721445, 721547, 721582, 721617, 793301, 793343, 793385, 793973, 794015, 794057, 1012587, 1012627, 1012667, 1012751, 1012793, 1012835]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'didn`t')","[1089216, 1138809, 1204573]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testContainsDigit(opennlp.tools.util.featuregen.StringPatternTest)')","[26594, 29074, 79803, 98927, 115740, 164934, 167734, 225295, 256520, 302576, 305216, 359361, 390637, 442969, 445929, 506906, 542414, 599453, 602653, 668754, 707042, 767219, 770579, 855039, 857033]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'his')","[1086962, 1087445, 1103683, 1105408, 1114263, 1135673, 1136345, 1158937, 1161337, 1173657, 1201437, 1202109, 1224701, 1227101, 1239421]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'His')","[1102257, 1103499, 1156953, 1158681, 1222717, 1224445]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Alisa')","[1096760, 1097933, 1149305, 1150937, 1215069, 1216701]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'instantly')","[1100141, 1105362, 1114033, 1154009, 1161273, 1173337, 1219773, 1227037, 1239101]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', '<ac>')","[943358, 963248, 983138, 1003028]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', '25334')",[1068665]
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'find')","[1086525, 1089492, 1111940, 1112492, 1117138, 1135065, 1139193, 1170425, 1171193, 1177657, 1200829, 1204957, 1236189, 1236957, 1243421]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'right?')","[1104258, 1159737, 1225501]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'forward')","[1096645, 1149145, 1214909]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest')","[1364, 110456, 251594, 384995, 536235, 700505]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testWithTypesToString(opennlp.tools.namefind.NameSampleTest)')","[68630, 71110, 95835, 103534, 143315, 212394, 215194, 243999, 282209, 347324, 349964, 376729, 420098, 493141, 496101, 526946, 574704, 653693, 656893, 690798, 741218, 824171, 827531, 1254773, 1256551]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'caf\x8e')","[1099681, 1153369]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'boy')","[1106995, 1163545, 1229309]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '===H:prp(""em"" <sam-> <right>)\tem')","[890609, 890947, 903907, 904245, 916943, 917255, 929185, 929497, 947943, 948281, 967833, 968171, 987723, 988061, 1007613, 1007951]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testCaseSensitiveDictionary(opennlp.tools.postag.POSDictionaryTest)')","[48821, 48852, 48883, 50185, 50216, 50247, 87891, 87915, 87939, 129960, 129990, 130020, 190029, 190064, 190099, 191569, 191604, 191639, 234731, 234759, 234787, 269766, 269794, 269822, 326237, 326270, 326303, 327689, 327722, 327755, 368123, 368149, 368175, 405831, 405863, 405895, 469498, 469535, 469572, 471126, 471163, 471200, 517016, 517046, 517076, 559069, 559104, 559139, 628133, 628173, 628213, 629893, 629933, 629973, 679875, 679908, 679941, 724671, 724708, 724745, 797333, 797375, 797417, 799181, 799223, 799265, 1017267, 1017307, 1017347, 1017927, 1017969, 1018011]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'part-time')","[1096208, 1148537, 1214301]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'mortal')","[1115229, 1175001, 1240765]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'first,')","[1108214, 1165241, 1231005]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'On')","[1104833, 1113021, 1160537, 1171929, 1226301, 1237693]"
"('ADNameSampleStream.java', 'opennlp.tools.formats.ad.ADNameSampleStream', 'getNER', '<(NER:)?(.*?)>', 'M')","[934112, 934224, 934425, 934538, 934876, 936630, 936750, 936861, 936996, 942722, 942834, 943584, 944173, 944737, 948712, 948799, 948951, 949542, 949927, 950067, 950616, 950706, 954002, 954114, 954315, 954428, 954766, 956520, 956640, 956751, 956886, 962612, 962724, 963474, 964063, 964627, 968602, 968689, 968841, 969432, 969817, 969957, 970506, 970596, 973892, 974004, 974205, 974318, 974656, 976410, 976530, 976641, 976776, 982502, 982614, 983364, 983953, 984517, 988492, 988579, 988731, 989322, 989707, 989847, 990396, 990486, 993782, 993894, 994095, 994208, 994546, 996300, 996420, 996531, 996666, 1002392, 1002504, 1003254, 1003843, 1004407, 1008382, 1008469, 1008621, 1009212, 1009597, 1009737, 1010286, 1010376]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Lilienstra§e')","[1118196, 1179129]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'opennlp.tools.namefind.DictionaryNameFinderTest')","[1083177, 1083200, 1083224, 1083247]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testFailSafty(opennlp.tools.util.eval.CrossValidationPartitionerTest)')","[32174, 33538, 81627, 99446, 118842, 171234, 172774, 227423, 259410, 308516, 309968, 361337, 393951, 449629, 451257, 509186, 546046, 606653, 608413, 671262, 710886, 774779, 776627, 863179, 863829]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Highfly-Hotel')","[1097128, 1149817, 1215581]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Europe.')",[1043513]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.tokenize.TokenizerMETest')","[7097, 135049, 274505, 411270, 565033, 730985]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'rights')","[1129236, 1130363, 1130984, 1194479, 1196047, 1196911]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testIterator(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14721, 14752, 14783, 17945, 17976, 18007, 75219, 75243, 75267, 108914, 108944, 108974, 151529, 151564, 151599, 155169, 155204, 155239, 219947, 219975, 220003, 250156, 250184, 250212, 289937, 289970, 290003, 293369, 293402, 293435, 354395, 354421, 354447, 383349, 383381, 383413, 428798, 428835, 428872, 432646, 432683, 432720, 501176, 501206, 501236, 534433, 534468, 534503, 584133, 584173, 584213, 588293, 588333, 588373, 662451, 662484, 662517, 698599, 698636, 698673, 751133, 751175, 751217, 755501, 755543, 755585, 839087, 839127, 839167, 840579, 840621, 840663]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'contact')","[1087767, 1136793, 1202557]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testSimple(opennlp.tools.util.ListHeapTest)')","[3401, 3425, 3449, 35801, 35832, 35863, 36669, 36700, 36731, 82899, 82923, 82947, 99799, 120980, 121010, 121040, 121121, 121149, 121177, 175329, 175364, 175399, 176309, 176344, 176379, 228907, 228935, 228963, 261402, 261430, 261458, 261533, 261559, 261585, 312377, 312410, 312443, 313301, 313334, 313367, 362715, 362741, 362767, 396235, 396267, 396299, 396386, 396416, 396446, 453958, 453995, 454032, 454994, 455031, 455068, 510776, 510806, 510836, 548549, 548584, 548619, 548715, 548748, 548781, 611333, 611373, 611413, 612453, 612493, 612533, 673011, 673044, 673077, 713535, 713572, 713609, 713711, 713746, 713781, 779693, 779735, 779777, 780869, 780911, 780953, 868027, 868067, 868107, 868191, 868233, 868275]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14318, 17542, 74907, 97696, 108524, 151074, 154714, 219583, 249792, 289508, 292940, 354057, 382933, 428317, 432165, 500786, 533978, 583613, 587773, 662022, 698118, 750587, 754955, 838567, 840033]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'Luisenstraße')",[1061433]
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'About')",[1034553]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testCreationWithCustomGenerator(opennlp.tools.util.featuregen.GeneratorFactoryTest)')","[27710, 29694, 80187, 99031, 116357, 166194, 168434, 225743, 257095, 303764, 305876, 359777, 391296, 444301, 446669, 507386, 543136, 600893, 603453, 669282, 707806, 768731, 771419, 857789, 858279]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testChunkAsList(opennlp.tools.chunker.ChunkerMETest)')","[57873, 57904, 57935, 59113, 59144, 59175, 91443, 91467, 91491, 136455, 136485, 136515, 200249, 200284, 200319, 201649, 201684, 201719, 238875, 238903, 238931, 275815, 275843, 275871, 335873, 335906, 335939, 337193, 337226, 337259, 371971, 371997, 372023, 412772, 412804, 412836, 480302, 480339, 480376, 481782, 481819, 481856, 521456, 521486, 521516, 566679, 566714, 566749, 639813, 639853, 639893, 641413, 641453, 641493, 684759, 684792, 684825, 732727, 732764, 732801, 809597, 809639, 809681, 811277, 811319, 811361, 1073317, 1073357, 1073397, 1074289, 1074331, 1074373]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'then,')","[1095196, 1147129, 1212893]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testBestSequence(opennlp.tools.util.BeamSearchTest)')","[30190, 30934, 80667, 99176, 117231, 168994, 169834, 226303, 257909, 306404, 307196, 360297, 392230, 447261, 448149, 507986, 544160, 604093, 605053, 669942, 708890, 772091, 773099, 859449, 860107]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'capital')","[1124314, 1187631]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'informatics,')","[1096001, 1148249, 1214013]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'downs')","[1110238, 1168057, 1233821]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'wrote')","[1088112, 1137273, 1203037]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.chunker.ChunkerMETest')","[7448, 137020, 276342, 413375, 567339, 733425]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'Seile')","[1109686, 1167289, 1233053]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)\\(([""\'].+[""\'])?\\s*([^\\)]+)?\\)\\s+(.+)', '=======>N:art(""o"" <artd> <-sam> DET F S)\ta')","[884830, 898128, 911618, 923860, 940011, 959901, 979791, 999681]"
"('TokSpanEventStream.java', 'opennlp.tools.tokenize.TokSpanEventStream', 'createEvents', '^[A-Za-z0-9]+$', 'tip')",[1057241]
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'opennlp.tools.util.eval.FMeasureTest')","[2768, 118580, 259166, 393671, 545739, 710561]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'want')","[1095449, 1131030, 1147481, 1196975, 1213245]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testEqualsDifferentCase(opennlp.tools.dictionary.DictionaryAsSetCaseSensitiveTest)')","[14225, 14256, 14287, 17449, 17480, 17511, 74835, 74859, 74883, 108434, 108464, 108494, 150969, 151004, 151039, 154609, 154644, 154679, 219499, 219527, 219555, 249708, 249736, 249764, 289409, 289442, 289475, 292841, 292874, 292907, 353979, 354005, 354031, 382837, 382869, 382901, 428206, 428243, 428280, 432054, 432091, 432128, 500696, 500726, 500756, 533873, 533908, 533943, 583493, 583533, 583573, 587653, 587693, 587733, 661923, 661956, 661989, 698007, 698044, 698081, 750461, 750503, 750545, 754829, 754871, 754913, 838447, 838487, 838527, 839907, 839949, 839991]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testOnlyWithEntitiesWithTypes(opennlp.tools.namefind.NameFinderMETest)')","[67545, 67576, 67607, 70521, 70552, 70583, 95571, 95595, 95619, 142848, 142878, 142908, 211169, 211204, 211239, 214529, 214564, 214599, 243691, 243719, 243747, 281774, 281802, 281830, 346169, 346202, 346235, 349337, 349370, 349403, 376443, 376469, 376495, 419599, 419631, 419663, 491846, 491883, 491920, 495398, 495435, 495472, 526616, 526646, 526676, 574157, 574192, 574227, 652293, 652333, 652373, 656133, 656173, 656213, 690435, 690468, 690501, 740639, 740676, 740713, 822701, 822743, 822785, 826733, 826775, 826817, 1133523, 1133563, 1133603, 1134695, 1134737, 1134779]"
"('ADSentenceStream.java', 'opennlp.tools.formats.ad.ADSentenceStream$SentenceParser', 'getElement', '^([=-]*)([^:=]+:[^\\(\\s]+)(\\(([^\\)]+)\\))?\\s*$', '==H:prop(""Porto_Alegre"" <civ> <right> M S)\tPorto_Alegre')","[880458, 893756, 907598, 919840, 933694, 953584, 973474, 993364]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testHashCode(opennlp.tools.dictionary.DictionaryAsSetCaseInsensitiveTest)')","[16426, 19774, 75771, 97905, 109741, 153454, 157234, 220591, 250927, 291752, 295316, 354993, 384232, 430833, 434829, 501866, 535400, 586333, 590653, 663210, 699622, 753443, 757979, 841613, 843079]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testBestSequenceZeroLengthInput(opennlp.tools.util.BeamSearchTest)')","[2582, 2606, 2630, 29973, 30004, 30035, 30717, 30748, 30779, 80499, 80523, 80547, 99134, 117021, 117051, 117081, 117522, 117550, 117578, 168749, 168784, 168819, 169589, 169624, 169659, 226107, 226135, 226163, 257713, 257741, 257769, 258180, 258206, 258232, 306173, 306206, 306239, 306965, 306998, 307031, 360115, 360141, 360167, 392006, 392038, 392070, 392541, 392571, 392601, 447002, 447039, 447076, 447890, 447927, 447964, 507776, 507806, 507836, 543915, 543950, 543985, 544501, 544534, 544567, 603813, 603853, 603893, 604773, 604813, 604853, 669711, 669744, 669777, 708631, 708668, 708705, 709251, 709286, 709321, 771797, 771839, 771881, 772805, 772847, 772889, 859169, 859209, 859249, 859813, 859855, 859897]"
"('Description.java', 'org.junit.runner.Description', 'parseMethod', '(.*)\\((.*)\\)', 'testPOSModelSerializationMaxent(opennlp.tools.postag.POSModelTest)')","[47798, 48418, 87483, 101167, 129176, 188874, 189574, 234255, 269036, 325148, 325808, 367681, 404993, 468277, 469017, 516506, 558150, 626813, 627613, 679314, 723698, 795947, 796787, 1015895, 1016225]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'speed')","[1113642, 1172793, 1238557]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'husband')","[1093402, 1094874, 1144633, 1146681, 1210397, 1212445]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testFeatureGeneration(opennlp.tools.util.featuregen.PreviousMapFeatureGeneratorTest)')","[1997, 2021, 2045, 24393, 24424, 24455, 25385, 25416, 25447, 78387, 78411, 78435, 98572, 113696, 113726, 113756, 113837, 113865, 113893, 162449, 162484, 162519, 163569, 163604, 163639, 223643, 223671, 223699, 254614, 254642, 254670, 254745, 254771, 254797, 300233, 300266, 300299, 301289, 301322, 301355, 357827, 357853, 357879, 388455, 388487, 388519, 388606, 388636, 388666, 440342, 440379, 440416, 441526, 441563, 441600, 505136, 505166, 505196, 540025, 540060, 540095, 540191, 540224, 540257, 596613, 596653, 596693, 597893, 597933, 597973, 666807, 666840, 666873, 704515, 704552, 704589, 704691, 704726, 704761, 764237, 764279, 764321, 765581, 765623, 765665, 851483, 851523, 851563, 851647, 851689, 851731]"
"('Description.java', 'org.junit.runner.Description', 'getClassName', '(.*)\\((.*)\\)', 'testGetText(opennlp.tools.parser.ParseTest)')","[9761, 9792, 9823, 11001, 11032, 11063, 72723, 72747, 72771, 104972, 105002, 105032, 145929, 145964, 145999, 147329, 147364, 147399, 217035, 217063, 217091, 246482, 246510, 246538, 284657, 284690, 284723, 285977, 286010, 286043, 351691, 351717, 351743, 379139, 379171, 379203, 422878, 422915, 422952, 424358, 424395, 424432, 498056, 498086, 498116, 529821, 529856, 529891, 577733, 577773, 577813, 579333, 579373, 579413, 659019, 659052, 659085, 693719, 693756, 693793, 744413, 744455, 744497, 746093, 746135, 746177, 830835, 830875, 830915, 832127, 832169, 832211]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'him.')","[1087813, 1106811, 1136857, 1163289, 1202621, 1229053]"
"('NameSample.java', 'opennlp.tools.namefind.NameSample', 'parse', '<START(:([^:>\\s]*))?>', 'pedestrians.')","[1111779, 1170201, 1235965]"
